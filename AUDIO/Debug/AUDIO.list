
AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a194  0800a194  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a194  0800a194  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a194  0800a194  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000070  0800a20c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001afc  0800a20c  00021afc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014589  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000324c  00000000  00000000  00034622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00038c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7a2  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001708a  00000000  00000000  000565fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1de9  00000000  00000000  0006d684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f46d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  0010f4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08009974 	.word	0x08009974

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08009974 	.word	0x08009974

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f002 fb63 	bl	8002948 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f002 fb5b 	bl	8002948 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f002 fb44 	bl	8002948 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f002 fb3d 	bl	8002948 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08009acc 	.word	0x08009acc

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <initFileStruct>:
//void initFileSturct(FileStruct*);
//int initFileHeader(FileStruct*);
//int readFile(FileStruct*);
//int16_t readSample(FileStruct*);

static inline void initFileStruct(FileStruct *fileStruct) {
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BUFF_NUM; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e03a      	b.n	80007ee <initFileStruct+0x84>
		fileStruct->structs[i].curr = fileStruct->structs[i].first = fileStruct->structs[i].raw;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8000786:	3318      	adds	r3, #24
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	1d1a      	adds	r2, r3, #4
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 8000796:	fb00 f303 	mul.w	r3, r0, r3
 800079a:	440b      	add	r3, r1
 800079c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007a0:	3304      	adds	r3, #4
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80007ac:	fb01 f303 	mul.w	r3, r1, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007b6:	3304      	adds	r3, #4
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 80007c2:	fb00 f303 	mul.w	r3, r0, r3
 80007c6:	440b      	add	r3, r1
 80007c8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007cc:	3308      	adds	r3, #8
 80007ce:	601a      	str	r2, [r3, #0]
		fileStruct->structs[i].buffSize = 0;
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80007d8:	fb01 f303 	mul.w	r3, r1, r3
 80007dc:	4413      	add	r3, r2
 80007de:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007e2:	330c      	adds	r3, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFF_NUM; i++) {
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	ddc1      	ble.n	8000778 <initFileStruct+0xe>
	}
	fileStruct->currReading = BUFF_NUM - 1; // set to use the first fileStruct
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
	fileStruct->currWriting = 0; // also set to use the first fileStruct
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	fileStruct->inUse = 1;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fileStruct->fileEmpty = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <initFileHeader>:

static inline int initFileHeader(FileStruct *fileStruct) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	int bytes_read;
	return f_read(&(fileStruct->file), &(fileStruct->header), sizeof(WAV_HEADER), &bytes_read);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 800083e:	310c      	adds	r1, #12
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	222c      	movs	r2, #44	; 0x2c
 8000846:	f007 ffdb 	bl	8008800 <f_read>
 800084a:	4603      	mov	r3, r0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <readFile>:

static inline int readFile(FileStruct* f) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (f->fileEmpty) return -1;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000862:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <readFile+0x1c>
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e077      	b.n	8000960 <readFile+0x10c>

	if (f->currWriting == f->currReading) return -1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f893 2845 	ldrb.w	r2, [r3, #2117]	; 0x845
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000880:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000884:	429a      	cmp	r2, r3
 8000886:	d102      	bne.n	800088e <readFile+0x3a>
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	e068      	b.n	8000960 <readFile+0x10c>
	if (fileStructEmpty(f, f->currWriting)) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000894:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8000898:	4619      	mov	r1, r3
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008a0:	fb01 f303 	mul.w	r3, r1, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80008aa:	330c      	adds	r3, #12
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d155      	bne.n	800095e <readFile+0x10a>
		FRESULT res = f_read(&(f->file), f->structs[f->currWriting].raw, BUFF_SIZE, &(f->structs[f->currWriting].buffSize));
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ba:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80008be:	461a      	mov	r2, r3
 80008c0:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80008cc:	3318      	adds	r3, #24
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	1d19      	adds	r1, r3, #4
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008da:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80008ec:	3308      	adds	r3, #8
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	3304      	adds	r3, #4
 80008f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f8:	f007 ff82 	bl	8008800 <f_read>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
//		char buff[30];
//		sprintf(buff, "res: %2d, buff: %4d, %4d", res, f->structs[f->currWriting].buffSize, HAL_GetTick() % 1000);
//		LCD_DrawString(0, 0, buff);
		if (res != FR_OK || f->structs[f->currWriting].buffSize == 0) {
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d111      	bne.n	800092a <readFile+0xd6>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800090c:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8000910:	4619      	mov	r1, r3
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	4413      	add	r3, r2
 800091e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000922:	330c      	adds	r3, #12
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d108      	bne.n	800093c <readFile+0xe8>
			f->fileEmpty = 1;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			return -1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e011      	b.n	8000960 <readFile+0x10c>
		}
		f->currWriting = (f->currWriting + 1) % BUFF_NUM;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000942:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8000946:	3301      	adds	r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	bfb8      	it	lt
 8000950:	425b      	neglt	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095a:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	}
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <readSample>:

static inline uint16_t readSample(FileStruct* f) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	if (!f->inUse) return 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <readSample+0x1a>
 800097e:	2300      	movs	r3, #0
 8000980:	e0da      	b.n	8000b38 <readSample+0x1d0>

	if (!fileStructEmpty(f, f->currReading)) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000988:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 800098c:	4619      	mov	r1, r3
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	4413      	add	r3, r2
 800099a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800099e:	330c      	adds	r3, #12
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d06e      	beq.n	8000a84 <readSample+0x11c>
		f->structs[f->currReading].buffSize -= 2;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009ac:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80009b0:	4619      	mov	r1, r3
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009b8:	fb01 f303 	mul.w	r3, r1, r3
 80009bc:	4413      	add	r3, r2
 80009be:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80009c2:	330c      	adds	r3, #12
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80009cc:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 80009d0:	4610      	mov	r0, r2
 80009d2:	3b02      	subs	r3, #2
 80009d4:	b299      	uxth	r1, r3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009dc:	fb00 f303 	mul.w	r3, r0, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80009e6:	330c      	adds	r3, #12
 80009e8:	460a      	mov	r2, r1
 80009ea:	801a      	strh	r2, [r3, #0]
		temp = (f->structs[f->currReading].curr[1] << 8) | f->structs[f->currReading].curr[0];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f2:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80009f6:	4619      	mov	r1, r3
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009fe:	fb01 f303 	mul.w	r3, r1, r3
 8000a02:	4413      	add	r3, r2
 8000a04:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a08:	3308      	adds	r3, #8
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a1a:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a1e:	4618      	mov	r0, r3
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a26:	fb00 f303 	mul.w	r3, r0, r3
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a30:	3308      	adds	r3, #8
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	81fb      	strh	r3, [r7, #14]
		f->structs[f->currReading].curr += 2;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a44:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a50:	fb01 f303 	mul.w	r3, r1, r3
 8000a54:	4413      	add	r3, r2
 8000a56:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000a64:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 8000a68:	4610      	mov	r0, r2
 8000a6a:	1c9a      	adds	r2, r3, #2
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a72:	fb00 f303 	mul.w	r3, r0, r3
 8000a76:	440b      	add	r3, r1
 8000a78:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a7c:	3308      	adds	r3, #8
 8000a7e:	601a      	str	r2, [r3, #0]
		return temp;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	e059      	b.n	8000b38 <readSample+0x1d0>
	} else if (!fileStructEmpty(f, (f->currReading + 1) % BUFF_NUM)) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a8a:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a8e:	3301      	adds	r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8000aa0:	fb01 f303 	mul.w	r3, r1, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000aaa:	330c      	adds	r3, #12
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d034      	beq.n	8000b1c <readSample+0x1b4>
		f->currReading = (f->currReading + 1) % BUFF_NUM;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab8:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000abc:	3301      	adds	r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad0:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
		f->structs[f->currReading].curr = f->structs[f->currReading].first;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ada:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000ade:	4619      	mov	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ae6:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000aea:	4618      	mov	r0, r3
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000af2:	fb01 f303 	mul.w	r3, r1, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000afc:	3304      	adds	r3, #4
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000b06:	fb00 f303 	mul.w	r3, r0, r3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000b10:	3308      	adds	r3, #8
 8000b12:	601a      	str	r2, [r3, #0]
		readSample(f);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff27 	bl	8000968 <readSample>
	} else {
		if (f->fileEmpty) f->inUse = 0;
		return 0;
	}
}
 8000b1a:	e00d      	b.n	8000b38 <readSample+0x1d0>
		if (f->fileEmpty) f->inUse = 0;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <readSample+0x1ce>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <error_handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define TESTFILE
void error_handler(int res, const char* msg) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	; 0x70
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	char buff[100];
		sprintf(buff, "%d %s", res, msg);
 8000b4a:	f107 000c 	add.w	r0, r7, #12
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <error_handler+0x34>)
 8000b54:	f008 fa94 	bl	8009080 <siprintf>
	  LCD_DrawString(40, 0, buff);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f7ff fdd3 	bl	800070c <LCD_DrawString>
	  HAL_Delay(1000000);
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <error_handler+0x38>)
 8000b68:	f000 ff8a 	bl	8001a80 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3770      	adds	r7, #112	; 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	0800998c 	.word	0x0800998c
 8000b78:	000f4240 	.word	0x000f4240

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000b82:	b082      	sub	sp, #8
 8000b84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 ff19 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 fa33 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 fb85 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b92:	f000 fb65 	bl	8001260 <MX_DMA_Init>
  MX_FSMC_Init();
 8000b96:	f000 fc35 	bl	8001404 <MX_FSMC_Init>
  MX_DAC_Init();
 8000b9a:	f000 fa71 	bl	8001080 <MX_DAC_Init>
  MX_TIM2_Init();
 8000b9e:	f000 fac5 	bl	800112c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ba2:	f000 fb0f 	bl	80011c4 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8000ba6:	f000 faa1 	bl	80010ec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000baa:	f005 f9b7 	bl	8005f1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000bae:	f7ff fb4a 	bl	8000246 <LCD_INIT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	485e      	ldr	r0, [pc, #376]	; (8000d30 <main+0x1b4>)
 8000bb6:	f001 f8b6 	bl	8001d26 <HAL_DAC_Start>

  TIM2->PSC = 7900;
 8000bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bbe:	f641 62dc 	movw	r2, #7900	; 0x1edc
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 7900;
 8000bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc8:	f641 62dc 	movw	r2, #7900	; 0x1edc
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  FATFS FatFs;
  DIR dir;
  FILINFO fno;

#ifdef TESTFILE
  HAL_Delay(20);
 8000bce:	2014      	movs	r0, #20
 8000bd0:	f000 ff56 	bl	8001a80 <HAL_Delay>
  res = f_mount(&FatFs, "", 1);
 8000bd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4955      	ldr	r1, [pc, #340]	; (8000d34 <main+0x1b8>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f007 fabe 	bl	8008160 <f_mount>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bea:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000bee:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "No sd card found!");
 8000bf0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000bf4:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <main+0x94>
 8000bfe:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c02:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	494b      	ldr	r1, [pc, #300]	; (8000d38 <main+0x1bc>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff98 	bl	8000b40 <error_handler>
  HAL_Delay(20);
 8000c10:	2014      	movs	r0, #20
 8000c12:	f000 ff35 	bl	8001a80 <HAL_Delay>

  res = f_opendir(&dir, "0:");
 8000c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1a:	3b24      	subs	r3, #36	; 0x24
 8000c1c:	4947      	ldr	r1, [pc, #284]	; (8000d3c <main+0x1c0>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f007 ffd6 	bl	8008bd0 <f_opendir>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c2a:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000c2e:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open drive");
 8000c30:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c34:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d008      	beq.n	8000c50 <main+0xd4>
 8000c3e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c42:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	493d      	ldr	r1, [pc, #244]	; (8000d40 <main+0x1c4>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff78 	bl	8000b40 <error_handler>
  HAL_Delay(20);
 8000c50:	2014      	movs	r0, #20
 8000c52:	f000 ff15 	bl	8001a80 <HAL_Delay>

  int lineNum = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c5c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000c60:	6013      	str	r3, [r2, #0]
  char* filename;
  while (1) {
	  res = f_readdir(&dir, &fno);
 8000c62:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c66:	3a3c      	subs	r2, #60	; 0x3c
 8000c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6c:	3b24      	subs	r3, #36	; 0x24
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f008 f83f 	bl	8008cf4 <f_readdir>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c7c:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000c80:	7013      	strb	r3, [r2, #0]
	  if (res != FR_OK || fno.fname[0] == 0) {
 8000c82:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c86:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d105      	bne.n	8000c9c <main+0x120>
 8000c90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c94:	f813 3c73 	ldrb.w	r3, [r3, #-115]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <main+0x158>
		  sprintf(buff, "%d no more :(", res);
 8000c9c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000ca0:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4926      	ldr	r1, [pc, #152]	; (8000d44 <main+0x1c8>)
 8000caa:	4827      	ldr	r0, [pc, #156]	; (8000d48 <main+0x1cc>)
 8000cac:	f008 f9e8 	bl	8009080 <siprintf>
		  LCD_DrawString(0, 20+20*(lineNum), buff);
 8000cb0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000cb4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <main+0x1cc>)
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fd1d 	bl	800070c <LCD_DrawString>
		  break;
 8000cd2:	e03c      	b.n	8000d4e <main+0x1d2>
	  }
	  filename = fno.fname;
 8000cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd8:	3b3c      	subs	r3, #60	; 0x3c
 8000cda:	3309      	adds	r3, #9
 8000cdc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000ce0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000ce4:	6013      	str	r3, [r2, #0]
	  LCD_DrawString(0, 20+20*(lineNum++), filename);
 8000ce6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000cea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8000cf6:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8000cfa:	600a      	str	r2, [r1, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d0e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fcf8 	bl	800070c <LCD_DrawString>
	  if (filename[0] == 'M') break;
 8000d1c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d20:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b4d      	cmp	r3, #77	; 0x4d
 8000d2a:	d00f      	beq.n	8000d4c <main+0x1d0>
	  res = f_readdir(&dir, &fno);
 8000d2c:	e799      	b.n	8000c62 <main+0xe6>
 8000d2e:	bf00      	nop
 8000d30:	2000008c 	.word	0x2000008c
 8000d34:	08009994 	.word	0x08009994
 8000d38:	08009998 	.word	0x08009998
 8000d3c:	080099ac 	.word	0x080099ac
 8000d40:	080099b0 	.word	0x080099b0
 8000d44:	080099c4 	.word	0x080099c4
 8000d48:	20000240 	.word	0x20000240
	  if (filename[0] == 'M') break;
 8000d4c:	bf00      	nop
  }


  // Initialize the fileStruct struct
  res = f_open(&(sampleFile.file), filename, FA_READ);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d54:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	4897      	ldr	r0, [pc, #604]	; (8000fb8 <main+0x43c>)
 8000d5c:	f007 fa4a 	bl	80081f4 <f_open>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d66:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000d6a:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open file");
 8000d6c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d70:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d008      	beq.n	8000d8c <main+0x210>
 8000d7a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d7e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	498d      	ldr	r1, [pc, #564]	; (8000fbc <main+0x440>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff feda 	bl	8000b40 <error_handler>

  HAL_Delay(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 fe77 	bl	8001a80 <HAL_Delay>
  initFileStruct(&sampleFile);
 8000d92:	4889      	ldr	r0, [pc, #548]	; (8000fb8 <main+0x43c>)
 8000d94:	f7ff fce9 	bl	800076a <initFileStruct>
  res = initFileHeader(&sampleFile);
 8000d98:	4887      	ldr	r0, [pc, #540]	; (8000fb8 <main+0x43c>)
 8000d9a:	f7ff fd48 	bl	800082e <initFileHeader>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000da4:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000da8:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot read file");
 8000daa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dae:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <main+0x24e>
 8000db8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dbc:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	497f      	ldr	r1, [pc, #508]	; (8000fc0 <main+0x444>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff febb 	bl	8000b40 <error_handler>

  HAL_TIM_Base_Start(&htim2);
 8000dca:	487e      	ldr	r0, [pc, #504]	; (8000fc4 <main+0x448>)
 8000dcc:	f003 fe92 	bl	8004af4 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <main+0x448>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <main+0x448>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	60da      	str	r2, [r3, #12]

  // Display some information about the header
  	WavHeader *header = &(sampleFile.header);
 8000de0:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <main+0x44c>)
 8000de2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000de6:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000dea:	6013      	str	r3, [r2, #0]
    sprintf(buff, "hertz: %d", header->sampleFreq);
 8000dec:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000df0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4974      	ldr	r1, [pc, #464]	; (8000fcc <main+0x450>)
 8000dfc:	4874      	ldr	r0, [pc, #464]	; (8000fd0 <main+0x454>)
 8000dfe:	f008 f93f 	bl	8009080 <siprintf>
    LCD_DrawString(30, 100, buff);
 8000e02:	4a73      	ldr	r2, [pc, #460]	; (8000fd0 <main+0x454>)
 8000e04:	2164      	movs	r1, #100	; 0x64
 8000e06:	201e      	movs	r0, #30
 8000e08:	f7ff fc80 	bl	800070c <LCD_DrawString>
    sprintf(buff, "bits/sample: %d", header->bitsPerSample);
 8000e0c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e10:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000e18:	461a      	mov	r2, r3
 8000e1a:	496e      	ldr	r1, [pc, #440]	; (8000fd4 <main+0x458>)
 8000e1c:	486c      	ldr	r0, [pc, #432]	; (8000fd0 <main+0x454>)
 8000e1e:	f008 f92f 	bl	8009080 <siprintf>
    LCD_DrawString(30, 120, buff);
 8000e22:	4a6b      	ldr	r2, [pc, #428]	; (8000fd0 <main+0x454>)
 8000e24:	2178      	movs	r1, #120	; 0x78
 8000e26:	201e      	movs	r0, #30
 8000e28:	f7ff fc70 	bl	800070c <LCD_DrawString>
    sprintf(buff, "channels: %d", header->channels);
 8000e2c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e30:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	8adb      	ldrh	r3, [r3, #22]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4967      	ldr	r1, [pc, #412]	; (8000fd8 <main+0x45c>)
 8000e3c:	4864      	ldr	r0, [pc, #400]	; (8000fd0 <main+0x454>)
 8000e3e:	f008 f91f 	bl	8009080 <siprintf>
    LCD_DrawString(30, 140, buff);
 8000e42:	4a63      	ldr	r2, [pc, #396]	; (8000fd0 <main+0x454>)
 8000e44:	218c      	movs	r1, #140	; 0x8c
 8000e46:	201e      	movs	r0, #30
 8000e48:	f7ff fc60 	bl	800070c <LCD_DrawString>
    sprintf(buff, "data: %d", header->dataChunkLength);
 8000e4c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e50:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4960      	ldr	r1, [pc, #384]	; (8000fdc <main+0x460>)
 8000e5c:	485c      	ldr	r0, [pc, #368]	; (8000fd0 <main+0x454>)
 8000e5e:	f008 f90f 	bl	8009080 <siprintf>
    LCD_DrawString(30, 160, buff);
 8000e62:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <main+0x454>)
 8000e64:	21a0      	movs	r1, #160	; 0xa0
 8000e66:	201e      	movs	r0, #30
 8000e68:	f7ff fc50 	bl	800070c <LCD_DrawString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int some_tick = HAL_GetTick();
 8000e6c:	f000 fdfe 	bl	8001a6c <HAL_GetTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000e76:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000e7a:	6013      	str	r3, [r2, #0]

  while (1)
  {

	  if (HAL_GetTick() - some_tick > 200) {
 8000e7c:	f000 fdf6 	bl	8001a6c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e86:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2bc8      	cmp	r3, #200	; 0xc8
 8000e90:	d90b      	bls.n	8000eaa <main+0x32e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000e92:	2102      	movs	r1, #2
 8000e94:	4852      	ldr	r0, [pc, #328]	; (8000fe0 <main+0x464>)
 8000e96:	f001 fd6f 	bl	8002978 <HAL_GPIO_TogglePin>
		  some_tick = HAL_GetTick();
 8000e9a:	f000 fde7 	bl	8001a6c <HAL_GetTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000ea4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000ea8:	6013      	str	r3, [r2, #0]
	  }

	  	  sprintf(buff, "(0) %4d (1) %4d", sampleFile.structs[0].buffSize, sampleFile.structs[1].buffSize);
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <main+0x43c>)
 8000eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb0:	f8b3 344c 	ldrh.w	r3, [r3, #1100]	; 0x44c
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <main+0x43c>)
 8000eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ebc:	f8b3 3840 	ldrh.w	r3, [r3, #2112]	; 0x840
 8000ec0:	4948      	ldr	r1, [pc, #288]	; (8000fe4 <main+0x468>)
 8000ec2:	4843      	ldr	r0, [pc, #268]	; (8000fd0 <main+0x454>)
 8000ec4:	f008 f8dc 	bl	8009080 <siprintf>
	  	  LCD_DrawString(0, 210, buff);
 8000ec8:	4a41      	ldr	r2, [pc, #260]	; (8000fd0 <main+0x454>)
 8000eca:	21d2      	movs	r1, #210	; 0xd2
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fc1d 	bl	800070c <LCD_DrawString>
	  	  sprintf(buff, "r:%d,w:%d,empty:%d", sampleFile.currReading, sampleFile.currWriting, sampleFile.fileEmpty);
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <main+0x43c>)
 8000ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ed8:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <main+0x43c>)
 8000ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ee4:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <main+0x43c>)
 8000eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	493b      	ldr	r1, [pc, #236]	; (8000fe8 <main+0x46c>)
 8000efa:	4835      	ldr	r0, [pc, #212]	; (8000fd0 <main+0x454>)
 8000efc:	f008 f8c0 	bl	8009080 <siprintf>
	  	  LCD_DrawString(0, 230, buff);
 8000f00:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <main+0x454>)
 8000f02:	21e6      	movs	r1, #230	; 0xe6
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fc01 	bl	800070c <LCD_DrawString>
		  sprintf(buff, "sample: %6d     ", sample_sum);
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <main+0x470>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4937      	ldr	r1, [pc, #220]	; (8000ff0 <main+0x474>)
 8000f12:	482f      	ldr	r0, [pc, #188]	; (8000fd0 <main+0x454>)
 8000f14:	f008 f8b4 	bl	8009080 <siprintf>
	      LCD_DrawString(20, 80, buff);
 8000f18:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <main+0x454>)
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	2014      	movs	r0, #20
 8000f1e:	f7ff fbf5 	bl	800070c <LCD_DrawString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
}
 8000f24:	bf00      	nop

	  	__disable_irq();
		readFile(&sampleFile);
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <main+0x43c>)
 8000f28:	f7ff fc94 	bl	8000854 <readFile>
		if (!sampleFile.inUse) {
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <main+0x43c>)
 8000f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d13a      	bne.n	8000fb0 <main+0x434>
		  res = f_open(&(sampleFile.file), filename, FA_READ);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f40:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <main+0x43c>)
 8000f48:	f007 f954 	bl	80081f4 <f_open>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000f52:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000f56:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot open file");
 8000f58:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f5c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <main+0x3fc>
 8000f66:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f6a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4912      	ldr	r1, [pc, #72]	; (8000fbc <main+0x440>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fde4 	bl	8000b40 <error_handler>
		  initFileStruct(&sampleFile);
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <main+0x43c>)
 8000f7a:	f7ff fbf6 	bl	800076a <initFileStruct>
		  res = initFileHeader(&sampleFile);
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <main+0x43c>)
 8000f80:	f7ff fc55 	bl	800082e <initFileHeader>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000f8a:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000f8e:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot read file");
 8000f90:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f94:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <main+0x434>
 8000f9e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000fa2:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <main+0x444>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fdc8 	bl	8000b40 <error_handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb0:	b662      	cpsie	i
}
 8000fb2:	bf00      	nop
  {
 8000fb4:	e762      	b.n	8000e7c <main+0x300>
 8000fb6:	bf00      	nop
 8000fb8:	20000260 	.word	0x20000260
 8000fbc:	080099d4 	.word	0x080099d4
 8000fc0:	080099e8 	.word	0x080099e8
 8000fc4:	20000168 	.word	0x20000168
 8000fc8:	2000128c 	.word	0x2000128c
 8000fcc:	080099fc 	.word	0x080099fc
 8000fd0:	20000240 	.word	0x20000240
 8000fd4:	08009a08 	.word	0x08009a08
 8000fd8:	08009a18 	.word	0x08009a18
 8000fdc:	08009a28 	.word	0x08009a28
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	08009a34 	.word	0x08009a34
 8000fe8:	08009a44 	.word	0x08009a44
 8000fec:	20001aaa 	.word	0x20001aaa
 8000ff0:	08009a58 	.word	0x08009a58

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	; 0x40
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f008 f834 	bl	8009070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001032:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fcb5 	bl	80029ac <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001048:	f000 fa6c 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f001 ff22 	bl	8002eb0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001072:	f000 fa57 	bl	8001524 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	; 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_DAC_Init+0x64>)
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <MX_DAC_Init+0x68>)
 8001092:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <MX_DAC_Init+0x64>)
 8001096:	f000 fe24 	bl	8001ce2 <HAL_DAC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010a0:	f000 fa40 	bl	8001524 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_DAC_Init+0x64>)
 80010b4:	f000 feac 	bl	8001e10 <HAL_DAC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010be:	f000 fa31 	bl	8001524 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010c2:	2324      	movs	r3, #36	; 0x24
 80010c4:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2210      	movs	r2, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_DAC_Init+0x64>)
 80010ce:	f000 fe9f 	bl	8001e10 <HAL_DAC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80010d8:	f000 fa24 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  /* USER CODE END DAC_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000008c 	.word	0x2000008c
 80010e8:	40007400 	.word	0x40007400

080010ec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <MX_SDIO_SD_Init+0x3c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <MX_SDIO_SD_Init+0x38>)
 8001116:	220c      	movs	r2, #12
 8001118:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4
 8001128:	40018000 	.word	0x40018000

0800112c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_TIM2_Init+0x94>)
 800114a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_TIM2_Init+0x94>)
 800115e:	f241 1293 	movw	r2, #4499	; 0x1193
 8001162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001172:	f003 fc6f 	bl	8004a54 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800117c:	f000 f9d2 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM2_Init+0x94>)
 800118e:	f003 fe11 	bl	8004db4 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 f9c4 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800119c:	2320      	movs	r3, #32
 800119e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_TIM2_Init+0x94>)
 80011aa:	f003 fffb 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f9b6 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000168 	.word	0x20000168

080011c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM3_Init+0x94>)
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <MX_TIM3_Init+0x98>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_TIM3_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM3_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3264;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM3_Init+0x94>)
 80011f4:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80011f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_TIM3_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM3_Init+0x94>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM3_Init+0x94>)
 8001208:	f003 fc24 	bl	8004a54 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 f987 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM3_Init+0x94>)
 8001224:	f003 fdc6 	bl	8004db4 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 f979 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM3_Init+0x94>)
 8001240:	f003 ffb0 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800124a:	f000 f96b 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001b0 	.word	0x200001b0
 800125c:	40000400 	.word	0x40000400

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x38>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x38>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x38>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	203b      	movs	r0, #59	; 0x3b
 8001284:	f000 fcf7 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8001288:	203b      	movs	r0, #59	; 0x3b
 800128a:	f000 fd10 	bl	8001cae <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_GPIO_Init+0x150>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <MX_GPIO_Init+0x150>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_GPIO_Init+0x150>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_GPIO_Init+0x150>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a47      	ldr	r2, [pc, #284]	; (80013ec <MX_GPIO_Init+0x150>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_GPIO_Init+0x150>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_GPIO_Init+0x150>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a41      	ldr	r2, [pc, #260]	; (80013ec <MX_GPIO_Init+0x150>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <MX_GPIO_Init+0x150>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_GPIO_Init+0x150>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a3b      	ldr	r2, [pc, #236]	; (80013ec <MX_GPIO_Init+0x150>)
 80012fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_GPIO_Init+0x150>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_GPIO_Init+0x150>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <MX_GPIO_Init+0x150>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <MX_GPIO_Init+0x150>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2103      	movs	r1, #3
 800132c:	4830      	ldr	r0, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x154>)
 800132e:	f001 fb0b 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <MX_GPIO_Init+0x158>)
 800133a:	f001 fb05 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001344:	482c      	ldr	r0, [pc, #176]	; (80013f8 <MX_GPIO_Init+0x15c>)
 8001346:	f001 faff 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	482b      	ldr	r0, [pc, #172]	; (80013fc <MX_GPIO_Init+0x160>)
 8001350:	f001 fafa 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <MX_GPIO_Init+0x164>)
 800136a:	f001 f959 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136e:	2303      	movs	r3, #3
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4619      	mov	r1, r3
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x154>)
 8001386:	f001 f94b 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_GPIO_Init+0x158>)
 80013a4:	f001 f93c 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80013c2:	f001 f92d 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_GPIO_Init+0x160>)
 80013de:	f001 f91f 	bl	8002620 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011400 	.word	0x40011400
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40011800 	.word	0x40011800
 8001400:	40011000 	.word	0x40011000

08001404 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800141e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001422:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001426:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <MX_FSMC_Init+0xc0>)
 8001428:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800143e:	2210      	movs	r2, #16
 8001440:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800145c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_FSMC_Init+0xbc>)
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800147e:	230f      	movs	r3, #15
 8001480:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001482:	23ff      	movs	r3, #255	; 0xff
 8001484:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001486:	230f      	movs	r3, #15
 8001488:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800148e:	2311      	movs	r3, #17
 8001490:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <MX_FSMC_Init+0xbc>)
 800149e:	f003 fa8c 	bl	80049ba <HAL_SRAM_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80014a8:	f000 f83c 	bl	8001524 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_FSMC_Init+0xc4>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <MX_FSMC_Init+0xc4>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200001f8 	.word	0x200001f8
 80014c4:	a0000104 	.word	0xa0000104
 80014c8:	40010000 	.word	0x40010000

080014cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d116      	bne.n	800150c <HAL_TIM_PeriodElapsedCallback+0x40>
//		counter++;
		sample_sum = readSample(&sampleFile);
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014e0:	f7ff fa42 	bl	8000968 <readSample>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014ea:	801a      	strh	r2, [r3, #0]
		dac_out = ((int16_t) sample_sum + 32768);
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014f8:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (dac_out) >> 4);
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	b29b      	uxth	r3, r3
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001508:	f000 fc5e 	bl	8001dc8 <HAL_DAC_SetValue>
	}
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000260 	.word	0x20000260
 8001518:	20001aaa 	.word	0x20001aaa
 800151c:	20001aa8 	.word	0x20001aa8
 8001520:	2000008c 	.word	0x2000008c

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_MspInit+0x5c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_MspInit+0x5c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_MspInit+0x60>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_MspInit+0x60>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_DAC_MspInit+0xc0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d14a      	bne.n	800164a <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015be:	61d3      	str	r3, [r2, #28]
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_DAC_MspInit+0xc4>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015e4:	2330      	movs	r3, #48	; 0x30
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <HAL_DAC_MspInit+0xc8>)
 80015f4:	f001 f814 	bl	8002620 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_DAC_MspInit+0xd0>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001600:	2210      	movs	r2, #16
 8001602:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 800161a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001622:	2220      	movs	r2, #32
 8001624:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001630:	f000 fc3c 	bl	8001eac <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 800163a:	f7ff ff73 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_DAC_MspInit+0xcc>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40007400 	.word	0x40007400
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800
 8001660:	200000a0 	.word	0x200000a0
 8001664:	40020444 	.word	0x40020444

08001668 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <HAL_SD_MspInit+0xb4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d144      	bne.n	8001712 <HAL_SD_MspInit+0xaa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_SD_MspInit+0xb8>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_SD_MspInit+0xb8>)
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	6153      	str	r3, [r2, #20]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_SD_MspInit+0xb8>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016be:	f043 0320 	orr.w	r3, r3, #32
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_SD_MspInit+0xb8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016d4:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4619      	mov	r1, r3
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <HAL_SD_MspInit+0xbc>)
 80016e6:	f000 ff9b 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ea:	2304      	movs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4619      	mov	r1, r3
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <HAL_SD_MspInit+0xc0>)
 80016fe:	f000 ff8f 	bl	8002620 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2031      	movs	r0, #49	; 0x31
 8001708:	f000 fab5 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800170c:	2031      	movs	r0, #49	; 0x31
 800170e:	f000 face 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40018000 	.word	0x40018000
 8001720:	40021000 	.word	0x40021000
 8001724:	40011000 	.word	0x40011000
 8001728:	40011400 	.word	0x40011400

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d114      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 fa8b 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 faa4 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001766:	e018      	b.n	800179a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_TIM_Base_MspInit+0x7c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d113      	bne.n	800179a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	201d      	movs	r0, #29
 8001790:	f000 fa71 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001794:	201d      	movs	r0, #29
 8001796:	f000 fa8a 	bl	8001cae <HAL_NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40000400 	.word	0x40000400

080017ac <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_FSMC_MspInit+0x78>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d129      	bne.n	800181c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_FSMC_MspInit+0x78>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_FSMC_MspInit+0x7c>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_FSMC_MspInit+0x7c>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_FSMC_MspInit+0x7c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017e6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017ea:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4619      	mov	r1, r3
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <HAL_FSMC_MspInit+0x80>)
 80017fc:	f000 ff10 	bl	8002620 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001800:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001804:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <HAL_FSMC_MspInit+0x84>)
 8001816:	f000 ff03 	bl	8002620 <HAL_GPIO_Init>
 800181a:	e000      	b.n	800181e <HAL_FSMC_MspInit+0x72>
    return;
 800181c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20001aac 	.word	0x20001aac
 8001828:	40021000 	.word	0x40021000
 800182c:	40011800 	.word	0x40011800
 8001830:	40011400 	.word	0x40011400

08001834 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800183c:	f7ff ffb6 	bl	80017ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>
	...

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LCD_DrawString(0, 0, "HardFault!");
 8001854:	4a02      	ldr	r2, [pc, #8]	; (8001860 <HardFault_Handler+0x10>)
 8001856:	2100      	movs	r1, #0
 8001858:	2000      	movs	r0, #0
 800185a:	f7fe ff57 	bl	800070c <LCD_DrawString>
 800185e:	e7f9      	b.n	8001854 <HardFault_Handler+0x4>
 8001860:	08009a6c 	.word	0x08009a6c

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f8d3 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM2_IRQHandler+0x10>)
 80018ae:	f003 f979 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168

080018bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM3_IRQHandler+0x10>)
 80018c2:	f003 f96f 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001b0 	.word	0x200001b0

080018d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <SDIO_IRQHandler+0x10>)
 80018d6:	f002 f863 	bl	80039a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000e4 	.word	0x200000e4

080018e4 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA2_Channel4_5_IRQHandler+0x10>)
 80018ea:	f000 fc5d 	bl	80021a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000a0 	.word	0x200000a0

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f007 fb78 	bl	800901c <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20010000 	.word	0x20010000
 8001958:	00000400 	.word	0x00000400
 800195c:	20001ab0 	.word	0x20001ab0
 8001960:	20001b00 	.word	0x20001b00

08001964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001996:	f7ff ffe5 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f007 fb45 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7ff f8ed 	bl	8000b7c <main>
  bx lr
 80019a2:	4770      	bx	lr
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019ac:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 80019b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b4:	20001afc 	.word	0x20001afc

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_Init+0x28>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_Init+0x28>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f947 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f808 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d8:	f7ff fdaa 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f95f 	bl	8001cca <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f927 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_InitTick+0x5c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20001ab4 	.word	0x20001ab4

08001a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20001ab4 	.word	0x20001ab4

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffe0 	bl	8001a6c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4906      	ldr	r1, [pc, #24]	; (8001b60 <__NVIC_EnableIRQ+0x34>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff90 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff2d 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff42 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff90 	bl	8001bb8 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5f 	bl	8001b64 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff35 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e014      	b.n	8001d1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fc45 	bl	8001594 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	795b      	ldrb	r3, [r3, #5]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_DAC_Start+0x16>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e040      	b.n	8001dbe <HAL_DAC_Start+0x98>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2201      	movs	r2, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d70:	2b3c      	cmp	r3, #60	; 0x3c
 8001d72:	d11d      	bne.n	8001db0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e014      	b.n	8001db0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	213c      	movs	r1, #60	; 0x3c
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0202 	orr.w	r2, r2, #2
 8001dae:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	3308      	adds	r3, #8
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e004      	b.n	8001dfc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	3314      	adds	r3, #20
 8001dfa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DAC_ConfigChannel+0x18>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e03c      	b.n	8001ea2 <HAL_DAC_ConfigChannel+0x92>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2202      	movs	r2, #2
 8001e32:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	22c0      	movs	r2, #192	; 0xc0
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e059      	b.n	8001f76 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_DMA_Init+0xd4>)
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d80f      	bhi.n	8001eee <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_DMA_Init+0xd8>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <HAL_DMA_Init+0xdc>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	009a      	lsls	r2, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_DMA_Init+0xe0>)
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eec:	e00e      	b.n	8001f0c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_DMA_Init+0xe4>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_DMA_Init+0xdc>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	009a      	lsls	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_DMA_Init+0xe8>)
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40020407 	.word	0x40020407
 8001f84:	bffdfff8 	.word	0xbffdfff8
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	bffdfbf8 	.word	0xbffdfbf8
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d005      	beq.n	8001fba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e0d6      	b.n	8002168 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020e 	bic.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_DMA_Abort_IT+0x1dc>)
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d958      	bls.n	8002098 <HAL_DMA_Abort_IT+0x100>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_DMA_Abort_IT+0x1e0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04f      	beq.n	8002090 <HAL_DMA_Abort_IT+0xf8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	; (800217c <HAL_DMA_Abort_IT+0x1e4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d048      	beq.n	800208c <HAL_DMA_Abort_IT+0xf4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a60      	ldr	r2, [pc, #384]	; (8002180 <HAL_DMA_Abort_IT+0x1e8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_Abort_IT+0xee>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_DMA_Abort_IT+0x1ec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d038      	beq.n	8002080 <HAL_DMA_Abort_IT+0xe8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <HAL_DMA_Abort_IT+0x1f0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d030      	beq.n	800207a <HAL_DMA_Abort_IT+0xe2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_DMA_Abort_IT+0x1f4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d028      	beq.n	8002074 <HAL_DMA_Abort_IT+0xdc>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a53      	ldr	r2, [pc, #332]	; (8002174 <HAL_DMA_Abort_IT+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d020      	beq.n	800206e <HAL_DMA_Abort_IT+0xd6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_DMA_Abort_IT+0x1f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_DMA_Abort_IT+0xd2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_DMA_Abort_IT+0x1fc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d012      	beq.n	8002066 <HAL_DMA_Abort_IT+0xce>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_DMA_Abort_IT+0x200>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00a      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_DMA_Abort_IT+0x204>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <HAL_DMA_Abort_IT+0xc2>
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	e01b      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 800205a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800205e:	e018      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	e015      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002066:	2310      	movs	r3, #16
 8002068:	e013      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 800206a:	2301      	movs	r3, #1
 800206c:	e011      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 800206e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002072:	e00e      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002078:	e00b      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 800207a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207e:	e008      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	e005      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208a:	e002      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 800208c:	2310      	movs	r3, #16
 800208e:	e000      	b.n	8002092 <HAL_DMA_Abort_IT+0xfa>
 8002090:	2301      	movs	r3, #1
 8002092:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_DMA_Abort_IT+0x208>)
 8002094:	6053      	str	r3, [r2, #4]
 8002096:	e057      	b.n	8002148 <HAL_DMA_Abort_IT+0x1b0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <HAL_DMA_Abort_IT+0x1e0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d04f      	beq.n	8002142 <HAL_DMA_Abort_IT+0x1aa>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_DMA_Abort_IT+0x1e4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d048      	beq.n	800213e <HAL_DMA_Abort_IT+0x1a6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_DMA_Abort_IT+0x1e8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d040      	beq.n	8002138 <HAL_DMA_Abort_IT+0x1a0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_DMA_Abort_IT+0x1ec>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d038      	beq.n	8002132 <HAL_DMA_Abort_IT+0x19a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a30      	ldr	r2, [pc, #192]	; (8002188 <HAL_DMA_Abort_IT+0x1f0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d030      	beq.n	800212c <HAL_DMA_Abort_IT+0x194>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2f      	ldr	r2, [pc, #188]	; (800218c <HAL_DMA_Abort_IT+0x1f4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d028      	beq.n	8002126 <HAL_DMA_Abort_IT+0x18e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_DMA_Abort_IT+0x1dc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d020      	beq.n	8002120 <HAL_DMA_Abort_IT+0x188>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <HAL_DMA_Abort_IT+0x1f8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d019      	beq.n	800211c <HAL_DMA_Abort_IT+0x184>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a29      	ldr	r2, [pc, #164]	; (8002194 <HAL_DMA_Abort_IT+0x1fc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d012      	beq.n	8002118 <HAL_DMA_Abort_IT+0x180>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a28      	ldr	r2, [pc, #160]	; (8002198 <HAL_DMA_Abort_IT+0x200>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00a      	beq.n	8002112 <HAL_DMA_Abort_IT+0x17a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <HAL_DMA_Abort_IT+0x204>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d102      	bne.n	800210c <HAL_DMA_Abort_IT+0x174>
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	e01b      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 800210c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002110:	e018      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002116:	e015      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002118:	2310      	movs	r3, #16
 800211a:	e013      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 800211c:	2301      	movs	r3, #1
 800211e:	e011      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002124:	e00e      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002126:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800212a:	e00b      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 800212c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002130:	e008      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	e005      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213c:	e002      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 800213e:	2310      	movs	r3, #16
 8002140:	e000      	b.n	8002144 <HAL_DMA_Abort_IT+0x1ac>
 8002142:	2301      	movs	r3, #1
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_DMA_Abort_IT+0x20c>)
 8002146:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
    } 
  }
  return status;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40020080 	.word	0x40020080
 8002178:	40020008 	.word	0x40020008
 800217c:	4002001c 	.word	0x4002001c
 8002180:	40020030 	.word	0x40020030
 8002184:	40020044 	.word	0x40020044
 8002188:	40020058 	.word	0x40020058
 800218c:	4002006c 	.word	0x4002006c
 8002190:	40020408 	.word	0x40020408
 8002194:	4002041c 	.word	0x4002041c
 8002198:	40020430 	.word	0x40020430
 800219c:	40020444 	.word	0x40020444
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2204      	movs	r2, #4
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80f1 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x20c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80eb 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_DMA_IRQHandler+0x1d8>)
 8002204:	429a      	cmp	r2, r3
 8002206:	d958      	bls.n	80022ba <HAL_DMA_IRQHandler+0x112>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_DMA_IRQHandler+0x1dc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04f      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x10a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5c      	ldr	r2, [pc, #368]	; (8002388 <HAL_DMA_IRQHandler+0x1e0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d048      	beq.n	80022ae <HAL_DMA_IRQHandler+0x106>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5a      	ldr	r2, [pc, #360]	; (800238c <HAL_DMA_IRQHandler+0x1e4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x100>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a59      	ldr	r2, [pc, #356]	; (8002390 <HAL_DMA_IRQHandler+0x1e8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d038      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xfa>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_DMA_IRQHandler+0x1ec>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d030      	beq.n	800229c <HAL_DMA_IRQHandler+0xf4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_DMA_IRQHandler+0x1f0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d028      	beq.n	8002296 <HAL_DMA_IRQHandler+0xee>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_DMA_IRQHandler+0x1d8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d020      	beq.n	8002290 <HAL_DMA_IRQHandler+0xe8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_DMA_IRQHandler+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d019      	beq.n	800228c <HAL_DMA_IRQHandler+0xe4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_DMA_IRQHandler+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d012      	beq.n	8002288 <HAL_DMA_IRQHandler+0xe0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_DMA_IRQHandler+0x1fc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00a      	beq.n	8002282 <HAL_DMA_IRQHandler+0xda>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4d      	ldr	r2, [pc, #308]	; (80023a8 <HAL_DMA_IRQHandler+0x200>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <HAL_DMA_IRQHandler+0xd4>
 8002276:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800227a:	e01b      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 800227c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002280:	e018      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 8002282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002286:	e015      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	e013      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 800228c:	2304      	movs	r3, #4
 800228e:	e011      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 8002290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002294:	e00e      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 8002296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800229a:	e00b      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 800229c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022a0:	e008      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 80022a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a6:	e005      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 80022a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ac:	e002      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_IRQHandler+0x10c>
 80022b2:	2304      	movs	r3, #4
 80022b4:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <HAL_DMA_IRQHandler+0x204>)
 80022b6:	6053      	str	r3, [r2, #4]
 80022b8:	e057      	b.n	800236a <HAL_DMA_IRQHandler+0x1c2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_DMA_IRQHandler+0x1dc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04f      	beq.n	8002364 <HAL_DMA_IRQHandler+0x1bc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <HAL_DMA_IRQHandler+0x1e0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d048      	beq.n	8002360 <HAL_DMA_IRQHandler+0x1b8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2e      	ldr	r2, [pc, #184]	; (800238c <HAL_DMA_IRQHandler+0x1e4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_IRQHandler+0x1b2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_DMA_IRQHandler+0x1e8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d038      	beq.n	8002354 <HAL_DMA_IRQHandler+0x1ac>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_DMA_IRQHandler+0x1ec>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d030      	beq.n	800234e <HAL_DMA_IRQHandler+0x1a6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_DMA_IRQHandler+0x1f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d028      	beq.n	8002348 <HAL_DMA_IRQHandler+0x1a0>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_DMA_IRQHandler+0x1d8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d020      	beq.n	8002342 <HAL_DMA_IRQHandler+0x19a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_DMA_IRQHandler+0x1f4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d019      	beq.n	800233e <HAL_DMA_IRQHandler+0x196>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_DMA_IRQHandler+0x1f8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d012      	beq.n	800233a <HAL_DMA_IRQHandler+0x192>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_DMA_IRQHandler+0x1fc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00a      	beq.n	8002334 <HAL_DMA_IRQHandler+0x18c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_DMA_IRQHandler+0x200>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <HAL_DMA_IRQHandler+0x186>
 8002328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800232c:	e01b      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 800232e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002332:	e018      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002338:	e015      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	e013      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 800233e:	2304      	movs	r3, #4
 8002340:	e011      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002342:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002346:	e00e      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800234c:	e00b      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 800234e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002352:	e008      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002358:	e005      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 800235a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235e:	e002      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x1be>
 8002364:	2304      	movs	r3, #4
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_DMA_IRQHandler+0x208>)
 8002368:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8136 	beq.w	80025e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800237c:	e130      	b.n	80025e0 <HAL_DMA_IRQHandler+0x438>
 800237e:	bf00      	nop
 8002380:	40020080 	.word	0x40020080
 8002384:	40020008 	.word	0x40020008
 8002388:	4002001c 	.word	0x4002001c
 800238c:	40020030 	.word	0x40020030
 8002390:	40020044 	.word	0x40020044
 8002394:	40020058 	.word	0x40020058
 8002398:	4002006c 	.word	0x4002006c
 800239c:	40020408 	.word	0x40020408
 80023a0:	4002041c 	.word	0x4002041c
 80023a4:	40020430 	.word	0x40020430
 80023a8:	40020444 	.word	0x40020444
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2202      	movs	r2, #2
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80dd 	beq.w	8002580 <HAL_DMA_IRQHandler+0x3d8>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80d7 	beq.w	8002580 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 020a 	bic.w	r2, r2, #10
 80023ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_DMA_IRQHandler+0x444>)
 8002400:	429a      	cmp	r2, r3
 8002402:	d958      	bls.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a79      	ldr	r2, [pc, #484]	; (80025f0 <HAL_DMA_IRQHandler+0x448>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d04f      	beq.n	80024ae <HAL_DMA_IRQHandler+0x306>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a78      	ldr	r2, [pc, #480]	; (80025f4 <HAL_DMA_IRQHandler+0x44c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d048      	beq.n	80024aa <HAL_DMA_IRQHandler+0x302>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a76      	ldr	r2, [pc, #472]	; (80025f8 <HAL_DMA_IRQHandler+0x450>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d040      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x2fc>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_DMA_IRQHandler+0x454>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d038      	beq.n	800249e <HAL_DMA_IRQHandler+0x2f6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a73      	ldr	r2, [pc, #460]	; (8002600 <HAL_DMA_IRQHandler+0x458>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d030      	beq.n	8002498 <HAL_DMA_IRQHandler+0x2f0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a72      	ldr	r2, [pc, #456]	; (8002604 <HAL_DMA_IRQHandler+0x45c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d028      	beq.n	8002492 <HAL_DMA_IRQHandler+0x2ea>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a69      	ldr	r2, [pc, #420]	; (80025ec <HAL_DMA_IRQHandler+0x444>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d020      	beq.n	800248c <HAL_DMA_IRQHandler+0x2e4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_DMA_IRQHandler+0x460>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d019      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2e0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6c      	ldr	r2, [pc, #432]	; (800260c <HAL_DMA_IRQHandler+0x464>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d012      	beq.n	8002484 <HAL_DMA_IRQHandler+0x2dc>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_DMA_IRQHandler+0x468>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00a      	beq.n	800247e <HAL_DMA_IRQHandler+0x2d6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a69      	ldr	r2, [pc, #420]	; (8002614 <HAL_DMA_IRQHandler+0x46c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d102      	bne.n	8002478 <HAL_DMA_IRQHandler+0x2d0>
 8002472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002476:	e01b      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 8002478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247c:	e018      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 800247e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002482:	e015      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 8002484:	2320      	movs	r3, #32
 8002486:	e013      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 8002488:	2302      	movs	r3, #2
 800248a:	e011      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 800248c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002490:	e00e      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 8002492:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002496:	e00b      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	e008      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 800249e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a2:	e005      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 80024a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a8:	e002      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 80024aa:	2320      	movs	r3, #32
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_IRQHandler+0x308>
 80024ae:	2302      	movs	r3, #2
 80024b0:	4a59      	ldr	r2, [pc, #356]	; (8002618 <HAL_DMA_IRQHandler+0x470>)
 80024b2:	6053      	str	r3, [r2, #4]
 80024b4:	e057      	b.n	8002566 <HAL_DMA_IRQHandler+0x3be>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_DMA_IRQHandler+0x448>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04f      	beq.n	8002560 <HAL_DMA_IRQHandler+0x3b8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_DMA_IRQHandler+0x44c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d048      	beq.n	800255c <HAL_DMA_IRQHandler+0x3b4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4a      	ldr	r2, [pc, #296]	; (80025f8 <HAL_DMA_IRQHandler+0x450>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d040      	beq.n	8002556 <HAL_DMA_IRQHandler+0x3ae>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a48      	ldr	r2, [pc, #288]	; (80025fc <HAL_DMA_IRQHandler+0x454>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d038      	beq.n	8002550 <HAL_DMA_IRQHandler+0x3a8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a47      	ldr	r2, [pc, #284]	; (8002600 <HAL_DMA_IRQHandler+0x458>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d030      	beq.n	800254a <HAL_DMA_IRQHandler+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_DMA_IRQHandler+0x45c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d028      	beq.n	8002544 <HAL_DMA_IRQHandler+0x39c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <HAL_DMA_IRQHandler+0x444>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d020      	beq.n	800253e <HAL_DMA_IRQHandler+0x396>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a41      	ldr	r2, [pc, #260]	; (8002608 <HAL_DMA_IRQHandler+0x460>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d019      	beq.n	800253a <HAL_DMA_IRQHandler+0x392>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <HAL_DMA_IRQHandler+0x464>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d012      	beq.n	8002536 <HAL_DMA_IRQHandler+0x38e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3e      	ldr	r2, [pc, #248]	; (8002610 <HAL_DMA_IRQHandler+0x468>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x388>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3d      	ldr	r2, [pc, #244]	; (8002614 <HAL_DMA_IRQHandler+0x46c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_DMA_IRQHandler+0x382>
 8002524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002528:	e01b      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 800252a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252e:	e018      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002534:	e015      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002536:	2320      	movs	r3, #32
 8002538:	e013      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 800253a:	2302      	movs	r3, #2
 800253c:	e011      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 800253e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002542:	e00e      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002548:	e00b      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 800254a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254e:	e008      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002554:	e005      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255a:	e002      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 800255c:	2320      	movs	r3, #32
 800255e:	e000      	b.n	8002562 <HAL_DMA_IRQHandler+0x3ba>
 8002560:	2302      	movs	r3, #2
 8002562:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_DMA_IRQHandler+0x474>)
 8002564:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d034      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800257e:	e02f      	b.n	80025e0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2208      	movs	r2, #8
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x43a>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d023      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020e 	bic.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
    }
  }
  return;
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
}
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40020080 	.word	0x40020080
 80025f0:	40020008 	.word	0x40020008
 80025f4:	4002001c 	.word	0x4002001c
 80025f8:	40020030 	.word	0x40020030
 80025fc:	40020044 	.word	0x40020044
 8002600:	40020058 	.word	0x40020058
 8002604:	4002006c 	.word	0x4002006c
 8002608:	40020408 	.word	0x40020408
 800260c:	4002041c 	.word	0x4002041c
 8002610:	40020430 	.word	0x40020430
 8002614:	40020444 	.word	0x40020444
 8002618:	40020400 	.word	0x40020400
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	e179      	b.n	8002928 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002634:	2201      	movs	r2, #1
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8168 	bne.w	8002922 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a96      	ldr	r2, [pc, #600]	; (80028b0 <HAL_GPIO_Init+0x290>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d05e      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800265c:	4a94      	ldr	r2, [pc, #592]	; (80028b0 <HAL_GPIO_Init+0x290>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d875      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002662:	4a94      	ldr	r2, [pc, #592]	; (80028b4 <HAL_GPIO_Init+0x294>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d058      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002668:	4a92      	ldr	r2, [pc, #584]	; (80028b4 <HAL_GPIO_Init+0x294>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d86f      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800266e:	4a92      	ldr	r2, [pc, #584]	; (80028b8 <HAL_GPIO_Init+0x298>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d052      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002674:	4a90      	ldr	r2, [pc, #576]	; (80028b8 <HAL_GPIO_Init+0x298>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d869      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800267a:	4a90      	ldr	r2, [pc, #576]	; (80028bc <HAL_GPIO_Init+0x29c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d04c      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 8002680:	4a8e      	ldr	r2, [pc, #568]	; (80028bc <HAL_GPIO_Init+0x29c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d863      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002686:	4a8e      	ldr	r2, [pc, #568]	; (80028c0 <HAL_GPIO_Init+0x2a0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d046      	beq.n	800271a <HAL_GPIO_Init+0xfa>
 800268c:	4a8c      	ldr	r2, [pc, #560]	; (80028c0 <HAL_GPIO_Init+0x2a0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d85d      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 8002692:	2b12      	cmp	r3, #18
 8002694:	d82a      	bhi.n	80026ec <HAL_GPIO_Init+0xcc>
 8002696:	2b12      	cmp	r3, #18
 8002698:	d859      	bhi.n	800274e <HAL_GPIO_Init+0x12e>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_GPIO_Init+0x80>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	0800271b 	.word	0x0800271b
 80026a4:	080026f5 	.word	0x080026f5
 80026a8:	08002707 	.word	0x08002707
 80026ac:	08002749 	.word	0x08002749
 80026b0:	0800274f 	.word	0x0800274f
 80026b4:	0800274f 	.word	0x0800274f
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	0800274f 	.word	0x0800274f
 80026c0:	0800274f 	.word	0x0800274f
 80026c4:	0800274f 	.word	0x0800274f
 80026c8:	0800274f 	.word	0x0800274f
 80026cc:	0800274f 	.word	0x0800274f
 80026d0:	0800274f 	.word	0x0800274f
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	0800274f 	.word	0x0800274f
 80026dc:	0800274f 	.word	0x0800274f
 80026e0:	0800274f 	.word	0x0800274f
 80026e4:	080026fd 	.word	0x080026fd
 80026e8:	08002711 	.word	0x08002711
 80026ec:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_GPIO_Init+0x2a4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026f2:	e02c      	b.n	800274e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	623b      	str	r3, [r7, #32]
          break;
 80026fa:	e029      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	3304      	adds	r3, #4
 8002702:	623b      	str	r3, [r7, #32]
          break;
 8002704:	e024      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	3308      	adds	r3, #8
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e01f      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	330c      	adds	r3, #12
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e01a      	b.n	8002750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002722:	2304      	movs	r3, #4
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e013      	b.n	8002750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	611a      	str	r2, [r3, #16]
          break;
 800273a:	e009      	b.n	8002750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800273c:	2308      	movs	r3, #8
 800273e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	615a      	str	r2, [r3, #20]
          break;
 8002746:	e003      	b.n	8002750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x130>
          break;
 800274e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d801      	bhi.n	800275a <HAL_GPIO_Init+0x13a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	e001      	b.n	800275e <HAL_GPIO_Init+0x13e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2bff      	cmp	r3, #255	; 0xff
 8002764:	d802      	bhi.n	800276c <HAL_GPIO_Init+0x14c>
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x152>
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3b08      	subs	r3, #8
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	210f      	movs	r1, #15
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80c1 	beq.w	8002922 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_GPIO_Init+0x2a8>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_GPIO_Init+0x2a8>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_GPIO_Init+0x2a8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b8:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_GPIO_Init+0x2ac>)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_GPIO_Init+0x2b0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d01f      	beq.n	8002824 <HAL_GPIO_Init+0x204>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_GPIO_Init+0x2b4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d019      	beq.n	8002820 <HAL_GPIO_Init+0x200>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <HAL_GPIO_Init+0x2b8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_GPIO_Init+0x1fc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a39      	ldr	r2, [pc, #228]	; (80028dc <HAL_GPIO_Init+0x2bc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00d      	beq.n	8002818 <HAL_GPIO_Init+0x1f8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_GPIO_Init+0x2c0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d007      	beq.n	8002814 <HAL_GPIO_Init+0x1f4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_GPIO_Init+0x2c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_GPIO_Init+0x1f0>
 800280c:	2305      	movs	r3, #5
 800280e:	e00a      	b.n	8002826 <HAL_GPIO_Init+0x206>
 8002810:	2306      	movs	r3, #6
 8002812:	e008      	b.n	8002826 <HAL_GPIO_Init+0x206>
 8002814:	2304      	movs	r3, #4
 8002816:	e006      	b.n	8002826 <HAL_GPIO_Init+0x206>
 8002818:	2303      	movs	r3, #3
 800281a:	e004      	b.n	8002826 <HAL_GPIO_Init+0x206>
 800281c:	2302      	movs	r3, #2
 800281e:	e002      	b.n	8002826 <HAL_GPIO_Init+0x206>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_GPIO_Init+0x206>
 8002824:	2300      	movs	r3, #0
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	f002 0203 	and.w	r2, r2, #3
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	4093      	lsls	r3, r2
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002836:	4925      	ldr	r1, [pc, #148]	; (80028cc <HAL_GPIO_Init+0x2ac>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4924      	ldr	r1, [pc, #144]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	43db      	mvns	r3, r3
 8002866:	4920      	ldr	r1, [pc, #128]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002868:	4013      	ands	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	491a      	ldr	r1, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	43db      	mvns	r3, r3
 800288e:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 8002890:	4013      	ands	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d025      	beq.n	80028ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4910      	ldr	r1, [pc, #64]	; (80028e8 <HAL_GPIO_Init+0x2c8>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
 80028ac:	e025      	b.n	80028fa <HAL_GPIO_Init+0x2da>
 80028ae:	bf00      	nop
 80028b0:	10320000 	.word	0x10320000
 80028b4:	10310000 	.word	0x10310000
 80028b8:	10220000 	.word	0x10220000
 80028bc:	10210000 	.word	0x10210000
 80028c0:	10120000 	.word	0x10120000
 80028c4:	10110000 	.word	0x10110000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	40011800 	.word	0x40011800
 80028e4:	40011c00 	.word	0x40011c00
 80028e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_GPIO_Init+0x324>)
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	4913      	ldr	r1, [pc, #76]	; (8002944 <HAL_GPIO_Init+0x324>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x324>)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_GPIO_Init+0x324>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
 8002912:	e006      	b.n	8002922 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_GPIO_Init+0x324>)
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	43db      	mvns	r3, r3
 800291c:	4909      	ldr	r1, [pc, #36]	; (8002944 <HAL_GPIO_Init+0x324>)
 800291e:	4013      	ands	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	3301      	adds	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f ae7e 	bne.w	8002634 <HAL_GPIO_Init+0x14>
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	372c      	adds	r7, #44	; 0x2c
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43d9      	mvns	r1, r3
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	400b      	ands	r3, r1
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e272      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8087 	beq.w	8002ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029cc:	4b92      	ldr	r3, [pc, #584]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d8:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d112      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
 80029e4:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d168      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e24c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x76>
 8002a14:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7a      	ldr	r2, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b78      	ldr	r3, [pc, #480]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a77      	ldr	r2, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0xbc>
 8002a4e:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a71      	ldr	r2, [pc, #452]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a68:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6a      	ldr	r2, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fff0 	bl	8001a6c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe ffec 	bl	8001a6c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e200      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe4>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ffdc 	bl	8001a6c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe ffd8 	bl	8001a6c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1ec      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x10c>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af2:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
 8002afe:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c0      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4939      	ldr	r1, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe ff91 	bl	8001a6c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe ff8d 	bl	8001a6c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4927      	ldr	r1, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe ff70 	bl	8001a6c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe ff6c 	bl	8001a6c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e180      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03a      	beq.n	8002c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7fe ff50 	bl	8001a6c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe ff4c 	bl	8001a6c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e160      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f000 faa6 	bl	8003140 <RCC_Delay>
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fe ff36 	bl	8001a6c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c02:	e00f      	b.n	8002c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe ff32 	bl	8001a6c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d908      	bls.n	8002c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e146      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	42420000 	.word	0x42420000
 8002c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	4b92      	ldr	r3, [pc, #584]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e9      	bne.n	8002c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a6 	beq.w	8002d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4a87      	ldr	r2, [pc, #540]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	61d3      	str	r3, [r2, #28]
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	; (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fef3 	bl	8001a6c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe feef 	bl	8001a6c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e103      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x312>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e02d      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x356>
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a60      	ldr	r2, [pc, #384]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	4b5e      	ldr	r3, [pc, #376]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a5d      	ldr	r2, [pc, #372]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002d02:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fea3 	bl	8001a6c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fe9f 	bl	8001a6c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0b1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x37e>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fe8d 	bl	8001a6c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fe89 	bl	8001a6c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e09b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d061      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d146      	bne.n	8002e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fe5d 	bl	8001a6c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fe59 	bl	8001a6c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e06d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4921      	ldr	r1, [pc, #132]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a19      	ldr	r1, [r3, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	430b      	orrs	r3, r1
 8002e02:	491b      	ldr	r1, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe2d 	bl	8001a6c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fe29 	bl	8001a6c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46a>
 8002e34:	e035      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe16 	bl	8001a6c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fe12 	bl	8001a6c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e026      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x498>
 8002e62:	e01e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e019      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x500>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0d0      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4965      	ldr	r1, [pc, #404]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d040      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e073      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4936      	ldr	r1, [pc, #216]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fd64 	bl	8001a6c <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fd60 	bl	8001a6c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e053      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d210      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4922      	ldr	r1, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1cc>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fcc2 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	0800a0bc 	.word	0x0800a0bc
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b490      	push	{r4, r7}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <HAL_RCC_GetSysClockFreq+0xac>)
 800308c:	1d3c      	adds	r4, r7, #4
 800308e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003094:	f240 2301 	movw	r3, #513	; 0x201
 8003098:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x40>
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x46>
 80030c2:	e02b      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030c6:	623b      	str	r3, [r7, #32]
      break;
 80030c8:	e02b      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3328      	adds	r3, #40	; 0x28
 80030d4:	443b      	add	r3, r7
 80030d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d012      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0c5b      	lsrs	r3, r3, #17
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	3328      	adds	r3, #40	; 0x28
 80030f2:	443b      	add	r3, r7
 80030f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030fe:	fb03 f202 	mul.w	r2, r3, r2
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	e004      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	623b      	str	r3, [r7, #32]
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_GetSysClockFreq+0xb4>)
 800311e:	623b      	str	r3, [r7, #32]
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6a3b      	ldr	r3, [r7, #32]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3728      	adds	r7, #40	; 0x28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc90      	pop	{r4, r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	08009a78 	.word	0x08009a78
 8003134:	40021000 	.word	0x40021000
 8003138:	007a1200 	.word	0x007a1200
 800313c:	003d0900 	.word	0x003d0900

08003140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <RCC_Delay+0x34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <RCC_Delay+0x38>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0a5b      	lsrs	r3, r3, #9
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800315c:	bf00      	nop
  }
  while (Delay --);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	60fa      	str	r2, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <RCC_Delay+0x1c>
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000000 	.word	0x20000000
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fe fa61 	bl	8001668 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f814 	bl	80031dc <HAL_SD_InitCard>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00a      	b.n	80031d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80031f8:	2376      	movs	r3, #118	; 0x76
 80031fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681d      	ldr	r5, [r3, #0]
 8003200:	466c      	mov	r4, sp
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800320a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003214:	4628      	mov	r0, r5
 8003216:	f002 f919 	bl	800544c <SDIO_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e04c      	b.n	80032c6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_SD_InitCard+0xf4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 f94e 	bl	80054d8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_SD_InitCard+0xf4>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 f8f4 	bl	8004430 <SD_PowerON>
 8003248:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e02e      	b.n	80032c6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f001 f813 	bl	8004294 <SD_InitCard>
 800326e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01b      	b.n	80032c6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003296:	4618      	mov	r0, r3
 8003298:	f002 f9ac 	bl	80055f4 <SDMMC_CmdBlockLength>
 800329c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00f      	beq.n	80032c4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_SD_InitCard+0xf8>)
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	423000a0 	.word	0x423000a0
 80032d4:	004005ff 	.word	0x004005ff

080032d8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b092      	sub	sp, #72	; 0x48
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80032e6:	f7fe fbc1 	bl	8001a6c <HAL_GetTick>
 80032ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1bd      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 81b0 	bne.w	8003678 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800331e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	429a      	cmp	r2, r3
 800332a:	d907      	bls.n	800333c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e1a4      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2200      	movs	r2, #0
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	2b01      	cmp	r3, #1
 8003352:	d002      	beq.n	800335a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	025b      	lsls	r3, r3, #9
 8003364:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003366:	2390      	movs	r3, #144	; 0x90
 8003368:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800336a:	2302      	movs	r3, #2
 800336c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003372:	2301      	movs	r3, #1
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f107 0214 	add.w	r2, r7, #20
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f002 f90c 	bl	800559e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d90a      	bls.n	80033a2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2202      	movs	r2, #2
 8003390:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003398:	4618      	mov	r0, r3
 800339a:	f002 f96f 	bl	800567c <SDMMC_CmdReadMultiBlock>
 800339e:	6478      	str	r0, [r7, #68]	; 0x44
 80033a0:	e009      	b.n	80033b6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 f942 	bl	8005638 <SDMMC_CmdReadSingleBlock>
 80033b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80033b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e151      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033e6:	e061      	b.n	80034ac <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03c      	beq.n	8003470 <HAL_SD_ReadBlocks+0x198>
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d039      	beq.n	8003470 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003400:	e033      	b.n	800346a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 f84a 	bl	80054a0 <SDIO_ReadFIFO>
 800340c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	b2da      	uxtb	r2, r3
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	3301      	adds	r3, #1
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	3b01      	subs	r3, #1
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	b2da      	uxtb	r2, r3
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342e:	3301      	adds	r3, #1
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	3b01      	subs	r3, #1
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2da      	uxtb	r2, r3
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	3301      	adds	r3, #1
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	3b01      	subs	r3, #1
 800344c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	0e1b      	lsrs	r3, r3, #24
 8003452:	b2da      	uxtb	r2, r3
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	3301      	adds	r3, #1
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	3b01      	subs	r3, #1
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	3301      	adds	r3, #1
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	2b07      	cmp	r3, #7
 800346e:	d9c8      	bls.n	8003402 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003470:	f7fe fafc 	bl	8001a6c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <HAL_SD_ReadBlocks+0x1ae>
 8003480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d112      	bne.n	80034ac <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a48      	ldr	r2, [pc, #288]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0ec      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	f240 332a 	movw	r3, #810	; 0x32a
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d095      	beq.n	80033e8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d022      	beq.n	8003510 <HAL_SD_ReadBlocks+0x238>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d91f      	bls.n	8003510 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d01b      	beq.n	8003510 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 f933 	bl	8005748 <SDMMC_CmdStopTransfer>
 80034e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80034e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0ba      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	f043 0208 	orr.w	r2, r3, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0a0      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a15      	ldr	r2, [pc, #84]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e086      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_SD_ReadBlocks+0x2d4>)
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e06c      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
 80035ac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 ff73 	bl	80054a0 <SDIO_ReadFIFO>
 80035ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	3301      	adds	r3, #1
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	3b01      	subs	r3, #1
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035dc:	3301      	adds	r3, #1
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e2:	3b01      	subs	r3, #1
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	3301      	adds	r3, #1
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	3b01      	subs	r3, #1
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	0e1b      	lsrs	r3, r3, #24
 8003600:	b2da      	uxtb	r2, r3
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	3301      	adds	r3, #1
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	3b01      	subs	r3, #1
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003612:	f7fe fa2b 	bl	8001a6c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800361e:	429a      	cmp	r2, r3
 8003620:	d902      	bls.n	8003628 <HAL_SD_ReadBlocks+0x350>
 8003622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d112      	bne.n	800364e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_SD_ReadBlocks+0x3b8>)
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e01b      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_SD_ReadBlocks+0x38a>
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1a6      	bne.n	80035b0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f240 523a 	movw	r2, #1338	; 0x53a
 800366a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e006      	b.n	8003686 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3748      	adds	r7, #72	; 0x48
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	004005ff 	.word	0x004005ff

08003694 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b092      	sub	sp, #72	; 0x48
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80036a2:	f7fe f9e3 	bl	8001a6c <HAL_GetTick>
 80036a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e166      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	f040 8159 	bne.w	8003986 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d907      	bls.n	80036f8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e14d      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	2b01      	cmp	r3, #1
 800370e:	d002      	beq.n	8003716 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	025b      	lsls	r3, r3, #9
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	025b      	lsls	r3, r3, #9
 8003720:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003722:	2390      	movs	r3, #144	; 0x90
 8003724:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800372a:	2300      	movs	r3, #0
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800372e:	2301      	movs	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f107 0218 	add.w	r2, r7, #24
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 ff2e 	bl	800559e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d90a      	bls.n	800375e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f001 ffd5 	bl	8005704 <SDMMC_CmdWriteMultiBlock>
 800375a:	6478      	str	r0, [r7, #68]	; 0x44
 800375c:	e009      	b.n	8003772 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2210      	movs	r2, #16
 8003762:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800376a:	4618      	mov	r0, r3
 800376c:	f001 ffa8 	bl	80056c0 <SDMMC_CmdWriteSingleBlock>
 8003770:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a87      	ldr	r2, [pc, #540]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0fa      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80037a2:	e065      	b.n	8003870 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_SD_WriteBlocks+0x1a0>
 80037b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d03d      	beq.n	8003834 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
 80037bc:	e037      	b.n	800382e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	3301      	adds	r3, #1
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037cc:	3b01      	subs	r3, #1
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	3301      	adds	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	3b01      	subs	r3, #1
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	041a      	lsls	r2, r3, #16
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	3301      	adds	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	3b01      	subs	r3, #1
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	061a      	lsls	r2, r3, #24
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	3301      	adds	r3, #1
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	3b01      	subs	r3, #1
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f107 0214 	add.w	r2, r7, #20
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fe48 	bl	80054b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382a:	3301      	adds	r3, #1
 800382c:	643b      	str	r3, [r7, #64]	; 0x40
 800382e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003830:	2b07      	cmp	r3, #7
 8003832:	d9c4      	bls.n	80037be <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003834:	f7fe f91a 	bl	8001a6c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003840:	429a      	cmp	r2, r3
 8003842:	d902      	bls.n	800384a <HAL_SD_WriteBlocks+0x1b6>
 8003844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d112      	bne.n	8003870 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a53      	ldr	r2, [pc, #332]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e091      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	f240 331a 	movw	r3, #794	; 0x31a
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d091      	beq.n	80037a4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d022      	beq.n	80038d4 <HAL_SD_WriteBlocks+0x240>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d91f      	bls.n	80038d4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	2b03      	cmp	r3, #3
 800389a:	d01b      	beq.n	80038d4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 ff51 	bl	8005748 <SDMMC_CmdStopTransfer>
 80038a6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e05f      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2d      	ldr	r2, [pc, #180]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f043 0208 	orr.w	r2, r3, #8
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e045      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	f043 0202 	orr.w	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02b      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_SD_WriteBlocks+0x308>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e011      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f240 523a 	movw	r2, #1338	; 0x53a
 8003978:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e006      	b.n	8003994 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3748      	adds	r7, #72	; 0x48
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	004005ff 	.word	0x004005ff

080039a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_SD_IRQHandler+0x2e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 ff51 	bl	800486e <SD_Read_IT>
 80039cc:	e157      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808f 	beq.w	8003afc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80039f6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80039fa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d039      	beq.n	8003a8a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_SD_IRQHandler+0x8a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d011      	beq.n	8003a4e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fe8a 	bl	8005748 <SDMMC_CmdStopTransfer>
 8003a34:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f921 	bl	8003c90 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_SD_IRQHandler+0xda>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f002 fafc 	bl	8006078 <HAL_SD_RxCpltCallback>
 8003a80:	e0fd      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f002 faee 	bl	8006064 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a88:	e0f9      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80f4 	beq.w	8003c7e <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d011      	beq.n	8003ac4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fe4f 	bl	8005748 <SDMMC_CmdStopTransfer>
 8003aaa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8e6 	bl	8003c90 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 80d7 	bne.w	8003c7e <HAL_SD_IRQHandler+0x2de>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 80d1 	bne.w	8003c7e <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0208 	bic.w	r2, r2, #8
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f002 fab5 	bl	8006064 <HAL_SD_TxCpltCallback>
}
 8003afa:	e0c0      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_SD_IRQHandler+0x17c>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fefb 	bl	8004910 <SD_Write_IT>
 8003b1a:	e0b0      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b22:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a9 	beq.w	8003c7e <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	f043 0208 	orr.w	r2, r3, #8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	f043 0210 	orr.w	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f240 723a 	movw	r2, #1850	; 0x73a
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fdc6 	bl	8005748 <SDMMC_CmdStopTransfer>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f855 	bl	8003c90 <HAL_SD_ErrorCallback>
}
 8003be6:	e04a      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d045      	beq.n	8003c7e <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_SD_IRQHandler+0x266>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d011      	beq.n	8003c2a <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_SD_IRQHandler+0x2e8>)
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f9c0 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02f      	beq.n	8003c7e <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fac8 	bl	80041b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c28:	e029      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_SD_IRQHandler+0x29e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_SD_IRQHandler+0x2ec>)
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe f9a4 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d013      	beq.n	8003c7e <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fae3 	bl	8004226 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c60:	e00d      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f002 f9ea 	bl	8006050 <HAL_SD_AbortCallback>
}
 8003c7c:	e7ff      	b.n	8003c7e <HAL_SD_IRQHandler+0x2de>
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	080041b9 	.word	0x080041b9
 8003c8c:	08004227 	.word	0x08004227

08003c90 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb2:	0f9b      	lsrs	r3, r3, #30
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d04:	0d1b      	lsrs	r3, r3, #20
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	0bdb      	lsrs	r3, r3, #15
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d34:	0b9b      	lsrs	r3, r3, #14
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d58:	0b1b      	lsrs	r3, r3, #12
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d163      	bne.n	8003e3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	009a      	lsls	r2, r3, #2
 8003d7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d7e:	4013      	ands	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d84:	0f92      	lsrs	r2, r2, #30
 8003d86:	431a      	orrs	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d90:	0edb      	lsrs	r3, r3, #27
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	0e1b      	lsrs	r3, r3, #24
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db4:	0d5b      	lsrs	r3, r3, #21
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd8:	0bdb      	lsrs	r3, r3, #15
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	7e1b      	ldrb	r3, [r3, #24]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	7a1b      	ldrb	r3, [r3, #8]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2201      	movs	r2, #1
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e28:	0a52      	lsrs	r2, r2, #9
 8003e2a:	fb03 f202 	mul.w	r2, r3, r2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
 8003e3a:	e031      	b.n	8003ea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d11d      	bne.n	8003e80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	431a      	orrs	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	029a      	lsls	r2, r3, #10
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
 8003e7e:	e00f      	b.n	8003ea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_SD_GetCardCSD+0x344>)
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09d      	b.n	8003fdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea4:	0b9b      	lsrs	r3, r3, #14
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	09db      	lsrs	r3, r3, #7
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	0fdb      	lsrs	r3, r3, #31
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	0f5b      	lsrs	r3, r3, #29
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	0e9b      	lsrs	r3, r3, #26
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	0d9b      	lsrs	r3, r3, #22
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	0d5b      	lsrs	r3, r3, #21
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	0bdb      	lsrs	r3, r3, #15
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	0b9b      	lsrs	r3, r3, #14
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	0b5b      	lsrs	r3, r3, #13
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	0b1b      	lsrs	r3, r3, #12
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	004005ff 	.word	0x004005ff

08003fec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
	...

08004044 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	b08e      	sub	sp, #56	; 0x38
 8004048:	af04      	add	r7, sp, #16
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2203      	movs	r2, #3
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	2b03      	cmp	r3, #3
 8004062:	d02e      	beq.n	80040c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d106      	bne.n	800407a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
 8004078:	e029      	b.n	80040ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004080:	d10a      	bne.n	8004098 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fa8a 	bl	800459c <SD_WideBus_Enable>
 8004088:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
 8004096:	e01a      	b.n	80040ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fac7 	bl	8004632 <SD_WideBus_Disable>
 80040a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
 80040b2:	e00c      	b.n	80040ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
 80040c0:	e005      	b.n	80040ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040ec:	e01f      	b.n	800412e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681d      	ldr	r5, [r3, #0]
 8004114:	466c      	mov	r4, sp
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800411e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004128:	4628      	mov	r0, r5
 800412a:	f001 f98f 	bl	800544c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fa5c 	bl	80055f4 <SDMMC_CmdBlockLength>
 800413c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_SD_ConfigWideBusOperation+0x130>)
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800416a:	4618      	mov	r0, r3
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bdb0      	pop	{r4, r5, r7, pc}
 8004172:	bf00      	nop
 8004174:	004005ff 	.word	0x004005ff

08004178 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9de 	bl	800454c <SD_SendStatus>
 8004190:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0a5b      	lsrs	r3, r3, #9
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80041ae:	693b      	ldr	r3, [r7, #16]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ffd1 	bl	8004178 <HAL_SD_GetCardState>
 80041d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b06      	cmp	r3, #6
 80041ea:	d002      	beq.n	80041f2 <SD_DMATxAbort+0x3a>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d10a      	bne.n	8004208 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 faa6 	bl	8005748 <SDMMC_CmdStopTransfer>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	431a      	orrs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f001 ff1d 	bl	8006050 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004216:	e002      	b.n	800421e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff fd39 	bl	8003c90 <HAL_SD_ErrorCallback>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f240 523a 	movw	r2, #1338	; 0x53a
 800423c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff9a 	bl	8004178 <HAL_SD_GetCardState>
 8004244:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d002      	beq.n	8004260 <SD_DMARxAbort+0x3a>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10a      	bne.n	8004276 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fa6f 	bl	8005748 <SDMMC_CmdStopTransfer>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f001 fee6 	bl	8006050 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004284:	e002      	b.n	800428c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd02 	bl	8003c90 <HAL_SD_ErrorCallback>
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b094      	sub	sp, #80	; 0x50
 8004298:	af04      	add	r7, sp, #16
 800429a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 f926 	bl	80054f6 <SDIO_GetPowerState>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042b4:	e0b8      	b.n	8004428 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d02f      	beq.n	800431e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 fb4a 	bl	800595c <SDMMC_CmdSendCID>
 80042c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	e0a9      	b.n	8004428 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f94d 	bl	800557a <SDIO_GetResponse>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2104      	movs	r1, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f944 	bl	800557a <SDIO_GetResponse>
 80042f2:	4602      	mov	r2, r0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2108      	movs	r1, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 f93b 	bl	800557a <SDIO_GetResponse>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	210c      	movs	r1, #12
 8004310:	4618      	mov	r0, r3
 8004312:	f001 f932 	bl	800557a <SDIO_GetResponse>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	2b03      	cmp	r3, #3
 8004324:	d00d      	beq.n	8004342 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f107 020e 	add.w	r2, r7, #14
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fb50 	bl	80059d6 <SDMMC_CmdSetRelAdd>
 8004336:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SD_InitCard+0xae>
    {
      return errorstate;
 800433e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004340:	e072      	b.n	8004428 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	2b03      	cmp	r3, #3
 8004348:	d036      	beq.n	80043b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800434a:	89fb      	ldrh	r3, [r7, #14]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f001 fb1a 	bl	8005998 <SDMMC_CmdSendCSD>
 8004364:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <SD_InitCard+0xdc>
    {
      return errorstate;
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	e05b      	b.n	8004428 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f8ff 	bl	800557a <SDIO_GetResponse>
 800437c:	4602      	mov	r2, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2104      	movs	r1, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f8f6 	bl	800557a <SDIO_GetResponse>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2108      	movs	r1, #8
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f8ed 	bl	800557a <SDIO_GetResponse>
 80043a0:	4602      	mov	r2, r0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	210c      	movs	r1, #12
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 f8e4 	bl	800557a <SDIO_GetResponse>
 80043b2:	4602      	mov	r2, r0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2104      	movs	r1, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f8db 	bl	800557a <SDIO_GetResponse>
 80043c4:	4603      	mov	r3, r0
 80043c6:	0d1a      	lsrs	r2, r3, #20
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fc66 	bl	8003ca4 <HAL_SD_GetCardCSD>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043e2:	e021      	b.n	8004428 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	2200      	movs	r2, #0
 80043f0:	461c      	mov	r4, r3
 80043f2:	4615      	mov	r5, r2
 80043f4:	4622      	mov	r2, r4
 80043f6:	462b      	mov	r3, r5
 80043f8:	4608      	mov	r0, r1
 80043fa:	f001 f9c7 	bl	800578c <SDMMC_CmdSelDesel>
 80043fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SD_InitCard+0x176>
  {
    return errorstate;
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	e00e      	b.n	8004428 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681d      	ldr	r5, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	466c      	mov	r4, sp
 8004412:	f103 0210 	add.w	r2, r3, #16
 8004416:	ca07      	ldmia	r2, {r0, r1, r2}
 8004418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800441c:	3304      	adds	r3, #4
 800441e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004420:	4628      	mov	r0, r5
 8004422:	f001 f813 	bl	800544c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3740      	adds	r7, #64	; 0x40
 800442c:	46bd      	mov	sp, r7
 800442e:	bdb0      	pop	{r4, r5, r7, pc}

08004430 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f9c2 	bl	80057d2 <SDMMC_CmdGoIdleState>
 800444e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	e072      	b.n	8004540 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f9d5 	bl	800580e <SDMMC_CmdOperCond>
 8004464:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00d      	beq.n	8004488 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f9ab 	bl	80057d2 <SDMMC_CmdGoIdleState>
 800447c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	e05b      	b.n	8004540 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004492:	2b01      	cmp	r3, #1
 8004494:	d137      	bne.n	8004506 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f9d5 	bl	800584c <SDMMC_CmdAppCommand>
 80044a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02d      	beq.n	8004506 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044ae:	e047      	b.n	8004540 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 f9c8 	bl	800584c <SDMMC_CmdAppCommand>
 80044bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	e03b      	b.n	8004540 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	491e      	ldr	r1, [pc, #120]	; (8004548 <SD_PowerON+0x118>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f9de 	bl	8005890 <SDMMC_CmdAppOperCommand>
 80044d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044e0:	e02e      	b.n	8004540 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 f846 	bl	800557a <SDIO_GetResponse>
 80044ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	0fdb      	lsrs	r3, r3, #31
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <SD_PowerON+0xcc>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <SD_PowerON+0xce>
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]

    count++;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800450c:	4293      	cmp	r3, r2
 800450e:	d802      	bhi.n	8004516 <SD_PowerON+0xe6>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0cc      	beq.n	80044b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800451c:	4293      	cmp	r3, r2
 800451e:	d902      	bls.n	8004526 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004524:	e00c      	b.n	8004540 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
 8004536:	e002      	b.n	800453e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	c1100000 	.word	0xc1100000

0800454c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800455c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004560:	e018      	b.n	8004594 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f001 fa52 	bl	8005a18 <SDMMC_CmdSendStatus>
 8004574:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <SD_SendStatus+0x34>
  {
    return errorstate;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e009      	b.n	8004594 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fff7 	bl	800557a <SDIO_GetResponse>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ffe1 	bl	800557a <SDIO_GetResponse>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045c2:	d102      	bne.n	80045ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045c8:	e02f      	b.n	800462a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f879 	bl	80046c8 <SD_FindSCR>
 80045d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	e023      	b.n	800462a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01c      	beq.n	8004626 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f001 f927 	bl	800584c <SDMMC_CmdAppCommand>
 80045fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e00f      	b.n	800462a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2102      	movs	r1, #2
 8004610:	4618      	mov	r0, r3
 8004612:	f001 f960 	bl	80058d6 <SDMMC_CmdBusWidth>
 8004616:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	e003      	b.n	800462a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004622:	2300      	movs	r3, #0
 8004624:	e001      	b.n	800462a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004626:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 ff96 	bl	800557a <SDIO_GetResponse>
 800464e:	4603      	mov	r3, r0
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004658:	d102      	bne.n	8004660 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800465a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800465e:	e02f      	b.n	80046c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f82e 	bl	80046c8 <SD_FindSCR>
 800466c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	e023      	b.n	80046c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01c      	beq.n	80046bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f001 f8dc 	bl	800584c <SDMMC_CmdAppCommand>
 8004694:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e00f      	b.n	80046c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f915 	bl	80058d6 <SDMMC_CmdBusWidth>
 80046ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e003      	b.n	80046c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e001      	b.n	80046c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b08f      	sub	sp, #60	; 0x3c
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80046d2:	f7fd f9cb 	bl	8001a6c <HAL_GetTick>
 80046d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2108      	movs	r1, #8
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 ff80 	bl	80055f4 <SDMMC_CmdBlockLength>
 80046f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <SD_FindSCR+0x38>
  {
    return errorstate;
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	e0b2      	b.n	8004866 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f001 f89d 	bl	800584c <SDMMC_CmdAppCommand>
 8004712:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <SD_FindSCR+0x56>
  {
    return errorstate;
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	e0a3      	b.n	8004866 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004724:	2308      	movs	r3, #8
 8004726:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004728:	2330      	movs	r3, #48	; 0x30
 800472a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800472c:	2302      	movs	r3, #2
 800472e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004730:	2300      	movs	r3, #0
 8004732:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004734:	2301      	movs	r3, #1
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f107 0210 	add.w	r2, r7, #16
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 ff2b 	bl	800559e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f001 f8e4 	bl	800591a <SDMMC_CmdSendSCR>
 8004752:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02a      	beq.n	80047b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	e083      	b.n	8004866 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	f107 0208 	add.w	r2, r7, #8
 8004778:	18d4      	adds	r4, r2, r3
 800477a:	4608      	mov	r0, r1
 800477c:	f000 fe90 	bl	80054a0 <SDIO_ReadFIFO>
 8004780:	4603      	mov	r3, r0
 8004782:	6023      	str	r3, [r4, #0]
      index++;
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	3301      	adds	r3, #1
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
 800478a:	e006      	b.n	800479a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800479a:	f7fd f967 	bl	8001a6c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d102      	bne.n	80047b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80047aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047ae:	e05a      	b.n	8004866 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0cf      	beq.n	800475e <SD_FindSCR+0x96>
 80047be:	e000      	b.n	80047c2 <SD_FindSCR+0xfa>
      break;
 80047c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2208      	movs	r2, #8
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80047d8:	2308      	movs	r3, #8
 80047da:	e044      	b.n	8004866 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2202      	movs	r2, #2
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80047f2:	2302      	movs	r3, #2
 80047f4:	e037      	b.n	8004866 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2220      	movs	r2, #32
 800480a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800480c:	2320      	movs	r3, #32
 800480e:	e02a      	b.n	8004866 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f240 523a 	movw	r2, #1338	; 0x53a
 8004818:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	061a      	lsls	r2, r3, #24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004826:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004830:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	601a      	str	r2, [r3, #0]
    scr++;
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	3304      	adds	r3, #4
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	061a      	lsls	r2, r3, #24
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800484e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004858:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0e1b      	lsrs	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	373c      	adds	r7, #60	; 0x3c
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}

0800486e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03f      	beq.n	8004908 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e033      	b.n	80048f6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fe04 	bl	80054a0 <SDIO_ReadFIFO>
 8004898:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3301      	adds	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3301      	adds	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b07      	cmp	r3, #7
 80048fa:	d9c8      	bls.n	800488e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d043      	beq.n	80049b2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e037      	b.n	80049a0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3b01      	subs	r3, #1
 8004940:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	021a      	lsls	r2, r3, #8
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3b01      	subs	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	041a      	lsls	r2, r3, #16
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3b01      	subs	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	061a      	lsls	r2, r3, #24
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3b01      	subs	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd8f 	bl	80054b8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d9c4      	bls.n	8004930 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_SRAM_Init+0x1c>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d4:	d101      	bne.n	80049da <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e038      	b.n	8004a4c <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7fc ff20 	bl	8001834 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3308      	adds	r3, #8
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f000 fc4e 	bl	80052a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	f000 fcb0 	bl	8005374 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6858      	ldr	r0, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	f000 fcdb 	bl	80053dc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	f041 0101 	orr.w	r1, r1, #1
 8004a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e041      	b.n	8004aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc fe56 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f000 fa76 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e03c      	b.n	8004b86 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_TIM_Base_Start+0x9c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_TIM_Base_Start+0x5c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIM_Base_Start+0xa0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_TIM_Base_Start+0x5c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_Base_Start+0x5c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIM_Base_Start+0xa4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_Base_Start+0x5c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <HAL_TIM_Base_Start+0xa8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIM_Base_Start+0x5c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_TIM_Base_Start+0xac>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d111      	bne.n	8004b74 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d010      	beq.n	8004b84 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0202 	mvn.w	r2, #2
 8004bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9b1 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9a4 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f9b3 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f987 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f97a 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f989 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0208 	mvn.w	r2, #8
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f95d 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f950 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f95f 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f933 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f926 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f935 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0201 	mvn.w	r2, #1
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fbd2 	bl	80014cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa9d 	bl	800528e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8f9 	bl	8004f72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0220 	mvn.w	r2, #32
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa68 	bl	800527c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_ConfigClockSource+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0b3      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x180>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d03e      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0xd0>
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	f200 8087 	bhi.w	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	f000 8085 	beq.w	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d87f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d01a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xa2>
 8004e20:	2b70      	cmp	r3, #112	; 0x70
 8004e22:	d87b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d050      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x116>
 8004e28:	2b60      	cmp	r3, #96	; 0x60
 8004e2a:	d877      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e2c:	2b50      	cmp	r3, #80	; 0x50
 8004e2e:	d03c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xf6>
 8004e30:	2b50      	cmp	r3, #80	; 0x50
 8004e32:	d873      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d058      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x136>
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d86f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d064      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x156>
 8004e40:	2b30      	cmp	r3, #48	; 0x30
 8004e42:	d86b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d060      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x156>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d867      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x156>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d05a      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e54:	e062      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6899      	ldr	r1, [r3, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f000 f97e 	bl	8005166 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	609a      	str	r2, [r3, #8]
      break;
 8004e82:	e04e      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f000 f967 	bl	8005166 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea6:	609a      	str	r2, [r3, #8]
      break;
 8004ea8:	e03b      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 f8de 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2150      	movs	r1, #80	; 0x50
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f935 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e02b      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 f8fc 	bl	80050d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2160      	movs	r1, #96	; 0x60
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f925 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e01b      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 f8be 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2140      	movs	r1, #64	; 0x40
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f915 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e00b      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 f90c 	bl	8005132 <TIM_ITRx_SetConfig>
        break;
 8004f1a:	e002      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a33      	ldr	r2, [pc, #204]	; (8005064 <TIM_Base_SetConfig+0xe0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a32      	ldr	r2, [pc, #200]	; (8005068 <TIM_Base_SetConfig+0xe4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a2f      	ldr	r2, [pc, #188]	; (800506c <TIM_Base_SetConfig+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	; (8005070 <TIM_Base_SetConfig+0xec>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a2d      	ldr	r2, [pc, #180]	; (8005074 <TIM_Base_SetConfig+0xf0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a22      	ldr	r2, [pc, #136]	; (8005064 <TIM_Base_SetConfig+0xe0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a21      	ldr	r2, [pc, #132]	; (8005068 <TIM_Base_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0x82>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <TIM_Base_SetConfig+0xe8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x82>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <TIM_Base_SetConfig+0xec>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <TIM_Base_SetConfig+0xf0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <TIM_Base_SetConfig+0xe0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xc8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a08      	ldr	r2, [pc, #32]	; (8005068 <TIM_Base_SetConfig+0xe4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00

08005078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0201 	bic.w	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 030a 	bic.w	r3, r3, #10
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 0210 	bic.w	r2, r3, #16
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	031b      	lsls	r3, r3, #12
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	f043 0307 	orr.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	431a      	orrs	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e050      	b.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d018      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d00e      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a12      	ldr	r2, [pc, #72]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10c      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00

0800527c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	f023 0101 	bic.w	r1, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d102      	bne.n	80052d0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e001      	b.n	80052d4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80052e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80052e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80052ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80052f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80052f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80052fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005304:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800530a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005310:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <FSMC_NORSRAM_Init+0xd0>)
 8005330:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005338:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005340:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	43db      	mvns	r3, r3
 8005350:	ea02 0103 	and.w	r1, r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4319      	orrs	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	0008fb7f 	.word	0x0008fb7f

08005374 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	431a      	orrs	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	051b      	lsls	r3, r3, #20
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	3b02      	subs	r3, #2
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	431a      	orrs	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	3201      	adds	r2, #1
 80053c8:	4319      	orrs	r1, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f0:	d11d      	bne.n	800542e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	6811      	ldr	r1, [r2, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	6852      	ldr	r2, [r2, #4]
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	4311      	orrs	r1, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	6892      	ldr	r2, [r2, #8]
 800540e:	0212      	lsls	r2, r2, #8
 8005410:	4311      	orrs	r1, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	6992      	ldr	r2, [r2, #24]
 8005416:	4311      	orrs	r1, r2
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	68d2      	ldr	r2, [r2, #12]
 800541c:	0412      	lsls	r2, r2, #16
 800541e:	430a      	orrs	r2, r1
 8005420:	ea43 0102 	orr.w	r1, r3, r2
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800542c:	e005      	b.n	800543a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	cff00000 	.word	0xcff00000

0800544c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800544c:	b084      	sub	sp, #16
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	f107 001c 	add.w	r0, r7, #28
 800545a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005462:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005464:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005466:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800546a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800546e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005472:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005476:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005486:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	b004      	add	sp, #16
 800549e:	4770      	bx	lr

080054a0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2203      	movs	r2, #3
 80054e4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80054e6:	2002      	movs	r0, #2
 80054e8:	f7fc faca 	bl	8001a80 <HAL_Delay>
  
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0303 	and.w	r3, r3, #3
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800552e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005534:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800553a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800554a:	f023 030f 	bic.w	r3, r3, #15
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	b2db      	uxtb	r3, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3314      	adds	r3, #20
 8005588:	461a      	mov	r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4413      	add	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
}  
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80055ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80055d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0

}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005602:	2310      	movs	r3, #16
 8005604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800560e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005614:	f107 0308 	add.w	r3, r7, #8
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff78 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005620:	f241 3288 	movw	r2, #5000	; 0x1388
 8005624:	2110      	movs	r1, #16
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa42 	bl	8005ab0 <SDMMC_GetCmdResp1>
 800562c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800562e:	69fb      	ldr	r3, [r7, #28]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005646:	2311      	movs	r3, #17
 8005648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800564a:	2340      	movs	r3, #64	; 0x40
 800564c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ff56 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	2111      	movs	r1, #17
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa20 	bl	8005ab0 <SDMMC_GetCmdResp1>
 8005670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005672:	69fb      	ldr	r3, [r7, #28]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800568a:	2312      	movs	r3, #18
 800568c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800568e:	2340      	movs	r3, #64	; 0x40
 8005690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800569a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff34 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	2112      	movs	r1, #18
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9fe 	bl	8005ab0 <SDMMC_GetCmdResp1>
 80056b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056b6:	69fb      	ldr	r3, [r7, #28]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80056ce:	2318      	movs	r3, #24
 80056d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e0:	f107 0308 	add.w	r3, r7, #8
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff12 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	2118      	movs	r1, #24
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9dc 	bl	8005ab0 <SDMMC_GetCmdResp1>
 80056f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005712:	2319      	movs	r3, #25
 8005714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800571e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fef0 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	2119      	movs	r1, #25
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f9ba 	bl	8005ab0 <SDMMC_GetCmdResp1>
 800573c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573e:	69fb      	ldr	r3, [r7, #28]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005754:	230c      	movs	r3, #12
 8005756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fecf 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005772:	4a05      	ldr	r2, [pc, #20]	; (8005788 <SDMMC_CmdStopTransfer+0x40>)
 8005774:	210c      	movs	r1, #12
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f99a 	bl	8005ab0 <SDMMC_GetCmdResp1>
 800577c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577e:	69fb      	ldr	r3, [r7, #28]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	05f5e100 	.word	0x05f5e100

0800578c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800579c:	2307      	movs	r3, #7
 800579e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff feab 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	2107      	movs	r1, #7
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f975 	bl	8005ab0 <SDMMC_GetCmdResp1>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3728      	adds	r7, #40	; 0x28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fe8a 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f92d 	bl	8005a5c <SDMMC_GetCmdError>
 8005802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005804:	69fb      	ldr	r3, [r7, #28]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b088      	sub	sp, #32
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005816:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800581a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800581c:	2308      	movs	r3, #8
 800581e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005820:	2340      	movs	r3, #64	; 0x40
 8005822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800582c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fe6b 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fb20 	bl	8005e80 <SDMMC_GetCmdResp7>
 8005840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005842:	69fb      	ldr	r3, [r7, #28]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800585a:	2337      	movs	r3, #55	; 0x37
 800585c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800585e:	2340      	movs	r3, #64	; 0x40
 8005860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800586c:	f107 0308 	add.w	r3, r7, #8
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fe4c 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	2137      	movs	r1, #55	; 0x37
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f916 	bl	8005ab0 <SDMMC_GetCmdResp1>
 8005884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80058a6:	2329      	movs	r3, #41	; 0x29
 80058a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b8:	f107 0308 	add.w	r3, r7, #8
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fe26 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fa29 	bl	8005d1c <SDMMC_GetCmdResp3>
 80058ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058cc:	69fb      	ldr	r3, [r7, #28]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b088      	sub	sp, #32
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80058e4:	2306      	movs	r3, #6
 80058e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fe07 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	2106      	movs	r1, #6
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8d1 	bl	8005ab0 <SDMMC_GetCmdResp1>
 800590e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005910:	69fb      	ldr	r3, [r7, #28]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b088      	sub	sp, #32
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005926:	2333      	movs	r3, #51	; 0x33
 8005928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fde6 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	2133      	movs	r1, #51	; 0x33
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8b0 	bl	8005ab0 <SDMMC_GetCmdResp1>
 8005950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005968:	2302      	movs	r3, #2
 800596a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800596c:	23c0      	movs	r3, #192	; 0xc0
 800596e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005978:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fdc5 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f980 	bl	8005c8c <SDMMC_GetCmdResp2>
 800598c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80059a6:	2309      	movs	r3, #9
 80059a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80059aa:	23c0      	movs	r3, #192	; 0xc0
 80059ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059b8:	f107 0308 	add.w	r3, r7, #8
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fda6 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f961 	bl	8005c8c <SDMMC_GetCmdResp2>
 80059ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059cc:	69fb      	ldr	r3, [r7, #28]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b088      	sub	sp, #32
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80059e4:	2303      	movs	r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059e8:	2340      	movs	r3, #64	; 0x40
 80059ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff fd87 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	2103      	movs	r1, #3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9c4 	bl	8005d94 <SDMMC_GetCmdResp6>
 8005a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005a26:	230d      	movs	r3, #13
 8005a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a2a:	2340      	movs	r3, #64	; 0x40
 8005a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a38:	f107 0308 	add.w	r3, r7, #8
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fd66 	bl	8005510 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	210d      	movs	r1, #13
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f830 	bl	8005ab0 <SDMMC_GetCmdResp1>
 8005a50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a52:	69fb      	ldr	r3, [r7, #28]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <SDMMC_GetCmdError+0x4c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a10      	ldr	r2, [pc, #64]	; (8005aac <SDMMC_GetCmdError+0x50>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	60fa      	str	r2, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a88:	e009      	b.n	8005a9e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	22c5      	movs	r2, #197	; 0xc5
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	20000000 	.word	0x20000000
 8005aac:	10624dd3 	.word	0x10624dd3

08005ab0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005abe:	4b70      	ldr	r3, [pc, #448]	; (8005c80 <SDMMC_GetCmdResp1+0x1d0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a70      	ldr	r2, [pc, #448]	; (8005c84 <SDMMC_GetCmdResp1+0x1d4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0a5a      	lsrs	r2, r3, #9
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ae0:	e0c9      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ef      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x22>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ea      	bne.n	8005ad2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b0e:	2304      	movs	r3, #4
 8005b10:	e0b1      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0a6      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	22c5      	movs	r2, #197	; 0xc5
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fd17 	bl	8005562 <SDIO_GetCommandResponse>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d001      	beq.n	8005b42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e099      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b42:	2100      	movs	r1, #0
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fd18 	bl	800557a <SDIO_GetResponse>
 8005b4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4b4e      	ldr	r3, [pc, #312]	; (8005c88 <SDMMC_GetCmdResp1+0x1d8>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e08d      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da02      	bge.n	8005b66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b64:	e087      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	e080      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	e079      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b90:	e071      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba0:	e069      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb0:	e061      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bc0:	e059      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd0:	e051      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005be0:	e049      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bf0:	e041      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c00:	e039      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c10:	e031      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c20:	e029      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c30:	e021      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c40:	e019      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c50:	e011      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c60:	e009      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005c6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c70:	e001      	b.n	8005c76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000000 	.word	0x20000000
 8005c84:	10624dd3 	.word	0x10624dd3
 8005c88:	fdffe008 	.word	0xfdffe008

08005c8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c94:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <SDMMC_GetCmdResp2+0x88>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <SDMMC_GetCmdResp2+0x8c>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0a5b      	lsrs	r3, r3, #9
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	60fa      	str	r2, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cb8:	e026      	b.n	8005d08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <SDMMC_GetCmdResp2+0x1e>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ea      	bne.n	8005caa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	e00e      	b.n	8005d08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e003      	b.n	8005d08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	22c5      	movs	r2, #197	; 0xc5
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000000 	.word	0x20000000
 8005d18:	10624dd3 	.word	0x10624dd3

08005d1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <SDMMC_GetCmdResp3+0x70>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <SDMMC_GetCmdResp3+0x74>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	0a5b      	lsrs	r3, r3, #9
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
 8005d38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	1e5a      	subs	r2, r3, #1
 8005d3e:	60fa      	str	r2, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d48:	e01b      	b.n	8005d82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ef      	beq.n	8005d3a <SDMMC_GetCmdResp3+0x1e>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ea      	bne.n	8005d3a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2204      	movs	r2, #4
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d76:	2304      	movs	r3, #4
 8005d78:	e003      	b.n	8005d82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	22c5      	movs	r2, #197	; 0xc5
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	20000000 	.word	0x20000000
 8005d90:	10624dd3 	.word	0x10624dd3

08005d94 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <SDMMC_GetCmdResp6+0xe4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a35      	ldr	r2, [pc, #212]	; (8005e7c <SDMMC_GetCmdResp6+0xe8>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	0a5b      	lsrs	r3, r3, #9
 8005dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	1e5a      	subs	r2, r3, #1
 8005dbc:	61fa      	str	r2, [r7, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dc6:	e052      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0ef      	beq.n	8005db8 <SDMMC_GetCmdResp6+0x24>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1ea      	bne.n	8005db8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2204      	movs	r2, #4
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005df4:	2304      	movs	r3, #4
 8005df6:	e03a      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e02f      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff fba7 	bl	8005562 <SDIO_GetCommandResponse>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d001      	beq.n	8005e22 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e025      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22c5      	movs	r2, #197	; 0xc5
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fba5 	bl	800557a <SDIO_GetResponse>
 8005e30:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e011      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e58:	e009      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e68:	e001      	b.n	8005e6e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	10624dd3 	.word	0x10624dd3

08005e80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e88:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <SDMMC_GetCmdResp7+0x94>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <SDMMC_GetCmdResp7+0x98>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0a5b      	lsrs	r3, r3, #9
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
 8005e9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005eac:	e02c      	b.n	8005f08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0ef      	beq.n	8005e9e <SDMMC_GetCmdResp7+0x1e>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ea      	bne.n	8005e9e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005eda:	2304      	movs	r3, #4
 8005edc:	e014      	b.n	8005f08 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e009      	b.n	8005f08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2240      	movs	r2, #64	; 0x40
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f06:	2300      	movs	r3, #0
  
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000000 	.word	0x20000000
 8005f18:	10624dd3 	.word	0x10624dd3

08005f1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005f20:	4904      	ldr	r1, [pc, #16]	; (8005f34 <MX_FATFS_Init+0x18>)
 8005f22:	4805      	ldr	r0, [pc, #20]	; (8005f38 <MX_FATFS_Init+0x1c>)
 8005f24:	f002 ff7c 	bl	8008e20 <FATFS_LinkDriver>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <MX_FATFS_Init+0x20>)
 8005f2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20001abc 	.word	0x20001abc
 8005f38:	0800a14c 	.word	0x0800a14c
 8005f3c:	20001ab8 	.word	0x20001ab8

08005f40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
	...

08005f50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f5a:	f000 f8a9 	bl	80060b0 <BSP_SD_IsDetected>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d001      	beq.n	8005f68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e012      	b.n	8005f8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005f68:	480b      	ldr	r0, [pc, #44]	; (8005f98 <BSP_SD_Init+0x48>)
 8005f6a:	f7fd f907 	bl	800317c <HAL_SD_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f7c:	4806      	ldr	r0, [pc, #24]	; (8005f98 <BSP_SD_Init+0x48>)
 8005f7e:	f7fe f861 	bl	8004044 <HAL_SD_ConfigWideBusOperation>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200000e4 	.word	0x200000e4

08005f9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	4806      	ldr	r0, [pc, #24]	; (8005fd4 <BSP_SD_ReadBlocks+0x38>)
 8005fba:	f7fd f98d 	bl	80032d8 <HAL_SD_ReadBlocks>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200000e4 	.word	0x200000e4

08005fd8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	4806      	ldr	r0, [pc, #24]	; (8006010 <BSP_SD_WriteBlocks+0x38>)
 8005ff6:	f7fd fb4d 	bl	8003694 <HAL_SD_WriteBlocks>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200000e4 	.word	0x200000e4

08006014 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006018:	4805      	ldr	r0, [pc, #20]	; (8006030 <BSP_SD_GetCardState+0x1c>)
 800601a:	f7fe f8ad 	bl	8004178 <HAL_SD_GetCardState>
 800601e:	4603      	mov	r3, r0
 8006020:	2b04      	cmp	r3, #4
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
}
 800602a:	4618      	mov	r0, r3
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	200000e4 	.word	0x200000e4

08006034 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4803      	ldr	r0, [pc, #12]	; (800604c <BSP_SD_GetCardInfo+0x18>)
 8006040:	f7fd ffd4 	bl	8003fec <HAL_SD_GetCardInfo>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200000e4 	.word	0x200000e4

08006050 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006058:	f000 f818 	bl	800608c <BSP_SD_AbortCallback>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800606c:	f000 f814 	bl	8006098 <BSP_SD_WriteCpltCallback>
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006080:	f000 f810 	bl	80060a4 <BSP_SD_ReadCpltCallback>
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0

}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0

}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0

}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80060b6:	2301      	movs	r3, #1
 80060b8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	b2db      	uxtb	r3, r3
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	4a08      	ldr	r2, [pc, #32]	; (80060f8 <disk_status+0x30>)
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	79fa      	ldrb	r2, [r7, #7]
 80060e0:	4905      	ldr	r1, [pc, #20]	; (80060f8 <disk_status+0x30>)
 80060e2:	440a      	add	r2, r1
 80060e4:	7a12      	ldrb	r2, [r2, #8]
 80060e6:	4610      	mov	r0, r2
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20001ae0 	.word	0x20001ae0

080060fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <disk_initialize+0x48>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <disk_initialize+0x48>)
 8006118:	2101      	movs	r1, #1
 800611a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <disk_initialize+0x48>)
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	79fa      	ldrb	r2, [r7, #7]
 800612a:	4906      	ldr	r1, [pc, #24]	; (8006144 <disk_initialize+0x48>)
 800612c:	440a      	add	r2, r1
 800612e:	7a12      	ldrb	r2, [r2, #8]
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20001ae0 	.word	0x20001ae0

08006148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <disk_read+0x3c>)
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	689c      	ldr	r4, [r3, #8]
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <disk_read+0x3c>)
 8006168:	4413      	add	r3, r2
 800616a:	7a18      	ldrb	r0, [r3, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	47a0      	blx	r4
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]
  return res;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd90      	pop	{r4, r7, pc}
 8006182:	bf00      	nop
 8006184:	20001ae0 	.word	0x20001ae0

08006188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <disk_write+0x3c>)
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68dc      	ldr	r4, [r3, #12]
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <disk_write+0x3c>)
 80061a8:	4413      	add	r3, r2
 80061aa:	7a18      	ldrb	r0, [r3, #8]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	47a0      	blx	r4
 80061b4:	4603      	mov	r3, r0
 80061b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd90      	pop	{r4, r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20001ae0 	.word	0x20001ae0

080061c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	603a      	str	r2, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
 80061d4:	460b      	mov	r3, r1
 80061d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	4a09      	ldr	r2, [pc, #36]	; (8006200 <disk_ioctl+0x38>)
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	79fa      	ldrb	r2, [r7, #7]
 80061e6:	4906      	ldr	r1, [pc, #24]	; (8006200 <disk_ioctl+0x38>)
 80061e8:	440a      	add	r2, r1
 80061ea:	7a10      	ldrb	r0, [r2, #8]
 80061ec:	79b9      	ldrb	r1, [r7, #6]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	4798      	blx	r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20001ae0 	.word	0x20001ae0

08006204 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006218:	e007      	b.n	800622a <mem_cpy+0x26>
		*d++ = *s++;
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	1c53      	adds	r3, r2, #1
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1c59      	adds	r1, r3, #1
 8006224:	6179      	str	r1, [r7, #20]
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f2      	bne.n	800621a <mem_cpy+0x16>
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006250:	e005      	b.n	800625e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	617a      	str	r2, [r7, #20]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f4      	bne.n	8006252 <mem_set+0x12>
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800628c:	bf00      	nop
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <mem_cmp+0x40>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	61ba      	str	r2, [r7, #24]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	1acb      	subs	r3, r1, r3
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ec      	beq.n	800628e <mem_cmp+0x1a>
	return r;
 80062b4:	697b      	ldr	r3, [r7, #20]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3724      	adds	r7, #36	; 0x24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80062ca:	e002      	b.n	80062d2 <chk_chr+0x12>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3301      	adds	r3, #1
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <chk_chr+0x26>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d1f2      	bne.n	80062cc <chk_chr+0xc>
	return *str;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	781b      	ldrb	r3, [r3, #0]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e03b      	b.n	8006380 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8006308:	4931      	ldr	r1, [pc, #196]	; (80063d0 <chk_lock+0xdc>)
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02c      	beq.n	8006376 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800631c:	492c      	ldr	r1, [pc, #176]	; (80063d0 <chk_lock+0xdc>)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d120      	bne.n	800637a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006338:	4925      	ldr	r1, [pc, #148]	; (80063d0 <chk_lock+0xdc>)
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	3304      	adds	r3, #4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006350:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006352:	429a      	cmp	r2, r3
 8006354:	d111      	bne.n	800637a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006356:	491e      	ldr	r1, [pc, #120]	; (80063d0 <chk_lock+0xdc>)
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	3308      	adds	r3, #8
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006370:	429a      	cmp	r2, r3
 8006372:	d102      	bne.n	800637a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006374:	e007      	b.n	8006386 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d9c0      	bls.n	8006308 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d109      	bne.n	80063a0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <chk_lock+0xa4>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d101      	bne.n	800639c <chk_lock+0xa8>
 8006398:	2300      	movs	r3, #0
 800639a:	e013      	b.n	80063c4 <chk_lock+0xd0>
 800639c:	2312      	movs	r3, #18
 800639e:	e011      	b.n	80063c4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <chk_lock+0xca>
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <chk_lock+0xdc>)
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4613      	mov	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	330a      	adds	r3, #10
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063bc:	d101      	bne.n	80063c2 <chk_lock+0xce>
 80063be:	2310      	movs	r3, #16
 80063c0:	e000      	b.n	80063c4 <chk_lock+0xd0>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20001ac8 	.word	0x20001ac8

080063d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	e002      	b.n	80063e6 <enq_lock+0x12>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d809      	bhi.n	8006400 <enq_lock+0x2c>
 80063ec:	490a      	ldr	r1, [pc, #40]	; (8006418 <enq_lock+0x44>)
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ef      	bne.n	80063e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20001ac8 	.word	0x20001ac8

0800641c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e02e      	b.n	800648a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800642c:	4958      	ldr	r1, [pc, #352]	; (8006590 <inc_lock+0x174>)
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d11d      	bne.n	8006484 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006448:	4951      	ldr	r1, [pc, #324]	; (8006590 <inc_lock+0x174>)
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3304      	adds	r3, #4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006460:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006462:	429a      	cmp	r2, r3
 8006464:	d10e      	bne.n	8006484 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006466:	494a      	ldr	r1, [pc, #296]	; (8006590 <inc_lock+0x174>)
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4613      	mov	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3308      	adds	r3, #8
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006480:	429a      	cmp	r2, r3
 8006482:	d006      	beq.n	8006492 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d9cd      	bls.n	800642c <inc_lock+0x10>
 8006490:	e000      	b.n	8006494 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006492:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d148      	bne.n	800652c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e002      	b.n	80064a6 <inc_lock+0x8a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d809      	bhi.n	80064c0 <inc_lock+0xa4>
 80064ac:	4938      	ldr	r1, [pc, #224]	; (8006590 <inc_lock+0x174>)
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ef      	bne.n	80064a0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d101      	bne.n	80064ca <inc_lock+0xae>
 80064c6:	2300      	movs	r3, #0
 80064c8:	e05d      	b.n	8006586 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	482f      	ldr	r0, [pc, #188]	; (8006590 <inc_lock+0x174>)
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4613      	mov	r3, r2
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4403      	add	r3, r0
 80064e0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e8:	6899      	ldr	r1, [r3, #8]
 80064ea:	4829      	ldr	r0, [pc, #164]	; (8006590 <inc_lock+0x174>)
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4613      	mov	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4403      	add	r3, r0
 80064f8:	3304      	adds	r3, #4
 80064fa:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	88d8      	ldrh	r0, [r3, #6]
 8006504:	4922      	ldr	r1, [pc, #136]	; (8006590 <inc_lock+0x174>)
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4613      	mov	r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3308      	adds	r3, #8
 8006514:	4602      	mov	r2, r0
 8006516:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006518:	491d      	ldr	r1, [pc, #116]	; (8006590 <inc_lock+0x174>)
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	330a      	adds	r3, #10
 8006528:	2200      	movs	r2, #0
 800652a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <inc_lock+0x130>
 8006532:	4917      	ldr	r1, [pc, #92]	; (8006590 <inc_lock+0x174>)
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4613      	mov	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	330a      	adds	r3, #10
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <inc_lock+0x130>
 8006548:	2300      	movs	r3, #0
 800654a:	e01c      	b.n	8006586 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <inc_lock+0x14e>
 8006552:	490f      	ldr	r1, [pc, #60]	; (8006590 <inc_lock+0x174>)
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4613      	mov	r3, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	330a      	adds	r3, #10
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	b299      	uxth	r1, r3
 8006568:	e001      	b.n	800656e <inc_lock+0x152>
 800656a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800656e:	4808      	ldr	r0, [pc, #32]	; (8006590 <inc_lock+0x174>)
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4403      	add	r3, r0
 800657c:	330a      	adds	r3, #10
 800657e:	460a      	mov	r2, r1
 8006580:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3301      	adds	r3, #1
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr
 8006590:	20001ac8 	.word	0x20001ac8

08006594 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e016      	b.n	80065d0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065a2:	4910      	ldr	r1, [pc, #64]	; (80065e4 <clear_lock+0x50>)
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d108      	bne.n	80065ca <clear_lock+0x36>
 80065b8:	490a      	ldr	r1, [pc, #40]	; (80065e4 <clear_lock+0x50>)
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d9e5      	bls.n	80065a2 <clear_lock+0xe>
	}
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20001ac8 	.word	0x20001ac8

080065e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	791b      	ldrb	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d040      	beq.n	8006682 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006610:	7858      	ldrb	r0, [r3, #1]
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	2301      	movs	r3, #1
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	f7ff fdb6 	bl	8006188 <disk_write>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <sync_window+0x40>
			res = FR_DISK_ERR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
 8006626:	e02c      	b.n	8006682 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662e:	2200      	movs	r2, #0
 8006630:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	1ad2      	subs	r2, r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d21b      	bcs.n	8006682 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	e012      	b.n	800667c <sync_window+0x94>
					wsect += fs->fsize;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4413      	add	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	7858      	ldrb	r0, [r3, #1]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	2301      	movs	r3, #1
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	f7ff fd89 	bl	8006188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3b01      	subs	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d8e9      	bhi.n	8006656 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d01e      	beq.n	80066e6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff9d 	bl	80065e8 <sync_window>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d116      	bne.n	80066e6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	7858      	ldrb	r0, [r3, #1]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	2301      	movs	r3, #1
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	f7ff fd3f 	bl	8006148 <disk_read>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e0:	461a      	mov	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	3b02      	subs	r3, #2
 80066fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	3b02      	subs	r3, #2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d301      	bcc.n	8006714 <clust2sect+0x24>
 8006710:	2300      	movs	r3, #0
 8006712:	e00c      	b.n	800672e <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	789b      	ldrb	r3, [r3, #2]
 800671c:	461a      	mov	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	fb03 f202 	mul.w	r2, r3, r2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	4413      	add	r3, r2
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d906      	bls.n	8006756 <get_fat+0x1e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <get_fat+0x24>
		val = 1;	/* Internal error */
 8006756:	2301      	movs	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e0e4      	b.n	8006926 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b03      	cmp	r3, #3
 800676c:	f000 8098 	beq.w	80068a0 <get_fat+0x168>
 8006770:	2b03      	cmp	r3, #3
 8006772:	f300 80ce 	bgt.w	8006912 <get_fat+0x1da>
 8006776:	2b01      	cmp	r3, #1
 8006778:	d002      	beq.n	8006780 <get_fat+0x48>
 800677a:	2b02      	cmp	r3, #2
 800677c:	d05f      	beq.n	800683e <get_fat+0x106>
 800677e:	e0c8      	b.n	8006912 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	4619      	mov	r1, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067a6:	4413      	add	r3, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff6e 	bl	800668c <move_window>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f040 80b0 	bne.w	8006918 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	60fa      	str	r2, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067c4:	8952      	ldrh	r2, [r2, #10]
 80067c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ca:	fb01 f202 	mul.w	r2, r1, r2
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	4619      	mov	r1, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ee:	4413      	add	r3, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff4a 	bl	800668c <move_window>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 808e 	bne.w	800691c <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006806:	895b      	ldrh	r3, [r3, #10]
 8006808:	461a      	mov	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006810:	fb01 f202 	mul.w	r2, r1, r2
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	5cd3      	ldrb	r3, [r2, r3]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4313      	orrs	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <get_fat+0xfc>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	e002      	b.n	800683a <get_fat+0x102>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683a:	617b      	str	r3, [r7, #20]
			break;
 800683c:	e073      	b.n	8006926 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684c:	895b      	ldrh	r3, [r3, #10]
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	b29b      	uxth	r3, r3
 8006852:	4619      	mov	r1, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	fbb3 f3f1 	udiv	r3, r3, r1
 800685a:	4413      	add	r3, r2
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ff14 	bl	800668c <move_window>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d15a      	bne.n	8006920 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006874:	8952      	ldrh	r2, [r2, #10]
 8006876:	fbb3 f1f2 	udiv	r1, r3, r2
 800687a:	fb01 f202 	mul.w	r2, r1, r2
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	b21a      	sxth	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	b21b      	sxth	r3, r3
 8006896:	4313      	orrs	r3, r2
 8006898:	b21b      	sxth	r3, r3
 800689a:	b29b      	uxth	r3, r3
 800689c:	617b      	str	r3, [r7, #20]
			break;
 800689e:	e042      	b.n	8006926 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ae:	895b      	ldrh	r3, [r3, #10]
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80068bc:	4413      	add	r3, r2
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fee3 	bl	800668c <move_window>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d12b      	bne.n	8006924 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068d6:	8952      	ldrh	r2, [r2, #10]
 80068d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068dc:	fb01 f202 	mul.w	r2, r1, r2
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4413      	add	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	3303      	adds	r3, #3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	061a      	lsls	r2, r3, #24
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3302      	adds	r3, #2
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	4313      	orrs	r3, r2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	3201      	adds	r2, #1
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	0212      	lsls	r2, r2, #8
 8006902:	4313      	orrs	r3, r2
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	4313      	orrs	r3, r2
 800690a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800690e:	617b      	str	r3, [r7, #20]
			break;
 8006910:	e009      	b.n	8006926 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006912:	2301      	movs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e006      	b.n	8006926 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006918:	bf00      	nop
 800691a:	e004      	b.n	8006926 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800691c:	bf00      	nop
 800691e:	e002      	b.n	8006926 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006920:	bf00      	nop
 8006922:	e000      	b.n	8006926 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006924:	bf00      	nop
		}
	}

	return val;
 8006926:	697b      	ldr	r3, [r7, #20]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d906      	bls.n	8006950 <put_fat+0x20>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <put_fat+0x26>
		res = FR_INT_ERR;
 8006950:	2302      	movs	r3, #2
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e13a      	b.n	8006bcc <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b03      	cmp	r3, #3
 8006960:	f000 80d0 	beq.w	8006b04 <put_fat+0x1d4>
 8006964:	2b03      	cmp	r3, #3
 8006966:	f300 8127 	bgt.w	8006bb8 <put_fat+0x288>
 800696a:	2b01      	cmp	r3, #1
 800696c:	d003      	beq.n	8006976 <put_fat+0x46>
 800696e:	2b02      	cmp	r3, #2
 8006970:	f000 808f 	beq.w	8006a92 <put_fat+0x162>
 8006974:	e120      	b.n	8006bb8 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4413      	add	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	895b      	ldrh	r3, [r3, #10]
 8006994:	4619      	mov	r1, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	fbb3 f3f1 	udiv	r3, r3, r1
 800699c:	4413      	add	r3, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff fe73 	bl	800668c <move_window>
 80069a6:	4603      	mov	r3, r0
 80069a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069aa:	7ffb      	ldrb	r3, [r7, #31]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8106 	bne.w	8006bbe <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	617a      	str	r2, [r7, #20]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069be:	8952      	ldrh	r2, [r2, #10]
 80069c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069c4:	fb01 f202 	mul.w	r2, r1, r2
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <put_fat+0xc6>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	b25a      	sxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	e001      	b.n	80069fa <put_fat+0xca>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a04:	2201      	movs	r2, #1
 8006a06:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a16:	895b      	ldrh	r3, [r3, #10]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a20:	4413      	add	r3, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fe31 	bl	800668c <move_window>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a2e:	7ffb      	ldrb	r3, [r7, #31]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 80c6 	bne.w	8006bc2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3c:	895b      	ldrh	r3, [r3, #10]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a46:	fb01 f202 	mul.w	r2, r1, r2
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <put_fat+0x134>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e00e      	b.n	8006a82 <put_fat+0x152>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f023 030f 	bic.w	r3, r3, #15
 8006a6e:	b25a      	sxtb	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	711a      	strb	r2, [r3, #4]
			break;
 8006a90:	e09c      	b.n	8006bcc <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa0:	895b      	ldrh	r3, [r3, #10]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aae:	4413      	add	r3, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fdea 	bl	800668c <move_window>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006abc:	7ffb      	ldrb	r3, [r7, #31]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 8081 	bne.w	8006bc6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad4:	fb01 f202 	mul.w	r2, r1, r2
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	3301      	adds	r3, #1
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afe:	2201      	movs	r2, #1
 8006b00:	711a      	strb	r2, [r3, #4]
			break;
 8006b02:	e063      	b.n	8006bcc <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b12:	895b      	ldrh	r3, [r3, #10]
 8006b14:	089b      	lsrs	r3, r3, #2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b20:	4413      	add	r3, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fdb1 	bl	800668c <move_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d14a      	bne.n	8006bca <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b3e:	8952      	ldrh	r2, [r2, #10]
 8006b40:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b44:	fb01 f202 	mul.w	r2, r1, r2
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	3303      	adds	r3, #3
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	061a      	lsls	r2, r3, #24
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	041b      	lsls	r3, r3, #16
 8006b60:	4313      	orrs	r3, r2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	3201      	adds	r2, #1
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	0212      	lsls	r2, r2, #8
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0c1a      	lsrs	r2, r3, #16
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0e1a      	lsrs	r2, r3, #24
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	3303      	adds	r3, #3
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	711a      	strb	r2, [r3, #4]
			break;
 8006bb6:	e009      	b.n	8006bcc <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e006      	b.n	8006bcc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bbe:	bf00      	nop
 8006bc0:	e004      	b.n	8006bcc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bca:	bf00      	nop
		}
	}

	return res;
 8006bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d906      	bls.n	8006bf4 <remove_chain+0x1e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <remove_chain+0x24>
		res = FR_INT_ERR;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e049      	b.n	8006c8e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006bfe:	e03b      	b.n	8006c78 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fd98 	bl	8006738 <get_fat>
 8006c08:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03b      	beq.n	8006c88 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <remove_chain+0x46>
 8006c16:	2302      	movs	r3, #2
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	e038      	b.n	8006c8e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d102      	bne.n	8006c2a <remove_chain+0x54>
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e031      	b.n	8006c8e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fe7e 	bl	8006930 <put_fat>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d126      	bne.n	8006c8c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d013      	beq.n	8006c74 <remove_chain+0x9e>
				fs->free_clust++;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	3301      	adds	r3, #1
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c5c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	795b      	ldrb	r3, [r3, #5]
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d3bc      	bcc.n	8006c00 <remove_chain+0x2a>
 8006c86:	e002      	b.n	8006c8e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006c8c:	bf00      	nop
		}
	}

	return res;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d111      	bne.n	8006ccc <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d006      	beq.n	8006cc6 <create_chain+0x2e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d31d      	bcc.n	8006d02 <create_chain+0x6a>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	e01a      	b.n	8006d02 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fd32 	bl	8006738 <get_fat>
 8006cd4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d801      	bhi.n	8006ce0 <create_chain+0x48>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e07f      	b.n	8006de0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d101      	bne.n	8006cec <create_chain+0x54>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	e079      	b.n	8006de0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d201      	bcs.n	8006cfe <create_chain+0x66>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	e070      	b.n	8006de0 <create_chain+0x148>
		scl = clst;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d307      	bcc.n	8006d2a <create_chain+0x92>
			ncl = 2;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d901      	bls.n	8006d2a <create_chain+0x92>
 8006d26:	2300      	movs	r3, #0
 8006d28:	e05a      	b.n	8006de0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006d2a:	6979      	ldr	r1, [r7, #20]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fd03 	bl	8006738 <get_fat>
 8006d32:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d002      	beq.n	8006d48 <create_chain+0xb0>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <create_chain+0xb4>
			return cs;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	e049      	b.n	8006de0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d1d8      	bne.n	8006d06 <create_chain+0x6e>
 8006d54:	2300      	movs	r3, #0
 8006d56:	e043      	b.n	8006de0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006d58:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006d5a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006d5e:	6979      	ldr	r1, [r7, #20]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fde5 	bl	8006930 <put_fat>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <create_chain+0xec>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fdd8 	bl	8006930 <put_fat>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d121      	bne.n	8006dce <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d90:	461a      	mov	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d01c      	beq.n	8006dde <create_chain+0x146>
			fs->free_clust--;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006db4:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbc:	795b      	ldrb	r3, [r3, #5]
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	715a      	strb	r2, [r3, #5]
 8006dcc:	e007      	b.n	8006dde <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d102      	bne.n	8006dda <create_chain+0x142>
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd8:	e000      	b.n	8006ddc <create_chain+0x144>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006dde:	697b      	ldr	r3, [r7, #20]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	895b      	ldrh	r3, [r3, #10]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e20:	7892      	ldrb	r2, [r2, #2]
 8006e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	613a      	str	r2, [r7, #16]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <clmt_clust+0x54>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e010      	b.n	8006e5e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d307      	bcc.n	8006e54 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e52:	e7e9      	b.n	8006e28 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006e54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	4413      	add	r3, r2
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d009      	beq.n	8006ea2 <dir_sdi+0x3a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d301      	bcc.n	8006ea6 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e0aa      	b.n	8006ffc <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d110      	bne.n	8006ece <dir_sdi+0x66>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d107      	bne.n	8006ece <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee0:	891b      	ldrh	r3, [r3, #8]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d301      	bcc.n	8006eee <dir_sdi+0x86>
			return FR_INT_ERR;
 8006eea:	2302      	movs	r3, #2
 8006eec:	e086      	b.n	8006ffc <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	e043      	b.n	8006f88 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	895b      	ldrh	r3, [r3, #10]
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f20:	789b      	ldrb	r3, [r3, #2]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f28:	e021      	b.n	8006f6e <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fbff 	bl	8006738 <get_fat>
 8006f3a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d101      	bne.n	8006f48 <dir_sdi+0xe0>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e059      	b.n	8006ffc <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d909      	bls.n	8006f62 <dir_sdi+0xfa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d301      	bcc.n	8006f66 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e04a      	b.n	8006ffc <dir_sdi+0x194>
			idx -= ic;
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d2d9      	bcs.n	8006f2a <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6979      	ldr	r1, [r7, #20]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fbb5 	bl	80066f0 <clust2sect>
 8006f86:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8e:	461a      	mov	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <dir_sdi+0x136>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e02e      	b.n	8006ffc <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006faa:	895b      	ldrh	r3, [r3, #10]
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fc2:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	895b      	ldrh	r3, [r3, #10]
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fe8:	fb01 f202 	mul.w	r2, r1, r2
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	015b      	lsls	r3, r3, #5
 8006ff0:	4403      	add	r3, r0
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ff8:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <dir_next+0x2a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <dir_next+0x2e>
		return FR_NO_FILE;
 800702e:	2304      	movs	r3, #4
 8007030:	e12e      	b.n	8007290 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	fbb3 f1f2 	udiv	r1, r3, r2
 800704c:	fb01 f202 	mul.w	r2, r1, r2
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80fa 	bne.w	800724c <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007068:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007082:	891b      	ldrh	r3, [r3, #8]
 8007084:	461a      	mov	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4293      	cmp	r3, r2
 800708a:	f0c0 80df 	bcc.w	800724c <dir_next+0x248>
				return FR_NO_FILE;
 800708e:	2304      	movs	r3, #4
 8007090:	e0fe      	b.n	8007290 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709e:	895b      	ldrh	r3, [r3, #10]
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070b8:	7892      	ldrb	r2, [r2, #2]
 80070ba:	3a01      	subs	r2, #1
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 80c4 	bne.w	800724c <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7ff fb2e 	bl	8006738 <get_fat>
 80070dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d801      	bhi.n	80070e8 <dir_next+0xe4>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e0d3      	b.n	8007290 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d101      	bne.n	80070f4 <dir_next+0xf0>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0cd      	b.n	8007290 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	429a      	cmp	r2, r3
 8007106:	f0c0 808e 	bcc.w	8007226 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <dir_next+0x110>
 8007110:	2304      	movs	r3, #4
 8007112:	e0bd      	b.n	8007290 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7ff fdb6 	bl	8006c98 <create_chain>
 800712c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <dir_next+0x134>
 8007134:	2307      	movs	r3, #7
 8007136:	e0ab      	b.n	8007290 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <dir_next+0x13e>
 800713e:	2302      	movs	r3, #2
 8007140:	e0a6      	b.n	8007290 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d101      	bne.n	800714e <dir_next+0x14a>
 800714a:	2301      	movs	r3, #1
 800714c:	e0a0      	b.n	8007290 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fa46 	bl	80065e8 <sync_window>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <dir_next+0x162>
 8007162:	2301      	movs	r3, #1
 8007164:	e094      	b.n	8007290 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717c:	895b      	ldrh	r3, [r3, #10]
 800717e:	461a      	mov	r2, r3
 8007180:	2100      	movs	r1, #0
 8007182:	f7ff f85d 	bl	8006240 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	681c      	ldr	r4, [r3, #0]
 8007196:	6979      	ldr	r1, [r7, #20]
 8007198:	4610      	mov	r0, r2
 800719a:	f7ff faa9 	bl	80066f0 <clust2sect>
 800719e:	4603      	mov	r3, r0
 80071a0:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80071a4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	e021      	b.n	80071f0 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b8:	2201      	movs	r2, #1
 80071ba:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fa0f 	bl	80065e8 <sync_window>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <dir_next+0x1d0>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e05d      	b.n	8007290 <dir_next+0x28c>
						dp->fs->winsect++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80071e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071e2:	3201      	adds	r2, #1
 80071e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	789b      	ldrb	r3, [r3, #2]
 80071fe:	461a      	mov	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4293      	cmp	r3, r2
 8007204:	d3d2      	bcc.n	80071ac <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1acb      	subs	r3, r1, r3
 8007220:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007224:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722c:	461a      	mov	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fa57 	bl	80066f0 <clust2sect>
 8007242:	4602      	mov	r2, r0
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007256:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	895b      	ldrh	r3, [r3, #10]
 8007270:	095b      	lsrs	r3, r3, #5
 8007272:	b29b      	uxth	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	fbb3 f1f2 	udiv	r1, r3, r2
 800727c:	fb01 f202 	mul.w	r2, r1, r2
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	015b      	lsls	r3, r3, #5
 8007284:	4403      	add	r3, r0
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800728c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd90      	pop	{r4, r7, pc}

08007298 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80072a2:	2100      	movs	r1, #0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fddf 	bl	8006e68 <dir_sdi>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d135      	bne.n	8007320 <dir_alloc+0x88>
		n = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f7ff f9de 	bl	800668c <move_window>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d121      	bne.n	800731e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2be5      	cmp	r3, #229	; 0xe5
 80072e6:	d006      	beq.n	80072f6 <dir_alloc+0x5e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d102      	bne.n	800730a <dir_alloc+0x72>
 8007304:	e00c      	b.n	8007320 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800730a:	2101      	movs	r1, #1
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fe79 	bl	8007004 <dir_next>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0cd      	beq.n	80072b8 <dir_alloc+0x20>
 800731c:	e000      	b.n	8007320 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800731e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b04      	cmp	r3, #4
 8007324:	d101      	bne.n	800732a <dir_alloc+0x92>
 8007326:	2307      	movs	r3, #7
 8007328:	73fb      	strb	r3, [r7, #15]
	return res;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	331b      	adds	r3, #27
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	b21a      	sxth	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	331a      	adds	r3, #26
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b21b      	sxth	r3, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	b21b      	sxth	r3, r3
 8007354:	b29b      	uxth	r3, r3
 8007356:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d10f      	bne.n	8007384 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	3315      	adds	r3, #21
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b21a      	sxth	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b21b      	sxth	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b21b      	sxth	r3, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

	return cl;
 8007384:	68fb      	ldr	r3, [r7, #12]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	331a      	adds	r3, #26
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	331b      	adds	r3, #27
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	0c1a      	lsrs	r2, r3, #16
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3314      	adds	r3, #20
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3315      	adds	r3, #21
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fd3e 	bl	8006e68 <dir_sdi>
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <dir_find+0x1e>
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	e03f      	b.n	800747a <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7ff f93d 	bl	800668c <move_window>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d12a      	bne.n	8007472 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d102      	bne.n	8007438 <dir_find+0x5c>
 8007432:	2304      	movs	r3, #4
 8007434:	75fb      	strb	r3, [r7, #23]
 8007436:	e01f      	b.n	8007478 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	330b      	adds	r3, #11
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <dir_find+0x82>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	220b      	movs	r2, #11
 8007450:	4619      	mov	r1, r3
 8007452:	6938      	ldr	r0, [r7, #16]
 8007454:	f7fe ff0e 	bl	8006274 <mem_cmp>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800745e:	2100      	movs	r1, #0
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fdcf 	bl	8007004 <dir_next>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0c4      	beq.n	80073fa <dir_find+0x1e>
 8007470:	e002      	b.n	8007478 <dir_find+0x9c>
		if (res != FR_OK) break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <dir_find+0x9c>
			break;
 8007476:	bf00      	nop

	return res;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800748c:	2304      	movs	r3, #4
 800748e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8007490:	e042      	b.n	8007518 <dir_read+0x96>
		res = move_window(dp->fs, dp->sect);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7ff f8f1 	bl	800668c <move_window>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d138      	bne.n	8007526 <dir_read+0xa4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <dir_read+0x4e>
 80074ca:	2304      	movs	r3, #4
 80074cc:	75fb      	strb	r3, [r7, #23]
 80074ce:	e02f      	b.n	8007530 <dir_read+0xae>
		a = dir[DIR_Attr] & AM_MASK;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	330b      	adds	r3, #11
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074da:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2be5      	cmp	r3, #229	; 0xe5
 80074e0:	d011      	beq.n	8007506 <dir_read+0x84>
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b2e      	cmp	r3, #46	; 0x2e
 80074e6:	d00e      	beq.n	8007506 <dir_read+0x84>
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	d00b      	beq.n	8007506 <dir_read+0x84>
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	f023 0320 	bic.w	r3, r3, #32
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	bf0c      	ite	eq
 80074f8:	2301      	moveq	r3, #1
 80074fa:	2300      	movne	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4293      	cmp	r3, r2
 8007504:	d011      	beq.n	800752a <dir_read+0xa8>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fd7b 	bl	8007004 <dir_next>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <dir_read+0xac>
	while (dp->sect) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1b6      	bne.n	8007492 <dir_read+0x10>
 8007524:	e004      	b.n	8007530 <dir_read+0xae>
		if (res != FR_OK) break;
 8007526:	bf00      	nop
 8007528:	e002      	b.n	8007530 <dir_read+0xae>
			break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <dir_read+0xae>
		if (res != FR_OK) break;
 800752e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <dir_read+0xc0>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	461a      	mov	r2, r3
 800753e:	2300      	movs	r3, #0
 8007540:	6113      	str	r3, [r2, #16]

	return res;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007554:	2101      	movs	r1, #1
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fe9e 	bl	8007298 <dir_alloc>
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d12d      	bne.n	80075c2 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7ff f887 	bl	800668c <move_window>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11c      	bne.n	80075c2 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	2220      	movs	r2, #32
 8007592:	2100      	movs	r1, #0
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fe53 	bl	8006240 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a0:	6958      	ldr	r0, [r3, #20]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	220b      	movs	r2, #11
 80075ac:	4619      	mov	r1, r3
 80075ae:	f7fe fe29 	bl	8006204 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	2201      	movs	r2, #1
 80075c0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	3309      	adds	r3, #9
 80075da:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05b      	beq.n	80076a0 <get_fileinfo+0xd4>
		dir = dp->dir;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	60bb      	str	r3, [r7, #8]
		i = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 80075f6:	e01c      	b.n	8007632 <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	617a      	str	r2, [r7, #20]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b20      	cmp	r3, #32
 800760a:	d100      	bne.n	800760e <get_fileinfo+0x42>
 800760c:	e011      	b.n	8007632 <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b05      	cmp	r3, #5
 8007612:	d101      	bne.n	8007618 <get_fileinfo+0x4c>
 8007614:	23e5      	movs	r3, #229	; 0xe5
 8007616:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b09      	cmp	r3, #9
 800761c:	d104      	bne.n	8007628 <get_fileinfo+0x5c>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	613a      	str	r2, [r7, #16]
 8007624:	222e      	movs	r2, #46	; 0x2e
 8007626:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	613a      	str	r2, [r7, #16]
 800762e:	7bfa      	ldrb	r2, [r7, #15]
 8007630:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b0a      	cmp	r3, #10
 8007636:	d9df      	bls.n	80075f8 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	7ada      	ldrb	r2, [r3, #11]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	331f      	adds	r3, #31
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	061a      	lsls	r2, r3, #24
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	331e      	adds	r3, #30
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	4313      	orrs	r3, r2
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	321d      	adds	r2, #29
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	0212      	lsls	r2, r2, #8
 800765a:	4313      	orrs	r3, r2
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	321c      	adds	r2, #28
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	431a      	orrs	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3319      	adds	r3, #25
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	b21a      	sxth	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3318      	adds	r3, #24
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b21b      	sxth	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b21b      	sxth	r3, r3
 800767e:	b29a      	uxth	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	3317      	adds	r3, #23
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	b21a      	sxth	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3316      	adds	r3, #22
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b21b      	sxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b21b      	sxth	r3, r3
 800769a:	b29a      	uxth	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e002      	b.n	80076c8 <create_name+0x18>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b2f      	cmp	r3, #47	; 0x2f
 80076ce:	d0f8      	beq.n	80076c2 <create_name+0x12>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b5c      	cmp	r3, #92	; 0x5c
 80076d6:	d0f4      	beq.n	80076c2 <create_name+0x12>
	sfn = dp->fn;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80076e2:	220b      	movs	r2, #11
 80076e4:	2120      	movs	r1, #32
 80076e6:	68b8      	ldr	r0, [r7, #8]
 80076e8:	f7fe fdaa 	bl	8006240 <mem_set>
	si = i = b = 0; ni = 8;
 80076ec:	2300      	movs	r3, #0
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	2308      	movs	r3, #8
 80076fa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	617a      	str	r2, [r7, #20]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800770a:	7fbb      	ldrb	r3, [r7, #30]
 800770c:	2b20      	cmp	r3, #32
 800770e:	d953      	bls.n	80077b8 <create_name+0x108>
 8007710:	7fbb      	ldrb	r3, [r7, #30]
 8007712:	2b2f      	cmp	r3, #47	; 0x2f
 8007714:	d050      	beq.n	80077b8 <create_name+0x108>
 8007716:	7fbb      	ldrb	r3, [r7, #30]
 8007718:	2b5c      	cmp	r3, #92	; 0x5c
 800771a:	d04d      	beq.n	80077b8 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800771c:	7fbb      	ldrb	r3, [r7, #30]
 800771e:	2b2e      	cmp	r3, #46	; 0x2e
 8007720:	d003      	beq.n	800772a <create_name+0x7a>
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	429a      	cmp	r2, r3
 8007728:	d30f      	bcc.n	800774a <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d102      	bne.n	8007736 <create_name+0x86>
 8007730:	7fbb      	ldrb	r3, [r7, #30]
 8007732:	2b2e      	cmp	r3, #46	; 0x2e
 8007734:	d001      	beq.n	800773a <create_name+0x8a>
 8007736:	2306      	movs	r3, #6
 8007738:	e073      	b.n	8007822 <create_name+0x172>
			i = 8; ni = 11;
 800773a:	2308      	movs	r3, #8
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	230b      	movs	r3, #11
 8007740:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007742:	7ffb      	ldrb	r3, [r7, #31]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e035      	b.n	80077b6 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800774a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da08      	bge.n	8007764 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8007752:	7ffb      	ldrb	r3, [r7, #31]
 8007754:	f043 0303 	orr.w	r3, r3, #3
 8007758:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800775a:	7fbb      	ldrb	r3, [r7, #30]
 800775c:	3b80      	subs	r3, #128	; 0x80
 800775e:	4a33      	ldr	r2, [pc, #204]	; (800782c <create_name+0x17c>)
 8007760:	5cd3      	ldrb	r3, [r2, r3]
 8007762:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007764:	7fbb      	ldrb	r3, [r7, #30]
 8007766:	4619      	mov	r1, r3
 8007768:	4831      	ldr	r0, [pc, #196]	; (8007830 <create_name+0x180>)
 800776a:	f7fe fda9 	bl	80062c0 <chk_chr>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <create_name+0xc8>
				return FR_INVALID_NAME;
 8007774:	2306      	movs	r3, #6
 8007776:	e054      	b.n	8007822 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007778:	7fbb      	ldrb	r3, [r7, #30]
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d907      	bls.n	800778e <create_name+0xde>
 800777e:	7fbb      	ldrb	r3, [r7, #30]
 8007780:	2b5a      	cmp	r3, #90	; 0x5a
 8007782:	d804      	bhi.n	800778e <create_name+0xde>
				b |= 2;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	f043 0302 	orr.w	r3, r3, #2
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e00c      	b.n	80077a8 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800778e:	7fbb      	ldrb	r3, [r7, #30]
 8007790:	2b60      	cmp	r3, #96	; 0x60
 8007792:	d909      	bls.n	80077a8 <create_name+0xf8>
 8007794:	7fbb      	ldrb	r3, [r7, #30]
 8007796:	2b7a      	cmp	r3, #122	; 0x7a
 8007798:	d806      	bhi.n	80077a8 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800779a:	7ffb      	ldrb	r3, [r7, #31]
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	7fbb      	ldrb	r3, [r7, #30]
 80077a4:	3b20      	subs	r3, #32
 80077a6:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	613a      	str	r2, [r7, #16]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	7fba      	ldrb	r2, [r7, #30]
 80077b4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80077b6:	e7a1      	b.n	80076fc <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	441a      	add	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80077c2:	7fbb      	ldrb	r3, [r7, #30]
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d801      	bhi.n	80077cc <create_name+0x11c>
 80077c8:	2304      	movs	r3, #4
 80077ca:	e000      	b.n	80077ce <create_name+0x11e>
 80077cc:	2300      	movs	r3, #0
 80077ce:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <create_name+0x12a>
 80077d6:	2306      	movs	r3, #6
 80077d8:	e023      	b.n	8007822 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2be5      	cmp	r3, #229	; 0xe5
 80077e0:	d102      	bne.n	80077e8 <create_name+0x138>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2205      	movs	r2, #5
 80077e6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d102      	bne.n	80077f4 <create_name+0x144>
 80077ee:	7ffb      	ldrb	r3, [r7, #31]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80077f4:	7ffb      	ldrb	r3, [r7, #31]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d103      	bne.n	8007806 <create_name+0x156>
 80077fe:	7fbb      	ldrb	r3, [r7, #30]
 8007800:	f043 0310 	orr.w	r3, r3, #16
 8007804:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007806:	7ffb      	ldrb	r3, [r7, #31]
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b04      	cmp	r3, #4
 800780e:	d103      	bne.n	8007818 <create_name+0x168>
 8007810:	7fbb      	ldrb	r3, [r7, #30]
 8007812:	f043 0308 	orr.w	r3, r3, #8
 8007816:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	330b      	adds	r3, #11
 800781c:	7fba      	ldrb	r2, [r7, #30]
 800781e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007820:	2300      	movs	r3, #0
#endif
}
 8007822:	4618      	mov	r0, r3
 8007824:	3720      	adds	r7, #32
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	0800a0cc 	.word	0x0800a0cc
 8007830:	08009a88 	.word	0x08009a88

08007834 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b2f      	cmp	r3, #47	; 0x2f
 8007844:	d003      	beq.n	800784e <follow_path+0x1a>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b5c      	cmp	r3, #92	; 0x5c
 800784c:	d102      	bne.n	8007854 <follow_path+0x20>
		path++;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785a:	461a      	mov	r2, r3
 800785c:	2300      	movs	r3, #0
 800785e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b1f      	cmp	r3, #31
 8007866:	d80c      	bhi.n	8007882 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fafc 	bl	8006e68 <dir_sdi>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787a:	461a      	mov	r2, r3
 800787c:	2300      	movs	r3, #0
 800787e:	6153      	str	r3, [r2, #20]
 8007880:	e049      	b.n	8007916 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007882:	463b      	mov	r3, r7
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff ff12 	bl	80076b0 <create_name>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d13a      	bne.n	800790c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fda0 	bl	80073dc <dir_find>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	7adb      	ldrb	r3, [r3, #11]
 80078aa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	d12b      	bne.n	8007910 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d126      	bne.n	8007910 <follow_path+0xdc>
 80078c2:	2305      	movs	r3, #5
 80078c4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80078c6:	e023      	b.n	8007910 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d120      	bne.n	8007914 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	330b      	adds	r3, #11
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80078ea:	2305      	movs	r3, #5
 80078ec:	73fb      	strb	r3, [r7, #15]
 80078ee:	e012      	b.n	8007916 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fd1a 	bl	8007334 <ld_clust>
 8007900:	4602      	mov	r2, r0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800790a:	e7ba      	b.n	8007882 <follow_path+0x4e>
			if (res != FR_OK) break;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <follow_path+0xe2>
				break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007914:	bf00      	nop
		}
	}

	return res;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d031      	beq.n	800799a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e002      	b.n	8007944 <get_ldnumber+0x24>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	3301      	adds	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b20      	cmp	r3, #32
 800794a:	d903      	bls.n	8007954 <get_ldnumber+0x34>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b3a      	cmp	r3, #58	; 0x3a
 8007952:	d1f4      	bne.n	800793e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b3a      	cmp	r3, #58	; 0x3a
 800795a:	d11c      	bne.n	8007996 <get_ldnumber+0x76>
			tp = *path;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	60fa      	str	r2, [r7, #12]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	3b30      	subs	r3, #48	; 0x30
 800796c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b09      	cmp	r3, #9
 8007972:	d80e      	bhi.n	8007992 <get_ldnumber+0x72>
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	429a      	cmp	r2, r3
 800797a:	d10a      	bne.n	8007992 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <get_ldnumber+0x72>
					vol = (int)i;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	3301      	adds	r3, #1
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	e002      	b.n	800799c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800799a:	693b      	ldr	r3, [r7, #16]
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
	...

080079a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b8:	2200      	movs	r2, #0
 80079ba:	711a      	strb	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c2:	461a      	mov	r2, r3
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fe fe5d 	bl	800668c <move_window>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <check_fs+0x34>
		return 3;
 80079d8:	2303      	movs	r3, #3
 80079da:	e04a      	b.n	8007a72 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079e2:	3301      	adds	r3, #1
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b21a      	sxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80079f0:	b21b      	sxth	r3, r3
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b21b      	sxth	r3, r3
 80079f6:	4a21      	ldr	r2, [pc, #132]	; (8007a7c <check_fs+0xd4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d001      	beq.n	8007a00 <check_fs+0x58>
		return 2;
 80079fc:	2302      	movs	r3, #2
 80079fe:	e038      	b.n	8007a72 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3336      	adds	r3, #54	; 0x36
 8007a04:	3303      	adds	r3, #3
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	061a      	lsls	r2, r3, #24
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3336      	adds	r3, #54	; 0x36
 8007a0e:	3302      	adds	r3, #2
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	4313      	orrs	r3, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	3236      	adds	r2, #54	; 0x36
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	0212      	lsls	r2, r2, #8
 8007a20:	4313      	orrs	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	4a14      	ldr	r2, [pc, #80]	; (8007a80 <check_fs+0xd8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d101      	bne.n	8007a38 <check_fs+0x90>
		return 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e01c      	b.n	8007a72 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3352      	adds	r3, #82	; 0x52
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	061a      	lsls	r2, r3, #24
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3352      	adds	r3, #82	; 0x52
 8007a46:	3302      	adds	r3, #2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	3252      	adds	r2, #82	; 0x52
 8007a52:	3201      	adds	r2, #1
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	0212      	lsls	r2, r2, #8
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <check_fs+0xd8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d101      	bne.n	8007a70 <check_fs+0xc8>
		return 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e000      	b.n	8007a72 <check_fs+0xca>

	return 1;
 8007a70:	2301      	movs	r3, #1
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	ffffaa55 	.word	0xffffaa55
 8007a80:	00544146 	.word	0x00544146

08007a84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b096      	sub	sp, #88	; 0x58
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a98:	68b8      	ldr	r0, [r7, #8]
 8007a9a:	f7ff ff41 	bl	8007920 <get_ldnumber>
 8007a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da01      	bge.n	8007aaa <find_volume+0x26>
 8007aa6:	230b      	movs	r3, #11
 8007aa8:	e311      	b.n	80080ce <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007aaa:	4a98      	ldr	r2, [pc, #608]	; (8007d0c <find_volume+0x288>)
 8007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <find_volume+0x3a>
 8007aba:	230c      	movs	r3, #12
 8007abc:	e307      	b.n	80080ce <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01c      	beq.n	8007b0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe faf5 	bl	80060c8 <disk_status>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <find_volume+0x82>
 8007af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b02:	230a      	movs	r3, #10
 8007b04:	e2e3      	b.n	80080ce <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007b06:	2300      	movs	r3, #0
 8007b08:	e2e1      	b.n	80080ce <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fae7 	bl	80060fc <disk_initialize>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b40:	2303      	movs	r3, #3
 8007b42:	e2c4      	b.n	80080ce <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <find_volume+0xd6>
 8007b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007b56:	230a      	movs	r3, #10
 8007b58:	e2b9      	b.n	80080ce <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b60:	7858      	ldrb	r0, [r3, #1]
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b68:	330a      	adds	r3, #10
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	f7fe fb2b 	bl	80061c8 <disk_ioctl>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10d      	bne.n	8007b94 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7e:	895b      	ldrh	r3, [r3, #10]
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b84:	d306      	bcc.n	8007b94 <find_volume+0x110>
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	895b      	ldrh	r3, [r3, #10]
 8007b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b92:	d901      	bls.n	8007b98 <find_volume+0x114>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e29a      	b.n	80080ce <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007b9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ba0:	f7ff ff02 	bl	80079a8 <check_fs>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d153      	bne.n	8007c5a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bb6:	e028      	b.n	8007c0a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bc2:	4413      	add	r3, r2
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	3304      	adds	r3, #4
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d012      	beq.n	8007bf6 <find_volume+0x172>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	330b      	adds	r3, #11
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	061a      	lsls	r2, r3, #24
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	330a      	adds	r3, #10
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	4313      	orrs	r3, r2
 8007be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be4:	3209      	adds	r2, #9
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	0212      	lsls	r2, r2, #8
 8007bea:	4313      	orrs	r3, r2
 8007bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bee:	3208      	adds	r2, #8
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	e000      	b.n	8007bf8 <find_volume+0x174>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	3358      	adds	r3, #88	; 0x58
 8007bfe:	443b      	add	r3, r7
 8007c00:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c06:	3301      	adds	r3, #1
 8007c08:	643b      	str	r3, [r7, #64]	; 0x40
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d9d3      	bls.n	8007bb8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007c10:	2300      	movs	r3, #0
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <find_volume+0x19c>
 8007c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	3358      	adds	r3, #88	; 0x58
 8007c26:	443b      	add	r3, r7
 8007c28:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c2c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <find_volume+0x1bc>
 8007c34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c38:	f7ff feb6 	bl	80079a8 <check_fs>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	e000      	b.n	8007c42 <find_volume+0x1be>
 8007c40:	2302      	movs	r3, #2
 8007c42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <find_volume+0x1d6>
 8007c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c50:	3301      	adds	r3, #1
 8007c52:	643b      	str	r3, [r7, #64]	; 0x40
 8007c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d9e2      	bls.n	8007c20 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d101      	bne.n	8007c66 <find_volume+0x1e2>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e233      	b.n	80080ce <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <find_volume+0x1ee>
 8007c6e:	230d      	movs	r3, #13
 8007c70:	e22d      	b.n	80080ce <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	7b1b      	ldrb	r3, [r3, #12]
 8007c76:	021b      	lsls	r3, r3, #8
 8007c78:	b21a      	sxth	r2, r3
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	7adb      	ldrb	r3, [r3, #11]
 8007c7e:	b21b      	sxth	r3, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b21a      	sxth	r2, r3
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	895b      	ldrh	r3, [r3, #10]
 8007c8c:	b21b      	sxth	r3, r3
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d001      	beq.n	8007c96 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007c92:	230d      	movs	r3, #13
 8007c94:	e21b      	b.n	80080ce <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	7ddb      	ldrb	r3, [r3, #23]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	b21a      	sxth	r2, r3
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	7d9b      	ldrb	r3, [r3, #22]
 8007ca2:	b21b      	sxth	r3, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d112      	bne.n	8007cd8 <find_volume+0x254>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007cb8:	061a      	lsls	r2, r3, #24
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007cca:	0212      	lsls	r2, r2, #8
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	7c1a      	ldrb	r2, [r3, #16]
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cee:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	78db      	ldrb	r3, [r3, #3]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d009      	beq.n	8007d10 <find_volume+0x28c>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d02:	78db      	ldrb	r3, [r3, #3]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d003      	beq.n	8007d10 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007d08:	230d      	movs	r3, #13
 8007d0a:	e1e0      	b.n	80080ce <find_volume+0x64a>
 8007d0c:	20001ac0 	.word	0x20001ac0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	7b5a      	ldrb	r2, [r3, #13]
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d34:	789b      	ldrb	r3, [r3, #2]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00c      	beq.n	8007d54 <find_volume+0x2d0>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	461a      	mov	r2, r3
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4a:	789b      	ldrb	r3, [r3, #2]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007d54:	230d      	movs	r3, #13
 8007d56:	e1ba      	b.n	80080ce <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	7c9b      	ldrb	r3, [r3, #18]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b21a      	sxth	r2, r3
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	7c5b      	ldrb	r3, [r3, #17]
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b21b      	sxth	r3, r3
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d72:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7a:	891b      	ldrh	r3, [r3, #8]
 8007d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d82:	8952      	ldrh	r2, [r2, #10]
 8007d84:	0952      	lsrs	r2, r2, #5
 8007d86:	b292      	uxth	r2, r2
 8007d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d8c:	fb01 f202 	mul.w	r2, r1, r2
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007d98:	230d      	movs	r3, #13
 8007d9a:	e198      	b.n	80080ce <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	7d1b      	ldrb	r3, [r3, #20]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	b21a      	sxth	r2, r3
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	7cdb      	ldrb	r3, [r3, #19]
 8007da8:	b21b      	sxth	r3, r3
 8007daa:	4313      	orrs	r3, r2
 8007dac:	b21b      	sxth	r3, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d112      	bne.n	8007dde <find_volume+0x35a>
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007dbe:	061a      	lsls	r2, r3, #24
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dcc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007dd0:	0212      	lsls	r2, r2, #8
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	7bdb      	ldrb	r3, [r3, #15]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	b21a      	sxth	r2, r3
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	7b9b      	ldrb	r3, [r3, #14]
 8007dea:	b21b      	sxth	r3, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b21b      	sxth	r3, r3
 8007df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <find_volume+0x378>
 8007df8:	230d      	movs	r3, #13
 8007dfa:	e168      	b.n	80080ce <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007dfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e00:	4413      	add	r3, r2
 8007e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e08:	8911      	ldrh	r1, [r2, #8]
 8007e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e10:	8952      	ldrh	r2, [r2, #10]
 8007e12:	0952      	lsrs	r2, r2, #5
 8007e14:	b292      	uxth	r2, r2
 8007e16:	fbb1 f2f2 	udiv	r2, r1, r2
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d201      	bcs.n	8007e2c <find_volume+0x3a8>
 8007e28:	230d      	movs	r3, #13
 8007e2a:	e150      	b.n	80080ce <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e38:	7892      	ldrb	r2, [r2, #2]
 8007e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <find_volume+0x3c6>
 8007e46:	230d      	movs	r3, #13
 8007e48:	e141      	b.n	80080ce <find_volume+0x64a>
	fmt = FS_FAT12;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d902      	bls.n	8007e60 <find_volume+0x3dc>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d902      	bls.n	8007e70 <find_volume+0x3ec>
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	3302      	adds	r3, #2
 8007e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e7a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e82:	461a      	mov	r2, r3
 8007e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e86:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007e88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	4413      	add	r3, r2
 8007e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e94:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007e96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	4413      	add	r3, r2
 8007e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ea2:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d124      	bne.n	8007ef6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	891b      	ldrh	r3, [r3, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <find_volume+0x438>
 8007eb8:	230d      	movs	r3, #13
 8007eba:	e108      	b.n	80080ce <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ec2:	061a      	lsls	r2, r3, #24
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007ed4:	0212      	lsls	r2, r2, #8
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eda:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ee6:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef4:	e02b      	b.n	8007f4e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efc:	891b      	ldrh	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <find_volume+0x482>
 8007f02:	230d      	movs	r3, #13
 8007f04:	e0e3      	b.n	80080ce <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f10:	4413      	add	r3, r2
 8007f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f18:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d105      	bne.n	8007f2e <find_volume+0x4aa>
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	e00e      	b.n	8007f4c <find_volume+0x4c8>
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	4613      	mov	r3, r2
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	4413      	add	r3, r2
 8007f3c:	085a      	lsrs	r2, r3, #1
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007f4c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5c:	895b      	ldrh	r3, [r3, #10]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f62:	440b      	add	r3, r1
 8007f64:	3b01      	subs	r3, #1
 8007f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f68:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007f6c:	8949      	ldrh	r1, [r1, #10]
 8007f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d201      	bcs.n	8007f7a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007f76:	230d      	movs	r3, #13
 8007f78:	e0a9      	b.n	80080ce <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f80:	461a      	mov	r2, r3
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	6113      	str	r3, [r2, #16]
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f96:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9e:	2280      	movs	r2, #128	; 0x80
 8007fa0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d17a      	bne.n	80080a0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b21a      	sxth	r2, r3
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fba:	b21b      	sxth	r3, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b21b      	sxth	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d16d      	bne.n	80080a0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fcc:	f7fe fb5e 	bl	800668c <move_window>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d164      	bne.n	80080a0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	2200      	movs	r2, #0
 8007fde:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b21a      	sxth	r2, r3
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007ff0:	b21b      	sxth	r3, r3
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	4a38      	ldr	r2, [pc, #224]	; (80080d8 <find_volume+0x654>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d151      	bne.n	80080a0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	78db      	ldrb	r3, [r3, #3]
 8008000:	061a      	lsls	r2, r3, #24
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	789b      	ldrb	r3, [r3, #2]
 8008006:	041b      	lsls	r3, r3, #16
 8008008:	4313      	orrs	r3, r2
 800800a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800800c:	7852      	ldrb	r2, [r2, #1]
 800800e:	0212      	lsls	r2, r2, #8
 8008010:	4313      	orrs	r3, r2
 8008012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	4313      	orrs	r3, r2
 8008018:	4a30      	ldr	r2, [pc, #192]	; (80080dc <find_volume+0x658>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d140      	bne.n	80080a0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008024:	061a      	lsls	r2, r3, #24
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	4313      	orrs	r3, r2
 8008030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008032:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008036:	0212      	lsls	r2, r2, #8
 8008038:	4313      	orrs	r3, r2
 800803a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008040:	4313      	orrs	r3, r2
 8008042:	4a27      	ldr	r2, [pc, #156]	; (80080e0 <find_volume+0x65c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d12b      	bne.n	80080a0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800804e:	061a      	lsls	r2, r3, #24
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	4313      	orrs	r3, r2
 800805a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008060:	0212      	lsls	r2, r2, #8
 8008062:	4313      	orrs	r3, r2
 8008064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008066:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800806a:	4313      	orrs	r3, r2
 800806c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008072:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800807a:	061a      	lsls	r2, r3, #24
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	4313      	orrs	r3, r2
 8008086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008088:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800808c:	0212      	lsls	r2, r2, #8
 800808e:	4313      	orrs	r3, r2
 8008090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008092:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008096:	4313      	orrs	r3, r2
 8008098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800809e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a6:	461a      	mov	r2, r3
 80080a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ac:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <find_volume+0x660>)
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <find_volume+0x660>)
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <find_volume+0x660>)
 80080bc:	881a      	ldrh	r2, [r3, #0]
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80080c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080c8:	f7fe fa64 	bl	8006594 <clear_lock>
#endif

	return FR_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3758      	adds	r7, #88	; 0x58
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	ffffaa55 	.word	0xffffaa55
 80080dc:	41615252 	.word	0x41615252
 80080e0:	61417272 	.word	0x61417272
 80080e4:	20001ac4 	.word	0x20001ac4

080080e8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d02a      	beq.n	8008150 <validate+0x68>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d024      	beq.n	8008150 <validate+0x68>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01b      	beq.n	8008150 <validate+0x68>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008124:	88da      	ldrh	r2, [r3, #6]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812c:	889b      	ldrh	r3, [r3, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d10e      	bne.n	8008150 <validate+0x68>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	4618      	mov	r0, r3
 8008142:	f7fd ffc1 	bl	80060c8 <disk_status>
 8008146:	4603      	mov	r3, r0
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008150:	2309      	movs	r3, #9
 8008152:	e000      	b.n	8008156 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008172:	f107 0310 	add.w	r3, r7, #16
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fbd2 	bl	8007920 <get_ldnumber>
 800817c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	da01      	bge.n	8008188 <f_mount+0x28>
 8008184:	230b      	movs	r3, #11
 8008186:	e02f      	b.n	80081e8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008188:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <f_mount+0x90>)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008190:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008198:	69b8      	ldr	r0, [r7, #24]
 800819a:	f7fe f9fb 	bl	8006594 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d004      	beq.n	80081b8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	2200      	movs	r2, #0
 80081b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	490d      	ldr	r1, [pc, #52]	; (80081f0 <f_mount+0x90>)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <f_mount+0x6e>
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d001      	beq.n	80081d2 <f_mount+0x72>
 80081ce:	2300      	movs	r3, #0
 80081d0:	e00a      	b.n	80081e8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80081d2:	f107 0108 	add.w	r1, r7, #8
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	2200      	movs	r2, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff fc51 	bl	8007a84 <find_volume>
 80081e2:	4603      	mov	r3, r0
 80081e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20001ac0 	.word	0x20001ac0

080081f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008202:	f843 0c44 	str.w	r0, [r3, #-68]
 8008206:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800820a:	f843 1c48 	str.w	r1, [r3, #-72]
 800820e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008212:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800821a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <f_open+0x32>
 8008222:	2309      	movs	r3, #9
 8008224:	e2e6      	b.n	80087f4 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 8008226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800822a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800822e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008232:	461a      	mov	r2, r3
 8008234:	2300      	movs	r3, #0
 8008236:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008238:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800823c:	461a      	mov	r2, r3
 800823e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008242:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800824e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008252:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	b2da      	uxtb	r2, r3
 800825c:	f107 0110 	add.w	r1, r7, #16
 8008260:	3908      	subs	r1, #8
 8008262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008266:	3b10      	subs	r3, #16
 8008268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fc09 	bl	8007a84 <find_volume>
 8008272:	4603      	mov	r3, r0
 8008274:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008278:	f102 020f 	add.w	r2, r2, #15
 800827c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800827e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008282:	f103 030f 	add.w	r3, r3, #15
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 82ae 	bne.w	80087ea <f_open+0x5f6>
		INIT_BUF(dj);
 800828e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008292:	461a      	mov	r2, r3
 8008294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008298:	3b1c      	subs	r3, #28
 800829a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800829e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082a2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80082a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082aa:	3b10      	subs	r3, #16
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fac0 	bl	8007834 <follow_path>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082ba:	f102 020f 	add.w	r2, r2, #15
 80082be:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80082c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082c4:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80082c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082cc:	f102 0208 	add.w	r2, r2, #8
 80082d0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082d6:	f103 030f 	add.w	r3, r3, #15
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d126      	bne.n	800832e <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 80082e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082e4:	f103 0308 	add.w	r3, r3, #8
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <f_open+0x108>
				res = FR_INVALID_NAME;
 80082ee:	2306      	movs	r3, #6
 80082f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082f4:	f102 020f 	add.w	r2, r2, #15
 80082f8:	7013      	strb	r3, [r2, #0]
 80082fa:	e018      	b.n	800832e <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008300:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008304:	f023 0301 	bic.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	bf14      	ite	ne
 800830c:	2301      	movne	r3, #1
 800830e:	2300      	moveq	r3, #0
 8008310:	b2db      	uxtb	r3, r3
 8008312:	461a      	mov	r2, r3
 8008314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008318:	3b10      	subs	r3, #16
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fd ffe9 	bl	80062f4 <chk_lock>
 8008322:	4603      	mov	r3, r0
 8008324:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008328:	f102 020f 	add.w	r2, r2, #15
 800832c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800832e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008332:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008336:	f003 031c 	and.w	r3, r3, #28
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8134 	beq.w	80085a8 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8008340:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008344:	f103 030f 	add.w	r3, r3, #15
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d02e      	beq.n	80083ac <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800834e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008352:	f103 030f 	add.w	r3, r3, #15
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b04      	cmp	r3, #4
 800835a:	d112      	bne.n	8008382 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800835c:	f7fe f83a 	bl	80063d4 <enq_lock>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <f_open+0x182>
 8008366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800836a:	3b10      	subs	r3, #16
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff f8ed 	bl	800754c <dir_register>
 8008372:	4603      	mov	r3, r0
 8008374:	e000      	b.n	8008378 <f_open+0x184>
 8008376:	2312      	movs	r3, #18
 8008378:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800837c:	f102 020f 	add.w	r2, r2, #15
 8008380:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008386:	461a      	mov	r2, r3
 8008388:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800838c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008390:	f043 0308 	orr.w	r3, r3, #8
 8008394:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8008398:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800839c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80083a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083a4:	f102 0208 	add.w	r2, r2, #8
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	e01f      	b.n	80083ec <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083b0:	f103 0308 	add.w	r3, r3, #8
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330b      	adds	r3, #11
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 0311 	and.w	r3, r3, #17
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d006      	beq.n	80083d0 <f_open+0x1dc>
					res = FR_DENIED;
 80083c2:	2307      	movs	r3, #7
 80083c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083c8:	f102 020f 	add.w	r2, r2, #15
 80083cc:	7013      	strb	r3, [r2, #0]
 80083ce:	e00d      	b.n	80083ec <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80083d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083d4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <f_open+0x1f8>
						res = FR_EXIST;
 80083e0:	2308      	movs	r3, #8
 80083e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083e6:	f102 020f 	add.w	r2, r2, #15
 80083ea:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80083ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083f0:	f103 030f 	add.w	r3, r3, #15
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f040 8108 	bne.w	800860c <f_open+0x418>
 80083fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008400:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80ff 	beq.w	800860c <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 800840e:	f7fd fd97 	bl	8005f40 <get_fattime>
 8008412:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008416:	f103 0304 	add.w	r3, r3, #4
 800841a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800841c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008420:	f103 0308 	add.w	r3, r3, #8
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	330e      	adds	r3, #14
 8008428:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800842c:	f102 0204 	add.w	r2, r2, #4
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800843a:	f103 0304 	add.w	r3, r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	b29a      	uxth	r2, r3
 8008446:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800844a:	f103 0308 	add.w	r3, r3, #8
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330f      	adds	r3, #15
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800845a:	f103 0304 	add.w	r3, r3, #4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	0c1a      	lsrs	r2, r3, #16
 8008462:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008466:	f103 0308 	add.w	r3, r3, #8
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3310      	adds	r3, #16
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008476:	f103 0304 	add.w	r3, r3, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	0e1a      	lsrs	r2, r3, #24
 800847e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008482:	f103 0308 	add.w	r3, r3, #8
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3311      	adds	r3, #17
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800848e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008492:	f103 0308 	add.w	r3, r3, #8
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330b      	adds	r3, #11
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800849e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084a2:	f103 0308 	add.w	r3, r3, #8
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	331c      	adds	r3, #28
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084b2:	f103 0308 	add.w	r3, r3, #8
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	331d      	adds	r3, #29
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c2:	f103 0308 	add.w	r3, r3, #8
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	331e      	adds	r3, #30
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084d2:	f103 0308 	add.w	r3, r3, #8
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	331f      	adds	r3, #31
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80084de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084e2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80084e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084ea:	f102 0208 	add.w	r2, r2, #8
 80084ee:	6811      	ldr	r1, [r2, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe ff1f 	bl	8007334 <ld_clust>
 80084f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084fa:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80084fc:	2100      	movs	r1, #0
 80084fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008502:	f103 0308 	add.w	r3, r3, #8
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	f7fe ff42 	bl	8007390 <st_clust>
				dj.fs->wflag = 1;
 800850c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008510:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008518:	2201      	movs	r2, #1
 800851a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800851c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d072      	beq.n	800860c <f_open+0x418>
					dw = dj.fs->winsect;
 8008526:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800852a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800852e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008538:	f102 0204 	add.w	r2, r2, #4
 800853c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800853e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008542:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008546:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800854a:	6811      	ldr	r1, [r2, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fb42 	bl	8006bd6 <remove_chain>
 8008552:	4603      	mov	r3, r0
 8008554:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008558:	f102 020f 	add.w	r2, r2, #15
 800855c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800855e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008562:	f103 030f 	add.w	r3, r3, #15
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d14f      	bne.n	800860c <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800856c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008570:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8008574:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3b01      	subs	r3, #1
 800857c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008580:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8008582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008586:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800858a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800858e:	f102 0204 	add.w	r2, r2, #4
 8008592:	6811      	ldr	r1, [r2, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe f879 	bl	800668c <move_window>
 800859a:	4603      	mov	r3, r0
 800859c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085a0:	f102 020f 	add.w	r2, r2, #15
 80085a4:	7013      	strb	r3, [r2, #0]
 80085a6:	e031      	b.n	800860c <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80085a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085ac:	f103 030f 	add.w	r3, r3, #15
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d12a      	bne.n	800860c <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80085b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085ba:	f103 0308 	add.w	r3, r3, #8
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330b      	adds	r3, #11
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 0310 	and.w	r3, r3, #16
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d006      	beq.n	80085da <f_open+0x3e6>
					res = FR_NO_FILE;
 80085cc:	2304      	movs	r3, #4
 80085ce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085d2:	f102 020f 	add.w	r2, r2, #15
 80085d6:	7013      	strb	r3, [r2, #0]
 80085d8:	e018      	b.n	800860c <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80085da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085de:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <f_open+0x418>
 80085ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085ee:	f103 0308 	add.w	r3, r3, #8
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	330b      	adds	r3, #11
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <f_open+0x418>
						res = FR_DENIED;
 8008600:	2307      	movs	r3, #7
 8008602:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008606:	f102 020f 	add.w	r2, r2, #15
 800860a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800860c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008610:	f103 030f 	add.w	r3, r3, #15
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d157      	bne.n	80086ca <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800861a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800861e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <f_open+0x44c>
				mode |= FA__WRITTEN;
 800862a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800862e:	461a      	mov	r2, r3
 8008630:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008634:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008640:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008644:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008652:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800865a:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800865c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008660:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008668:	461a      	mov	r2, r3
 800866a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800866e:	f103 0308 	add.w	r3, r3, #8
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800867a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	bf14      	ite	ne
 8008686:	2301      	movne	r3, #1
 8008688:	2300      	moveq	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008692:	3b10      	subs	r3, #16
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f7fd fec0 	bl	800641c <inc_lock>
 800869c:	4602      	mov	r2, r0
 800869e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80086ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086b0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <f_open+0x4d6>
 80086be:	2302      	movs	r3, #2
 80086c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086c4:	f102 020f 	add.w	r2, r2, #15
 80086c8:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80086ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086ce:	f103 030f 	add.w	r3, r3, #15
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 8088 	bne.w	80087ea <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 80086da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e6:	461a      	mov	r2, r3
 80086e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086ec:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80086f0:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80086f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	2200      	movs	r2, #0
 8008700:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008706:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800870a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800870e:	f102 0208 	add.w	r2, r2, #8
 8008712:	6811      	ldr	r1, [r2, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fe0d 	bl	8007334 <ld_clust>
 800871a:	4602      	mov	r2, r0
 800871c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008720:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008728:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800872a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800872e:	f103 0308 	add.w	r3, r3, #8
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	331f      	adds	r3, #31
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	061a      	lsls	r2, r3, #24
 800873a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800873e:	f103 0308 	add.w	r3, r3, #8
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	331e      	adds	r3, #30
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	041b      	lsls	r3, r3, #16
 800874a:	4313      	orrs	r3, r2
 800874c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008750:	f102 0208 	add.w	r2, r2, #8
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	321d      	adds	r2, #29
 8008758:	7812      	ldrb	r2, [r2, #0]
 800875a:	0212      	lsls	r2, r2, #8
 800875c:	4313      	orrs	r3, r2
 800875e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008762:	f102 0208 	add.w	r2, r2, #8
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	321c      	adds	r2, #28
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	4313      	orrs	r3, r2
 800876e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008772:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800877a:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800877c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008780:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008788:	461a      	mov	r2, r3
 800878a:	2300      	movs	r3, #0
 800878c:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800878e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008792:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879a:	461a      	mov	r2, r3
 800879c:	2300      	movs	r3, #0
 800879e:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80087a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087a4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ac:	461a      	mov	r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80087b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087b6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80087ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80087be:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80087c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087c6:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80087c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087cc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087da:	88da      	ldrh	r2, [r3, #6]
 80087dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80087ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80087ee:	f103 030f 	add.w	r3, r3, #15
 80087f2:	781b      	ldrb	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff fc65 	bl	80080e8 <validate>
 800881e:	4603      	mov	r3, r0
 8008820:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008822:	7ffb      	ldrb	r3, [r7, #31]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <f_read+0x2c>
 8008828:	7ffb      	ldrb	r3, [r7, #31]
 800882a:	e1cd      	b.n	8008bc8 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008832:	79db      	ldrb	r3, [r3, #7]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883e:	79db      	ldrb	r3, [r3, #7]
 8008840:	e1c2      	b.n	8008bc8 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	799b      	ldrb	r3, [r3, #6]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008852:	2307      	movs	r3, #7
 8008854:	e1b8      	b.n	8008bc8 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	429a      	cmp	r2, r3
 8008870:	f240 81a5 	bls.w	8008bbe <f_read+0x3be>
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008878:	e1a1      	b.n	8008bbe <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800888e:	8952      	ldrh	r2, [r2, #10]
 8008890:	fbb3 f1f2 	udiv	r1, r3, r2
 8008894:	fb01 f202 	mul.w	r2, r1, r2
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	f040 8140 	bne.w	8008b20 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088b4:	8952      	ldrh	r2, [r2, #10]
 80088b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4013      	ands	r3, r2
 80088d0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d143      	bne.n	8008960 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ee:	e01c      	b.n	800892a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	4619      	mov	r1, r3
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7fe fa6e 	bl	8006de8 <clmt_clust>
 800890c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800890e:	e00c      	b.n	800892a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f7fd ff08 	bl	8006738 <get_fat>
 8008928:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d806      	bhi.n	800893e <f_read+0x13e>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008936:	2202      	movs	r2, #2
 8008938:	71da      	strb	r2, [r3, #7]
 800893a:	2302      	movs	r3, #2
 800893c:	e144      	b.n	8008bc8 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d106      	bne.n	8008954 <f_read+0x154>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894c:	2201      	movs	r2, #1
 800894e:	71da      	strb	r2, [r3, #7]
 8008950:	2301      	movs	r3, #1
 8008952:	e139      	b.n	8008bc8 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895a:	461a      	mov	r2, r3
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f7fd febc 	bl	80066f0 <clust2sect>
 8008978:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <f_read+0x18e>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008986:	2202      	movs	r2, #2
 8008988:	71da      	strb	r2, [r3, #7]
 800898a:	2302      	movs	r3, #2
 800898c:	e11c      	b.n	8008bc8 <f_read+0x3c8>
			sect += csect;
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a2:	895b      	ldrh	r3, [r3, #10]
 80089a4:	461a      	mov	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d066      	beq.n	8008a82 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80089b4:	7dfa      	ldrb	r2, [r7, #23]
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	4413      	add	r3, r2
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089c6:	7892      	ldrb	r2, [r2, #2]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d90a      	bls.n	80089e2 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d8:	789b      	ldrb	r3, [r3, #2]
 80089da:	461a      	mov	r2, r3
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ee:	7858      	ldrb	r0, [r3, #1]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	6a39      	ldr	r1, [r7, #32]
 80089f6:	f7fd fba7 	bl	8006148 <disk_read>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a06:	2201      	movs	r2, #1
 8008a08:	71da      	strb	r2, [r3, #7]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e0dc      	b.n	8008bc8 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a14:	799b      	ldrb	r3, [r3, #6]
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d024      	beq.n	8008a68 <f_read+0x268>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d91b      	bls.n	8008a68 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a48:	8952      	ldrh	r2, [r2, #10]
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	18d0      	adds	r0, r2, r3
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a60:	895b      	ldrh	r3, [r3, #10]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7fd fbce 	bl	8006204 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8008a80:	e085      	b.n	8008b8e <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d041      	beq.n	8008b14 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a96:	799b      	ldrb	r3, [r3, #6]
 8008a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d023      	beq.n	8008ae8 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aac:	7858      	ldrb	r0, [r3, #1]
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f7fd fb65 	bl	8006188 <disk_write>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	2201      	movs	r2, #1
 8008acc:	71da      	strb	r2, [r3, #7]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e07a      	b.n	8008bc8 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	799b      	ldrb	r3, [r3, #6]
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af4:	7858      	ldrb	r0, [r3, #1]
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	2301      	movs	r3, #1
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	f7fd fb24 	bl	8006148 <disk_read>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d006      	beq.n	8008b14 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	71da      	strb	r2, [r3, #7]
 8008b10:	2301      	movs	r3, #1
 8008b12:	e059      	b.n	8008bc8 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2c:	895b      	ldrh	r3, [r3, #10]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b44:	8952      	ldrh	r2, [r2, #10]
 8008b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b4a:	fb01 f202 	mul.w	r2, r1, r2
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	1ac3      	subs	r3, r0, r3
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d901      	bls.n	8008b60 <f_read+0x360>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b74:	8952      	ldrh	r2, [r2, #10]
 8008b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b7a:	fb01 f202 	mul.w	r2, r1, r2
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b86:	4619      	mov	r1, r3
 8008b88:	6a38      	ldr	r0, [r7, #32]
 8008b8a:	f7fd fb3b 	bl	8006204 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b8e:	6a3a      	ldr	r2, [r7, #32]
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	4413      	add	r3, r2
 8008b94:	623b      	str	r3, [r7, #32]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	4413      	add	r3, r2
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ba8:	6093      	str	r3, [r2, #8]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	441a      	add	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f ae5a 	bne.w	800887a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3730      	adds	r7, #48	; 0x30
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <f_opendir+0x14>
 8008be0:	2309      	movs	r3, #9
 8008be2:	e083      	b.n	8008cec <f_opendir+0x11c>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008be4:	4639      	mov	r1, r7
 8008be6:	f107 0318 	add.w	r3, r7, #24
 8008bea:	2200      	movs	r2, #0
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe ff49 	bl	8007a84 <find_volume>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8008bf6:	7ffb      	ldrb	r3, [r7, #31]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d16d      	bne.n	8008cd8 <f_opendir+0x108>
		dp->fs = fs;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c04:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	6193      	str	r3, [r2, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fe fe0b 	bl	8007834 <follow_path>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8008c22:	7ffb      	ldrb	r3, [r7, #31]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d152      	bne.n	8008cce <f_opendir+0xfe>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01a      	beq.n	8008c6a <f_opendir+0x9a>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	330b      	adds	r3, #11
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00e      	beq.n	8008c66 <f_opendir+0x96>
					dp->sclust = ld_clust(fs, dp->dir);
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fe fb6d 	bl	8007334 <ld_clust>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	e001      	b.n	8008c6a <f_opendir+0x9a>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8008c66:	2305      	movs	r3, #5
 8008c68:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8008c6a:	7ffb      	ldrb	r3, [r7, #31]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d12e      	bne.n	8008cce <f_opendir+0xfe>
				dp->id = fs->id;
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c76:	88da      	ldrh	r2, [r3, #6]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fe f8f0 	bl	8006e68 <dir_sdi>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8008c8c:	7ffb      	ldrb	r3, [r7, #31]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d11d      	bne.n	8008cce <f_opendir+0xfe>
					if (dp->sclust) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d011      	beq.n	8008cc2 <f_opendir+0xf2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fd fbbb 	bl	800641c <inc_lock>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cae:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d108      	bne.n	8008cce <f_opendir+0xfe>
							res = FR_TOO_MANY_OPEN_FILES;
 8008cbc:	2312      	movs	r3, #18
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e005      	b.n	8008cce <f_opendir+0xfe>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008cce:	7ffb      	ldrb	r3, [r7, #31]
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d101      	bne.n	8008cd8 <f_opendir+0x108>
 8008cd4:	2305      	movs	r3, #5
 8008cd6:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8008cd8:	7ffb      	ldrb	r3, [r7, #31]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <f_opendir+0x11a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 8008cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff f9f2 	bl	80080e8 <validate>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d139      	bne.n	8008d82 <f_readdir+0x8e>
		if (!fno) {
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008d14:	2100      	movs	r1, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe f8a6 	bl	8006e68 <dir_sdi>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]
 8008d20:	e02f      	b.n	8008d82 <f_readdir+0x8e>
		} else {
			INIT_BUF(*dp);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	6193      	str	r3, [r2, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe fba5 	bl	8007482 <dir_read>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d107      	bne.n	8008d52 <f_readdir+0x5e>
				dp->sect = 0;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d114      	bne.n	8008d82 <f_readdir+0x8e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fe fc36 	bl	80075cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008d60:	2100      	movs	r1, #0
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7fe f94e 	bl	8007004 <dir_next>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d107      	bne.n	8008d82 <f_readdir+0x8e>
					dp->sect = 0;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008da2:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008da4:	7a5b      	ldrb	r3, [r3, #9]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d831      	bhi.n	8008e10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008dae:	7a5b      	ldrb	r3, [r3, #9]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008db6:	2100      	movs	r1, #0
 8008db8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008dba:	4b18      	ldr	r3, [pc, #96]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008dbc:	7a5b      	ldrb	r3, [r3, #9]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008dca:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008dcc:	7a5b      	ldrb	r3, [r3, #9]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008dd4:	4413      	add	r3, r2
 8008dd6:	79fa      	ldrb	r2, [r7, #7]
 8008dd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dda:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008ddc:	7a5b      	ldrb	r3, [r3, #9]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	b2d1      	uxtb	r1, r2
 8008de4:	4a0d      	ldr	r2, [pc, #52]	; (8008e1c <FATFS_LinkDriverEx+0x90>)
 8008de6:	7251      	strb	r1, [r2, #9]
 8008de8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dea:	7dbb      	ldrb	r3, [r7, #22]
 8008dec:	3330      	adds	r3, #48	; 0x30
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3301      	adds	r3, #1
 8008df8:	223a      	movs	r2, #58	; 0x3a
 8008dfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	3302      	adds	r3, #2
 8008e00:	222f      	movs	r2, #47	; 0x2f
 8008e02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3303      	adds	r3, #3
 8008e08:	2200      	movs	r2, #0
 8008e0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr
 8008e1c:	20001ae0 	.word	0x20001ae0

08008e20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff ffac 	bl	8008d8c <FATFS_LinkDriverEx>
 8008e34:	4603      	mov	r3, r0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <SD_initialize+0x38>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008e50:	f7fd f87e 	bl	8005f50 <BSP_SD_Init>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d107      	bne.n	8008e6a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <SD_initialize+0x38>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <SD_initialize+0x38>)
 8008e68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <SD_initialize+0x38>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b2db      	uxtb	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000009 	.word	0x20000009

08008e7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <SD_status+0x38>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008e8c:	f7fd f8c2 	bl	8006014 <BSP_SD_GetCardState>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d107      	bne.n	8008ea6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e96:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <SD_status+0x38>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <SD_status+0x38>)
 8008ea4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <SD_status+0x38>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000009 	.word	0x20000009

08008eb8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008ecc:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <SD_read+0x54>)
 8008ece:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <SD_read+0x58>)
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	6879      	ldr	r1, [r7, #4]
 8008ed6:	68b8      	ldr	r0, [r7, #8]
 8008ed8:	f7fd f860 	bl	8005f9c <BSP_SD_ReadBlocks>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10e      	bne.n	8008f00 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ee2:	e006      	b.n	8008ef2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1e5a      	subs	r2, r3, #1
 8008ee8:	613a      	str	r2, [r7, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <SD_read+0x3a>
      {
        return RES_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e007      	b.n	8008f02 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ef2:	f7fd f88f 	bl	8006014 <BSP_SD_GetCardState>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f3      	bne.n	8008ee4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	000186a0 	.word	0x000186a0
 8008f10:	05f5e100 	.word	0x05f5e100

08008f14 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <SD_write+0x54>)
 8008f2a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <SD_write+0x58>)
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	68b8      	ldr	r0, [r7, #8]
 8008f34:	f7fd f850 	bl	8005fd8 <BSP_SD_WriteBlocks>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10e      	bne.n	8008f5c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f3e:	e006      	b.n	8008f4e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	1e5a      	subs	r2, r3, #1
 8008f44:	613a      	str	r2, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <SD_write+0x3a>
      {
        return RES_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e007      	b.n	8008f5e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f4e:	f7fd f861 	bl	8006014 <BSP_SD_GetCardState>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f3      	bne.n	8008f40 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	000186a0 	.word	0x000186a0
 8008f6c:	05f5e100 	.word	0x05f5e100

08008f70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08c      	sub	sp, #48	; 0x30
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	603a      	str	r2, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f86:	4b24      	ldr	r3, [pc, #144]	; (8009018 <SD_ioctl+0xa8>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <SD_ioctl+0x28>
 8008f94:	2303      	movs	r3, #3
 8008f96:	e03b      	b.n	8009010 <SD_ioctl+0xa0>
  
  switch (cmd)
 8008f98:	79bb      	ldrb	r3, [r7, #6]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d833      	bhi.n	8009006 <SD_ioctl+0x96>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <SD_ioctl+0x34>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fbd 	.word	0x08008fbd
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fef 	.word	0x08008fef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fba:	e027      	b.n	800900c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fd f837 	bl	8006034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fd2:	e01b      	b.n	800900c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fd f82b 	bl	8006034 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fec:	e00e      	b.n	800900c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fee:	f107 030c 	add.w	r3, r7, #12
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd f81e 	bl	8006034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8008ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009004:	e002      	b.n	800900c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8009006:	2304      	movs	r3, #4
 8009008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800900c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009010:	4618      	mov	r0, r3
 8009012:	3730      	adds	r7, #48	; 0x30
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20000009 	.word	0x20000009

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	2600      	movs	r6, #0
 800902c:	4d0c      	ldr	r5, [pc, #48]	; (8009060 <__libc_init_array+0x38>)
 800902e:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 8009030:	1b64      	subs	r4, r4, r5
 8009032:	10a4      	asrs	r4, r4, #2
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	f000 fc9c 	bl	8009974 <_init>
 800903c:	2600      	movs	r6, #0
 800903e:	4d0a      	ldr	r5, [pc, #40]	; (8009068 <__libc_init_array+0x40>)
 8009040:	4c0a      	ldr	r4, [pc, #40]	; (800906c <__libc_init_array+0x44>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	0800a194 	.word	0x0800a194
 8009064:	0800a194 	.word	0x0800a194
 8009068:	0800a194 	.word	0x0800a194
 800906c:	0800a198 	.word	0x0800a198

08009070 <memset>:
 8009070:	4603      	mov	r3, r0
 8009072:	4402      	add	r2, r0
 8009074:	4293      	cmp	r3, r2
 8009076:	d100      	bne.n	800907a <memset+0xa>
 8009078:	4770      	bx	lr
 800907a:	f803 1b01 	strb.w	r1, [r3], #1
 800907e:	e7f9      	b.n	8009074 <memset+0x4>

08009080 <siprintf>:
 8009080:	b40e      	push	{r1, r2, r3}
 8009082:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009086:	b500      	push	{lr}
 8009088:	b09c      	sub	sp, #112	; 0x70
 800908a:	ab1d      	add	r3, sp, #116	; 0x74
 800908c:	9002      	str	r0, [sp, #8]
 800908e:	9006      	str	r0, [sp, #24]
 8009090:	9107      	str	r1, [sp, #28]
 8009092:	9104      	str	r1, [sp, #16]
 8009094:	4808      	ldr	r0, [pc, #32]	; (80090b8 <siprintf+0x38>)
 8009096:	4909      	ldr	r1, [pc, #36]	; (80090bc <siprintf+0x3c>)
 8009098:	f853 2b04 	ldr.w	r2, [r3], #4
 800909c:	9105      	str	r1, [sp, #20]
 800909e:	6800      	ldr	r0, [r0, #0]
 80090a0:	a902      	add	r1, sp, #8
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	f000 f868 	bl	8009178 <_svfiprintf_r>
 80090a8:	2200      	movs	r2, #0
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	b01c      	add	sp, #112	; 0x70
 80090b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b4:	b003      	add	sp, #12
 80090b6:	4770      	bx	lr
 80090b8:	2000000c 	.word	0x2000000c
 80090bc:	ffff0208 	.word	0xffff0208

080090c0 <__ssputs_r>:
 80090c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	688e      	ldr	r6, [r1, #8]
 80090c6:	4682      	mov	sl, r0
 80090c8:	429e      	cmp	r6, r3
 80090ca:	460c      	mov	r4, r1
 80090cc:	4690      	mov	r8, r2
 80090ce:	461f      	mov	r7, r3
 80090d0:	d838      	bhi.n	8009144 <__ssputs_r+0x84>
 80090d2:	898a      	ldrh	r2, [r1, #12]
 80090d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090d8:	d032      	beq.n	8009140 <__ssputs_r+0x80>
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	6909      	ldr	r1, [r1, #16]
 80090de:	3301      	adds	r3, #1
 80090e0:	eba5 0901 	sub.w	r9, r5, r1
 80090e4:	6965      	ldr	r5, [r4, #20]
 80090e6:	444b      	add	r3, r9
 80090e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090f0:	106d      	asrs	r5, r5, #1
 80090f2:	429d      	cmp	r5, r3
 80090f4:	bf38      	it	cc
 80090f6:	461d      	movcc	r5, r3
 80090f8:	0553      	lsls	r3, r2, #21
 80090fa:	d531      	bpl.n	8009160 <__ssputs_r+0xa0>
 80090fc:	4629      	mov	r1, r5
 80090fe:	f000 fb6f 	bl	80097e0 <_malloc_r>
 8009102:	4606      	mov	r6, r0
 8009104:	b950      	cbnz	r0, 800911c <__ssputs_r+0x5c>
 8009106:	230c      	movs	r3, #12
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	f8ca 3000 	str.w	r3, [sl]
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911c:	464a      	mov	r2, r9
 800911e:	6921      	ldr	r1, [r4, #16]
 8009120:	f000 face 	bl	80096c0 <memcpy>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800912a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	6126      	str	r6, [r4, #16]
 8009132:	444e      	add	r6, r9
 8009134:	6026      	str	r6, [r4, #0]
 8009136:	463e      	mov	r6, r7
 8009138:	6165      	str	r5, [r4, #20]
 800913a:	eba5 0509 	sub.w	r5, r5, r9
 800913e:	60a5      	str	r5, [r4, #8]
 8009140:	42be      	cmp	r6, r7
 8009142:	d900      	bls.n	8009146 <__ssputs_r+0x86>
 8009144:	463e      	mov	r6, r7
 8009146:	4632      	mov	r2, r6
 8009148:	4641      	mov	r1, r8
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	f000 fac6 	bl	80096dc <memmove>
 8009150:	68a3      	ldr	r3, [r4, #8]
 8009152:	2000      	movs	r0, #0
 8009154:	1b9b      	subs	r3, r3, r6
 8009156:	60a3      	str	r3, [r4, #8]
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	4433      	add	r3, r6
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	e7db      	b.n	8009118 <__ssputs_r+0x58>
 8009160:	462a      	mov	r2, r5
 8009162:	f000 fbb1 	bl	80098c8 <_realloc_r>
 8009166:	4606      	mov	r6, r0
 8009168:	2800      	cmp	r0, #0
 800916a:	d1e1      	bne.n	8009130 <__ssputs_r+0x70>
 800916c:	4650      	mov	r0, sl
 800916e:	6921      	ldr	r1, [r4, #16]
 8009170:	f000 face 	bl	8009710 <_free_r>
 8009174:	e7c7      	b.n	8009106 <__ssputs_r+0x46>
	...

08009178 <_svfiprintf_r>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	4698      	mov	r8, r3
 800917e:	898b      	ldrh	r3, [r1, #12]
 8009180:	4607      	mov	r7, r0
 8009182:	061b      	lsls	r3, r3, #24
 8009184:	460d      	mov	r5, r1
 8009186:	4614      	mov	r4, r2
 8009188:	b09d      	sub	sp, #116	; 0x74
 800918a:	d50e      	bpl.n	80091aa <_svfiprintf_r+0x32>
 800918c:	690b      	ldr	r3, [r1, #16]
 800918e:	b963      	cbnz	r3, 80091aa <_svfiprintf_r+0x32>
 8009190:	2140      	movs	r1, #64	; 0x40
 8009192:	f000 fb25 	bl	80097e0 <_malloc_r>
 8009196:	6028      	str	r0, [r5, #0]
 8009198:	6128      	str	r0, [r5, #16]
 800919a:	b920      	cbnz	r0, 80091a6 <_svfiprintf_r+0x2e>
 800919c:	230c      	movs	r3, #12
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	e0d1      	b.n	800934a <_svfiprintf_r+0x1d2>
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	616b      	str	r3, [r5, #20]
 80091aa:	2300      	movs	r3, #0
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	2320      	movs	r3, #32
 80091b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b4:	2330      	movs	r3, #48	; 0x30
 80091b6:	f04f 0901 	mov.w	r9, #1
 80091ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80091be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009364 <_svfiprintf_r+0x1ec>
 80091c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c6:	4623      	mov	r3, r4
 80091c8:	469a      	mov	sl, r3
 80091ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ce:	b10a      	cbz	r2, 80091d4 <_svfiprintf_r+0x5c>
 80091d0:	2a25      	cmp	r2, #37	; 0x25
 80091d2:	d1f9      	bne.n	80091c8 <_svfiprintf_r+0x50>
 80091d4:	ebba 0b04 	subs.w	fp, sl, r4
 80091d8:	d00b      	beq.n	80091f2 <_svfiprintf_r+0x7a>
 80091da:	465b      	mov	r3, fp
 80091dc:	4622      	mov	r2, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff ff6d 	bl	80090c0 <__ssputs_r>
 80091e6:	3001      	adds	r0, #1
 80091e8:	f000 80aa 	beq.w	8009340 <_svfiprintf_r+0x1c8>
 80091ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ee:	445a      	add	r2, fp
 80091f0:	9209      	str	r2, [sp, #36]	; 0x24
 80091f2:	f89a 3000 	ldrb.w	r3, [sl]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 80a2 	beq.w	8009340 <_svfiprintf_r+0x1c8>
 80091fc:	2300      	movs	r3, #0
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009206:	f10a 0a01 	add.w	sl, sl, #1
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	9307      	str	r3, [sp, #28]
 800920e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009212:	931a      	str	r3, [sp, #104]	; 0x68
 8009214:	4654      	mov	r4, sl
 8009216:	2205      	movs	r2, #5
 8009218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921c:	4851      	ldr	r0, [pc, #324]	; (8009364 <_svfiprintf_r+0x1ec>)
 800921e:	f000 fa41 	bl	80096a4 <memchr>
 8009222:	9a04      	ldr	r2, [sp, #16]
 8009224:	b9d8      	cbnz	r0, 800925e <_svfiprintf_r+0xe6>
 8009226:	06d0      	lsls	r0, r2, #27
 8009228:	bf44      	itt	mi
 800922a:	2320      	movmi	r3, #32
 800922c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009230:	0711      	lsls	r1, r2, #28
 8009232:	bf44      	itt	mi
 8009234:	232b      	movmi	r3, #43	; 0x2b
 8009236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800923a:	f89a 3000 	ldrb.w	r3, [sl]
 800923e:	2b2a      	cmp	r3, #42	; 0x2a
 8009240:	d015      	beq.n	800926e <_svfiprintf_r+0xf6>
 8009242:	4654      	mov	r4, sl
 8009244:	2000      	movs	r0, #0
 8009246:	f04f 0c0a 	mov.w	ip, #10
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	4621      	mov	r1, r4
 800924e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009252:	3b30      	subs	r3, #48	; 0x30
 8009254:	2b09      	cmp	r3, #9
 8009256:	d94e      	bls.n	80092f6 <_svfiprintf_r+0x17e>
 8009258:	b1b0      	cbz	r0, 8009288 <_svfiprintf_r+0x110>
 800925a:	9207      	str	r2, [sp, #28]
 800925c:	e014      	b.n	8009288 <_svfiprintf_r+0x110>
 800925e:	eba0 0308 	sub.w	r3, r0, r8
 8009262:	fa09 f303 	lsl.w	r3, r9, r3
 8009266:	4313      	orrs	r3, r2
 8009268:	46a2      	mov	sl, r4
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	e7d2      	b.n	8009214 <_svfiprintf_r+0x9c>
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	1d19      	adds	r1, r3, #4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	9103      	str	r1, [sp, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	bfbb      	ittet	lt
 800927a:	425b      	neglt	r3, r3
 800927c:	f042 0202 	orrlt.w	r2, r2, #2
 8009280:	9307      	strge	r3, [sp, #28]
 8009282:	9307      	strlt	r3, [sp, #28]
 8009284:	bfb8      	it	lt
 8009286:	9204      	strlt	r2, [sp, #16]
 8009288:	7823      	ldrb	r3, [r4, #0]
 800928a:	2b2e      	cmp	r3, #46	; 0x2e
 800928c:	d10c      	bne.n	80092a8 <_svfiprintf_r+0x130>
 800928e:	7863      	ldrb	r3, [r4, #1]
 8009290:	2b2a      	cmp	r3, #42	; 0x2a
 8009292:	d135      	bne.n	8009300 <_svfiprintf_r+0x188>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	3402      	adds	r4, #2
 8009298:	1d1a      	adds	r2, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9203      	str	r2, [sp, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfb8      	it	lt
 80092a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80092a6:	9305      	str	r3, [sp, #20]
 80092a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009368 <_svfiprintf_r+0x1f0>
 80092ac:	2203      	movs	r2, #3
 80092ae:	4650      	mov	r0, sl
 80092b0:	7821      	ldrb	r1, [r4, #0]
 80092b2:	f000 f9f7 	bl	80096a4 <memchr>
 80092b6:	b140      	cbz	r0, 80092ca <_svfiprintf_r+0x152>
 80092b8:	2340      	movs	r3, #64	; 0x40
 80092ba:	eba0 000a 	sub.w	r0, r0, sl
 80092be:	fa03 f000 	lsl.w	r0, r3, r0
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	3401      	adds	r4, #1
 80092c6:	4303      	orrs	r3, r0
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ce:	2206      	movs	r2, #6
 80092d0:	4826      	ldr	r0, [pc, #152]	; (800936c <_svfiprintf_r+0x1f4>)
 80092d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d6:	f000 f9e5 	bl	80096a4 <memchr>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d038      	beq.n	8009350 <_svfiprintf_r+0x1d8>
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <_svfiprintf_r+0x1f8>)
 80092e0:	bb1b      	cbnz	r3, 800932a <_svfiprintf_r+0x1b2>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	3307      	adds	r3, #7
 80092e6:	f023 0307 	bic.w	r3, r3, #7
 80092ea:	3308      	adds	r3, #8
 80092ec:	9303      	str	r3, [sp, #12]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	4433      	add	r3, r6
 80092f2:	9309      	str	r3, [sp, #36]	; 0x24
 80092f4:	e767      	b.n	80091c6 <_svfiprintf_r+0x4e>
 80092f6:	460c      	mov	r4, r1
 80092f8:	2001      	movs	r0, #1
 80092fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092fe:	e7a5      	b.n	800924c <_svfiprintf_r+0xd4>
 8009300:	2300      	movs	r3, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	4619      	mov	r1, r3
 8009308:	3401      	adds	r4, #1
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	4620      	mov	r0, r4
 800930e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009312:	3a30      	subs	r2, #48	; 0x30
 8009314:	2a09      	cmp	r2, #9
 8009316:	d903      	bls.n	8009320 <_svfiprintf_r+0x1a8>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0c5      	beq.n	80092a8 <_svfiprintf_r+0x130>
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	e7c3      	b.n	80092a8 <_svfiprintf_r+0x130>
 8009320:	4604      	mov	r4, r0
 8009322:	2301      	movs	r3, #1
 8009324:	fb0c 2101 	mla	r1, ip, r1, r2
 8009328:	e7f0      	b.n	800930c <_svfiprintf_r+0x194>
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4638      	mov	r0, r7
 8009332:	4b10      	ldr	r3, [pc, #64]	; (8009374 <_svfiprintf_r+0x1fc>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	f3af 8000 	nop.w
 800933a:	1c42      	adds	r2, r0, #1
 800933c:	4606      	mov	r6, r0
 800933e:	d1d6      	bne.n	80092ee <_svfiprintf_r+0x176>
 8009340:	89ab      	ldrh	r3, [r5, #12]
 8009342:	065b      	lsls	r3, r3, #25
 8009344:	f53f af2c 	bmi.w	80091a0 <_svfiprintf_r+0x28>
 8009348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800934a:	b01d      	add	sp, #116	; 0x74
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	ab03      	add	r3, sp, #12
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	462a      	mov	r2, r5
 8009356:	4638      	mov	r0, r7
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <_svfiprintf_r+0x1fc>)
 800935a:	a904      	add	r1, sp, #16
 800935c:	f000 f87c 	bl	8009458 <_printf_i>
 8009360:	e7eb      	b.n	800933a <_svfiprintf_r+0x1c2>
 8009362:	bf00      	nop
 8009364:	0800a160 	.word	0x0800a160
 8009368:	0800a166 	.word	0x0800a166
 800936c:	0800a16a 	.word	0x0800a16a
 8009370:	00000000 	.word	0x00000000
 8009374:	080090c1 	.word	0x080090c1

08009378 <_printf_common>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	4616      	mov	r6, r2
 800937e:	4699      	mov	r9, r3
 8009380:	688a      	ldr	r2, [r1, #8]
 8009382:	690b      	ldr	r3, [r1, #16]
 8009384:	4607      	mov	r7, r0
 8009386:	4293      	cmp	r3, r2
 8009388:	bfb8      	it	lt
 800938a:	4613      	movlt	r3, r2
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009392:	460c      	mov	r4, r1
 8009394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009398:	b10a      	cbz	r2, 800939e <_printf_common+0x26>
 800939a:	3301      	adds	r3, #1
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	0699      	lsls	r1, r3, #26
 80093a2:	bf42      	ittt	mi
 80093a4:	6833      	ldrmi	r3, [r6, #0]
 80093a6:	3302      	addmi	r3, #2
 80093a8:	6033      	strmi	r3, [r6, #0]
 80093aa:	6825      	ldr	r5, [r4, #0]
 80093ac:	f015 0506 	ands.w	r5, r5, #6
 80093b0:	d106      	bne.n	80093c0 <_printf_common+0x48>
 80093b2:	f104 0a19 	add.w	sl, r4, #25
 80093b6:	68e3      	ldr	r3, [r4, #12]
 80093b8:	6832      	ldr	r2, [r6, #0]
 80093ba:	1a9b      	subs	r3, r3, r2
 80093bc:	42ab      	cmp	r3, r5
 80093be:	dc28      	bgt.n	8009412 <_printf_common+0x9a>
 80093c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c4:	1e13      	subs	r3, r2, #0
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	bf18      	it	ne
 80093ca:	2301      	movne	r3, #1
 80093cc:	0692      	lsls	r2, r2, #26
 80093ce:	d42d      	bmi.n	800942c <_printf_common+0xb4>
 80093d0:	4649      	mov	r1, r9
 80093d2:	4638      	mov	r0, r7
 80093d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d8:	47c0      	blx	r8
 80093da:	3001      	adds	r0, #1
 80093dc:	d020      	beq.n	8009420 <_printf_common+0xa8>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	68e5      	ldr	r5, [r4, #12]
 80093e2:	f003 0306 	and.w	r3, r3, #6
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	bf18      	it	ne
 80093ea:	2500      	movne	r5, #0
 80093ec:	6832      	ldr	r2, [r6, #0]
 80093ee:	f04f 0600 	mov.w	r6, #0
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	bf08      	it	eq
 80093f6:	1aad      	subeq	r5, r5, r2
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	bf08      	it	eq
 80093fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009400:	4293      	cmp	r3, r2
 8009402:	bfc4      	itt	gt
 8009404:	1a9b      	subgt	r3, r3, r2
 8009406:	18ed      	addgt	r5, r5, r3
 8009408:	341a      	adds	r4, #26
 800940a:	42b5      	cmp	r5, r6
 800940c:	d11a      	bne.n	8009444 <_printf_common+0xcc>
 800940e:	2000      	movs	r0, #0
 8009410:	e008      	b.n	8009424 <_printf_common+0xac>
 8009412:	2301      	movs	r3, #1
 8009414:	4652      	mov	r2, sl
 8009416:	4649      	mov	r1, r9
 8009418:	4638      	mov	r0, r7
 800941a:	47c0      	blx	r8
 800941c:	3001      	adds	r0, #1
 800941e:	d103      	bne.n	8009428 <_printf_common+0xb0>
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	3501      	adds	r5, #1
 800942a:	e7c4      	b.n	80093b6 <_printf_common+0x3e>
 800942c:	2030      	movs	r0, #48	; 0x30
 800942e:	18e1      	adds	r1, r4, r3
 8009430:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800943a:	4422      	add	r2, r4
 800943c:	3302      	adds	r3, #2
 800943e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009442:	e7c5      	b.n	80093d0 <_printf_common+0x58>
 8009444:	2301      	movs	r3, #1
 8009446:	4622      	mov	r2, r4
 8009448:	4649      	mov	r1, r9
 800944a:	4638      	mov	r0, r7
 800944c:	47c0      	blx	r8
 800944e:	3001      	adds	r0, #1
 8009450:	d0e6      	beq.n	8009420 <_printf_common+0xa8>
 8009452:	3601      	adds	r6, #1
 8009454:	e7d9      	b.n	800940a <_printf_common+0x92>
	...

08009458 <_printf_i>:
 8009458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	7e0f      	ldrb	r7, [r1, #24]
 800945e:	4691      	mov	r9, r2
 8009460:	2f78      	cmp	r7, #120	; 0x78
 8009462:	4680      	mov	r8, r0
 8009464:	460c      	mov	r4, r1
 8009466:	469a      	mov	sl, r3
 8009468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800946a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800946e:	d807      	bhi.n	8009480 <_printf_i+0x28>
 8009470:	2f62      	cmp	r7, #98	; 0x62
 8009472:	d80a      	bhi.n	800948a <_printf_i+0x32>
 8009474:	2f00      	cmp	r7, #0
 8009476:	f000 80d9 	beq.w	800962c <_printf_i+0x1d4>
 800947a:	2f58      	cmp	r7, #88	; 0x58
 800947c:	f000 80a4 	beq.w	80095c8 <_printf_i+0x170>
 8009480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009488:	e03a      	b.n	8009500 <_printf_i+0xa8>
 800948a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800948e:	2b15      	cmp	r3, #21
 8009490:	d8f6      	bhi.n	8009480 <_printf_i+0x28>
 8009492:	a101      	add	r1, pc, #4	; (adr r1, 8009498 <_printf_i+0x40>)
 8009494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009498:	080094f1 	.word	0x080094f1
 800949c:	08009505 	.word	0x08009505
 80094a0:	08009481 	.word	0x08009481
 80094a4:	08009481 	.word	0x08009481
 80094a8:	08009481 	.word	0x08009481
 80094ac:	08009481 	.word	0x08009481
 80094b0:	08009505 	.word	0x08009505
 80094b4:	08009481 	.word	0x08009481
 80094b8:	08009481 	.word	0x08009481
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009613 	.word	0x08009613
 80094c8:	08009535 	.word	0x08009535
 80094cc:	080095f5 	.word	0x080095f5
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009635 	.word	0x08009635
 80094dc:	08009481 	.word	0x08009481
 80094e0:	08009535 	.word	0x08009535
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095fd 	.word	0x080095fd
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	602a      	str	r2, [r5, #0]
 80094f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009500:	2301      	movs	r3, #1
 8009502:	e0a4      	b.n	800964e <_printf_i+0x1f6>
 8009504:	6820      	ldr	r0, [r4, #0]
 8009506:	6829      	ldr	r1, [r5, #0]
 8009508:	0606      	lsls	r6, r0, #24
 800950a:	f101 0304 	add.w	r3, r1, #4
 800950e:	d50a      	bpl.n	8009526 <_printf_i+0xce>
 8009510:	680e      	ldr	r6, [r1, #0]
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	2e00      	cmp	r6, #0
 8009516:	da03      	bge.n	8009520 <_printf_i+0xc8>
 8009518:	232d      	movs	r3, #45	; 0x2d
 800951a:	4276      	negs	r6, r6
 800951c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009520:	230a      	movs	r3, #10
 8009522:	485e      	ldr	r0, [pc, #376]	; (800969c <_printf_i+0x244>)
 8009524:	e019      	b.n	800955a <_printf_i+0x102>
 8009526:	680e      	ldr	r6, [r1, #0]
 8009528:	f010 0f40 	tst.w	r0, #64	; 0x40
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	bf18      	it	ne
 8009530:	b236      	sxthne	r6, r6
 8009532:	e7ef      	b.n	8009514 <_printf_i+0xbc>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	1d19      	adds	r1, r3, #4
 800953a:	6029      	str	r1, [r5, #0]
 800953c:	0601      	lsls	r1, r0, #24
 800953e:	d501      	bpl.n	8009544 <_printf_i+0xec>
 8009540:	681e      	ldr	r6, [r3, #0]
 8009542:	e002      	b.n	800954a <_printf_i+0xf2>
 8009544:	0646      	lsls	r6, r0, #25
 8009546:	d5fb      	bpl.n	8009540 <_printf_i+0xe8>
 8009548:	881e      	ldrh	r6, [r3, #0]
 800954a:	2f6f      	cmp	r7, #111	; 0x6f
 800954c:	bf0c      	ite	eq
 800954e:	2308      	moveq	r3, #8
 8009550:	230a      	movne	r3, #10
 8009552:	4852      	ldr	r0, [pc, #328]	; (800969c <_printf_i+0x244>)
 8009554:	2100      	movs	r1, #0
 8009556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800955a:	6865      	ldr	r5, [r4, #4]
 800955c:	2d00      	cmp	r5, #0
 800955e:	bfa8      	it	ge
 8009560:	6821      	ldrge	r1, [r4, #0]
 8009562:	60a5      	str	r5, [r4, #8]
 8009564:	bfa4      	itt	ge
 8009566:	f021 0104 	bicge.w	r1, r1, #4
 800956a:	6021      	strge	r1, [r4, #0]
 800956c:	b90e      	cbnz	r6, 8009572 <_printf_i+0x11a>
 800956e:	2d00      	cmp	r5, #0
 8009570:	d04d      	beq.n	800960e <_printf_i+0x1b6>
 8009572:	4615      	mov	r5, r2
 8009574:	fbb6 f1f3 	udiv	r1, r6, r3
 8009578:	fb03 6711 	mls	r7, r3, r1, r6
 800957c:	5dc7      	ldrb	r7, [r0, r7]
 800957e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009582:	4637      	mov	r7, r6
 8009584:	42bb      	cmp	r3, r7
 8009586:	460e      	mov	r6, r1
 8009588:	d9f4      	bls.n	8009574 <_printf_i+0x11c>
 800958a:	2b08      	cmp	r3, #8
 800958c:	d10b      	bne.n	80095a6 <_printf_i+0x14e>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	07de      	lsls	r6, r3, #31
 8009592:	d508      	bpl.n	80095a6 <_printf_i+0x14e>
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	6861      	ldr	r1, [r4, #4]
 8009598:	4299      	cmp	r1, r3
 800959a:	bfde      	ittt	le
 800959c:	2330      	movle	r3, #48	; 0x30
 800959e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095a6:	1b52      	subs	r2, r2, r5
 80095a8:	6122      	str	r2, [r4, #16]
 80095aa:	464b      	mov	r3, r9
 80095ac:	4621      	mov	r1, r4
 80095ae:	4640      	mov	r0, r8
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	aa03      	add	r2, sp, #12
 80095b6:	f7ff fedf 	bl	8009378 <_printf_common>
 80095ba:	3001      	adds	r0, #1
 80095bc:	d14c      	bne.n	8009658 <_printf_i+0x200>
 80095be:	f04f 30ff 	mov.w	r0, #4294967295
 80095c2:	b004      	add	sp, #16
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	4834      	ldr	r0, [pc, #208]	; (800969c <_printf_i+0x244>)
 80095ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095ce:	6829      	ldr	r1, [r5, #0]
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80095d6:	6029      	str	r1, [r5, #0]
 80095d8:	061d      	lsls	r5, r3, #24
 80095da:	d514      	bpl.n	8009606 <_printf_i+0x1ae>
 80095dc:	07df      	lsls	r7, r3, #31
 80095de:	bf44      	itt	mi
 80095e0:	f043 0320 	orrmi.w	r3, r3, #32
 80095e4:	6023      	strmi	r3, [r4, #0]
 80095e6:	b91e      	cbnz	r6, 80095f0 <_printf_i+0x198>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	f023 0320 	bic.w	r3, r3, #32
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	2310      	movs	r3, #16
 80095f2:	e7af      	b.n	8009554 <_printf_i+0xfc>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	f043 0320 	orr.w	r3, r3, #32
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	2378      	movs	r3, #120	; 0x78
 80095fe:	4828      	ldr	r0, [pc, #160]	; (80096a0 <_printf_i+0x248>)
 8009600:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009604:	e7e3      	b.n	80095ce <_printf_i+0x176>
 8009606:	0659      	lsls	r1, r3, #25
 8009608:	bf48      	it	mi
 800960a:	b2b6      	uxthmi	r6, r6
 800960c:	e7e6      	b.n	80095dc <_printf_i+0x184>
 800960e:	4615      	mov	r5, r2
 8009610:	e7bb      	b.n	800958a <_printf_i+0x132>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	6826      	ldr	r6, [r4, #0]
 8009616:	1d18      	adds	r0, r3, #4
 8009618:	6961      	ldr	r1, [r4, #20]
 800961a:	6028      	str	r0, [r5, #0]
 800961c:	0635      	lsls	r5, r6, #24
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	d501      	bpl.n	8009626 <_printf_i+0x1ce>
 8009622:	6019      	str	r1, [r3, #0]
 8009624:	e002      	b.n	800962c <_printf_i+0x1d4>
 8009626:	0670      	lsls	r0, r6, #25
 8009628:	d5fb      	bpl.n	8009622 <_printf_i+0x1ca>
 800962a:	8019      	strh	r1, [r3, #0]
 800962c:	2300      	movs	r3, #0
 800962e:	4615      	mov	r5, r2
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	e7ba      	b.n	80095aa <_printf_i+0x152>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	2100      	movs	r1, #0
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	681d      	ldr	r5, [r3, #0]
 800963e:	6862      	ldr	r2, [r4, #4]
 8009640:	4628      	mov	r0, r5
 8009642:	f000 f82f 	bl	80096a4 <memchr>
 8009646:	b108      	cbz	r0, 800964c <_printf_i+0x1f4>
 8009648:	1b40      	subs	r0, r0, r5
 800964a:	6060      	str	r0, [r4, #4]
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	6123      	str	r3, [r4, #16]
 8009650:	2300      	movs	r3, #0
 8009652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009656:	e7a8      	b.n	80095aa <_printf_i+0x152>
 8009658:	462a      	mov	r2, r5
 800965a:	4649      	mov	r1, r9
 800965c:	4640      	mov	r0, r8
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	47d0      	blx	sl
 8009662:	3001      	adds	r0, #1
 8009664:	d0ab      	beq.n	80095be <_printf_i+0x166>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	079b      	lsls	r3, r3, #30
 800966a:	d413      	bmi.n	8009694 <_printf_i+0x23c>
 800966c:	68e0      	ldr	r0, [r4, #12]
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	4298      	cmp	r0, r3
 8009672:	bfb8      	it	lt
 8009674:	4618      	movlt	r0, r3
 8009676:	e7a4      	b.n	80095c2 <_printf_i+0x16a>
 8009678:	2301      	movs	r3, #1
 800967a:	4632      	mov	r2, r6
 800967c:	4649      	mov	r1, r9
 800967e:	4640      	mov	r0, r8
 8009680:	47d0      	blx	sl
 8009682:	3001      	adds	r0, #1
 8009684:	d09b      	beq.n	80095be <_printf_i+0x166>
 8009686:	3501      	adds	r5, #1
 8009688:	68e3      	ldr	r3, [r4, #12]
 800968a:	9903      	ldr	r1, [sp, #12]
 800968c:	1a5b      	subs	r3, r3, r1
 800968e:	42ab      	cmp	r3, r5
 8009690:	dcf2      	bgt.n	8009678 <_printf_i+0x220>
 8009692:	e7eb      	b.n	800966c <_printf_i+0x214>
 8009694:	2500      	movs	r5, #0
 8009696:	f104 0619 	add.w	r6, r4, #25
 800969a:	e7f5      	b.n	8009688 <_printf_i+0x230>
 800969c:	0800a171 	.word	0x0800a171
 80096a0:	0800a182 	.word	0x0800a182

080096a4 <memchr>:
 80096a4:	4603      	mov	r3, r0
 80096a6:	b510      	push	{r4, lr}
 80096a8:	b2c9      	uxtb	r1, r1
 80096aa:	4402      	add	r2, r0
 80096ac:	4293      	cmp	r3, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	d101      	bne.n	80096b6 <memchr+0x12>
 80096b2:	2000      	movs	r0, #0
 80096b4:	e003      	b.n	80096be <memchr+0x1a>
 80096b6:	7804      	ldrb	r4, [r0, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	428c      	cmp	r4, r1
 80096bc:	d1f6      	bne.n	80096ac <memchr+0x8>
 80096be:	bd10      	pop	{r4, pc}

080096c0 <memcpy>:
 80096c0:	440a      	add	r2, r1
 80096c2:	4291      	cmp	r1, r2
 80096c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096c8:	d100      	bne.n	80096cc <memcpy+0xc>
 80096ca:	4770      	bx	lr
 80096cc:	b510      	push	{r4, lr}
 80096ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d2:	4291      	cmp	r1, r2
 80096d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d8:	d1f9      	bne.n	80096ce <memcpy+0xe>
 80096da:	bd10      	pop	{r4, pc}

080096dc <memmove>:
 80096dc:	4288      	cmp	r0, r1
 80096de:	b510      	push	{r4, lr}
 80096e0:	eb01 0402 	add.w	r4, r1, r2
 80096e4:	d902      	bls.n	80096ec <memmove+0x10>
 80096e6:	4284      	cmp	r4, r0
 80096e8:	4623      	mov	r3, r4
 80096ea:	d807      	bhi.n	80096fc <memmove+0x20>
 80096ec:	1e43      	subs	r3, r0, #1
 80096ee:	42a1      	cmp	r1, r4
 80096f0:	d008      	beq.n	8009704 <memmove+0x28>
 80096f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fa:	e7f8      	b.n	80096ee <memmove+0x12>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4402      	add	r2, r0
 8009700:	428a      	cmp	r2, r1
 8009702:	d100      	bne.n	8009706 <memmove+0x2a>
 8009704:	bd10      	pop	{r4, pc}
 8009706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970e:	e7f7      	b.n	8009700 <memmove+0x24>

08009710 <_free_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4605      	mov	r5, r0
 8009714:	2900      	cmp	r1, #0
 8009716:	d040      	beq.n	800979a <_free_r+0x8a>
 8009718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800971c:	1f0c      	subs	r4, r1, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfb8      	it	lt
 8009722:	18e4      	addlt	r4, r4, r3
 8009724:	f000 f910 	bl	8009948 <__malloc_lock>
 8009728:	4a1c      	ldr	r2, [pc, #112]	; (800979c <_free_r+0x8c>)
 800972a:	6813      	ldr	r3, [r2, #0]
 800972c:	b933      	cbnz	r3, 800973c <_free_r+0x2c>
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	6014      	str	r4, [r2, #0]
 8009732:	4628      	mov	r0, r5
 8009734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009738:	f000 b90c 	b.w	8009954 <__malloc_unlock>
 800973c:	42a3      	cmp	r3, r4
 800973e:	d908      	bls.n	8009752 <_free_r+0x42>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	1821      	adds	r1, r4, r0
 8009744:	428b      	cmp	r3, r1
 8009746:	bf01      	itttt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	1809      	addeq	r1, r1, r0
 800974e:	6021      	streq	r1, [r4, #0]
 8009750:	e7ed      	b.n	800972e <_free_r+0x1e>
 8009752:	461a      	mov	r2, r3
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	b10b      	cbz	r3, 800975c <_free_r+0x4c>
 8009758:	42a3      	cmp	r3, r4
 800975a:	d9fa      	bls.n	8009752 <_free_r+0x42>
 800975c:	6811      	ldr	r1, [r2, #0]
 800975e:	1850      	adds	r0, r2, r1
 8009760:	42a0      	cmp	r0, r4
 8009762:	d10b      	bne.n	800977c <_free_r+0x6c>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	4401      	add	r1, r0
 8009768:	1850      	adds	r0, r2, r1
 800976a:	4283      	cmp	r3, r0
 800976c:	6011      	str	r1, [r2, #0]
 800976e:	d1e0      	bne.n	8009732 <_free_r+0x22>
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4401      	add	r1, r0
 8009776:	6011      	str	r1, [r2, #0]
 8009778:	6053      	str	r3, [r2, #4]
 800977a:	e7da      	b.n	8009732 <_free_r+0x22>
 800977c:	d902      	bls.n	8009784 <_free_r+0x74>
 800977e:	230c      	movs	r3, #12
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	e7d6      	b.n	8009732 <_free_r+0x22>
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	1821      	adds	r1, r4, r0
 8009788:	428b      	cmp	r3, r1
 800978a:	bf01      	itttt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	1809      	addeq	r1, r1, r0
 8009792:	6021      	streq	r1, [r4, #0]
 8009794:	6063      	str	r3, [r4, #4]
 8009796:	6054      	str	r4, [r2, #4]
 8009798:	e7cb      	b.n	8009732 <_free_r+0x22>
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20001aec 	.word	0x20001aec

080097a0 <sbrk_aligned>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4e0e      	ldr	r6, [pc, #56]	; (80097dc <sbrk_aligned+0x3c>)
 80097a4:	460c      	mov	r4, r1
 80097a6:	6831      	ldr	r1, [r6, #0]
 80097a8:	4605      	mov	r5, r0
 80097aa:	b911      	cbnz	r1, 80097b2 <sbrk_aligned+0x12>
 80097ac:	f000 f8bc 	bl	8009928 <_sbrk_r>
 80097b0:	6030      	str	r0, [r6, #0]
 80097b2:	4621      	mov	r1, r4
 80097b4:	4628      	mov	r0, r5
 80097b6:	f000 f8b7 	bl	8009928 <_sbrk_r>
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	d00a      	beq.n	80097d4 <sbrk_aligned+0x34>
 80097be:	1cc4      	adds	r4, r0, #3
 80097c0:	f024 0403 	bic.w	r4, r4, #3
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d007      	beq.n	80097d8 <sbrk_aligned+0x38>
 80097c8:	1a21      	subs	r1, r4, r0
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 f8ac 	bl	8009928 <_sbrk_r>
 80097d0:	3001      	adds	r0, #1
 80097d2:	d101      	bne.n	80097d8 <sbrk_aligned+0x38>
 80097d4:	f04f 34ff 	mov.w	r4, #4294967295
 80097d8:	4620      	mov	r0, r4
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	20001af0 	.word	0x20001af0

080097e0 <_malloc_r>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	1ccd      	adds	r5, r1, #3
 80097e6:	f025 0503 	bic.w	r5, r5, #3
 80097ea:	3508      	adds	r5, #8
 80097ec:	2d0c      	cmp	r5, #12
 80097ee:	bf38      	it	cc
 80097f0:	250c      	movcc	r5, #12
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	4607      	mov	r7, r0
 80097f6:	db01      	blt.n	80097fc <_malloc_r+0x1c>
 80097f8:	42a9      	cmp	r1, r5
 80097fa:	d905      	bls.n	8009808 <_malloc_r+0x28>
 80097fc:	230c      	movs	r3, #12
 80097fe:	2600      	movs	r6, #0
 8009800:	603b      	str	r3, [r7, #0]
 8009802:	4630      	mov	r0, r6
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	4e2e      	ldr	r6, [pc, #184]	; (80098c4 <_malloc_r+0xe4>)
 800980a:	f000 f89d 	bl	8009948 <__malloc_lock>
 800980e:	6833      	ldr	r3, [r6, #0]
 8009810:	461c      	mov	r4, r3
 8009812:	bb34      	cbnz	r4, 8009862 <_malloc_r+0x82>
 8009814:	4629      	mov	r1, r5
 8009816:	4638      	mov	r0, r7
 8009818:	f7ff ffc2 	bl	80097a0 <sbrk_aligned>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	4604      	mov	r4, r0
 8009820:	d14d      	bne.n	80098be <_malloc_r+0xde>
 8009822:	6834      	ldr	r4, [r6, #0]
 8009824:	4626      	mov	r6, r4
 8009826:	2e00      	cmp	r6, #0
 8009828:	d140      	bne.n	80098ac <_malloc_r+0xcc>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	4631      	mov	r1, r6
 800982e:	4638      	mov	r0, r7
 8009830:	eb04 0803 	add.w	r8, r4, r3
 8009834:	f000 f878 	bl	8009928 <_sbrk_r>
 8009838:	4580      	cmp	r8, r0
 800983a:	d13a      	bne.n	80098b2 <_malloc_r+0xd2>
 800983c:	6821      	ldr	r1, [r4, #0]
 800983e:	3503      	adds	r5, #3
 8009840:	1a6d      	subs	r5, r5, r1
 8009842:	f025 0503 	bic.w	r5, r5, #3
 8009846:	3508      	adds	r5, #8
 8009848:	2d0c      	cmp	r5, #12
 800984a:	bf38      	it	cc
 800984c:	250c      	movcc	r5, #12
 800984e:	4638      	mov	r0, r7
 8009850:	4629      	mov	r1, r5
 8009852:	f7ff ffa5 	bl	80097a0 <sbrk_aligned>
 8009856:	3001      	adds	r0, #1
 8009858:	d02b      	beq.n	80098b2 <_malloc_r+0xd2>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	442b      	add	r3, r5
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	e00e      	b.n	8009880 <_malloc_r+0xa0>
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	1b52      	subs	r2, r2, r5
 8009866:	d41e      	bmi.n	80098a6 <_malloc_r+0xc6>
 8009868:	2a0b      	cmp	r2, #11
 800986a:	d916      	bls.n	800989a <_malloc_r+0xba>
 800986c:	1961      	adds	r1, r4, r5
 800986e:	42a3      	cmp	r3, r4
 8009870:	6025      	str	r5, [r4, #0]
 8009872:	bf18      	it	ne
 8009874:	6059      	strne	r1, [r3, #4]
 8009876:	6863      	ldr	r3, [r4, #4]
 8009878:	bf08      	it	eq
 800987a:	6031      	streq	r1, [r6, #0]
 800987c:	5162      	str	r2, [r4, r5]
 800987e:	604b      	str	r3, [r1, #4]
 8009880:	4638      	mov	r0, r7
 8009882:	f104 060b 	add.w	r6, r4, #11
 8009886:	f000 f865 	bl	8009954 <__malloc_unlock>
 800988a:	f026 0607 	bic.w	r6, r6, #7
 800988e:	1d23      	adds	r3, r4, #4
 8009890:	1af2      	subs	r2, r6, r3
 8009892:	d0b6      	beq.n	8009802 <_malloc_r+0x22>
 8009894:	1b9b      	subs	r3, r3, r6
 8009896:	50a3      	str	r3, [r4, r2]
 8009898:	e7b3      	b.n	8009802 <_malloc_r+0x22>
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	42a3      	cmp	r3, r4
 800989e:	bf0c      	ite	eq
 80098a0:	6032      	streq	r2, [r6, #0]
 80098a2:	605a      	strne	r2, [r3, #4]
 80098a4:	e7ec      	b.n	8009880 <_malloc_r+0xa0>
 80098a6:	4623      	mov	r3, r4
 80098a8:	6864      	ldr	r4, [r4, #4]
 80098aa:	e7b2      	b.n	8009812 <_malloc_r+0x32>
 80098ac:	4634      	mov	r4, r6
 80098ae:	6876      	ldr	r6, [r6, #4]
 80098b0:	e7b9      	b.n	8009826 <_malloc_r+0x46>
 80098b2:	230c      	movs	r3, #12
 80098b4:	4638      	mov	r0, r7
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	f000 f84c 	bl	8009954 <__malloc_unlock>
 80098bc:	e7a1      	b.n	8009802 <_malloc_r+0x22>
 80098be:	6025      	str	r5, [r4, #0]
 80098c0:	e7de      	b.n	8009880 <_malloc_r+0xa0>
 80098c2:	bf00      	nop
 80098c4:	20001aec 	.word	0x20001aec

080098c8 <_realloc_r>:
 80098c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098cc:	4680      	mov	r8, r0
 80098ce:	4614      	mov	r4, r2
 80098d0:	460e      	mov	r6, r1
 80098d2:	b921      	cbnz	r1, 80098de <_realloc_r+0x16>
 80098d4:	4611      	mov	r1, r2
 80098d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	f7ff bf81 	b.w	80097e0 <_malloc_r>
 80098de:	b92a      	cbnz	r2, 80098ec <_realloc_r+0x24>
 80098e0:	f7ff ff16 	bl	8009710 <_free_r>
 80098e4:	4625      	mov	r5, r4
 80098e6:	4628      	mov	r0, r5
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	f000 f838 	bl	8009960 <_malloc_usable_size_r>
 80098f0:	4284      	cmp	r4, r0
 80098f2:	4607      	mov	r7, r0
 80098f4:	d802      	bhi.n	80098fc <_realloc_r+0x34>
 80098f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098fa:	d812      	bhi.n	8009922 <_realloc_r+0x5a>
 80098fc:	4621      	mov	r1, r4
 80098fe:	4640      	mov	r0, r8
 8009900:	f7ff ff6e 	bl	80097e0 <_malloc_r>
 8009904:	4605      	mov	r5, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	d0ed      	beq.n	80098e6 <_realloc_r+0x1e>
 800990a:	42bc      	cmp	r4, r7
 800990c:	4622      	mov	r2, r4
 800990e:	4631      	mov	r1, r6
 8009910:	bf28      	it	cs
 8009912:	463a      	movcs	r2, r7
 8009914:	f7ff fed4 	bl	80096c0 <memcpy>
 8009918:	4631      	mov	r1, r6
 800991a:	4640      	mov	r0, r8
 800991c:	f7ff fef8 	bl	8009710 <_free_r>
 8009920:	e7e1      	b.n	80098e6 <_realloc_r+0x1e>
 8009922:	4635      	mov	r5, r6
 8009924:	e7df      	b.n	80098e6 <_realloc_r+0x1e>
	...

08009928 <_sbrk_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	2300      	movs	r3, #0
 800992c:	4d05      	ldr	r5, [pc, #20]	; (8009944 <_sbrk_r+0x1c>)
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f7f7 ffe0 	bl	80018f8 <_sbrk>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_sbrk_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_sbrk_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20001af4 	.word	0x20001af4

08009948 <__malloc_lock>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__malloc_lock+0x8>)
 800994a:	f000 b811 	b.w	8009970 <__retarget_lock_acquire_recursive>
 800994e:	bf00      	nop
 8009950:	20001af8 	.word	0x20001af8

08009954 <__malloc_unlock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_unlock+0x8>)
 8009956:	f000 b80c 	b.w	8009972 <__retarget_lock_release_recursive>
 800995a:	bf00      	nop
 800995c:	20001af8 	.word	0x20001af8

08009960 <_malloc_usable_size_r>:
 8009960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009964:	1f18      	subs	r0, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfbc      	itt	lt
 800996a:	580b      	ldrlt	r3, [r1, r0]
 800996c:	18c0      	addlt	r0, r0, r3
 800996e:	4770      	bx	lr

08009970 <__retarget_lock_acquire_recursive>:
 8009970:	4770      	bx	lr

08009972 <__retarget_lock_release_recursive>:
 8009972:	4770      	bx	lr

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
