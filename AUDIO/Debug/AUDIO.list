
AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009684  08009684  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08009684  08009684  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009684  08009684  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800968c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  20000088  08009714  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  08009714  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162a4  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034dd  00000000  00000000  00036355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00039838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd8f  00000000  00000000  0003c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019347  00000000  00000000  00058f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a394b  00000000  00000000  000722c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115c11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f10  00000000  00000000  00115c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08008ea0 	.word	0x08008ea0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08008ea0 	.word	0x08008ea0

08000224 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022e:	4804      	ldr	r0, [pc, #16]	; (8000240 <SELECT+0x1c>)
 8000230:	f003 f862 	bl	80032f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000234:	2001      	movs	r0, #1
 8000236:	f002 f8fb 	bl	8002430 <HAL_Delay>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010c00 	.word	0x40010c00

08000244 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <DESELECT+0x1c>)
 8000250:	f003 f852 	bl	80032f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f002 f8eb 	bl	8002430 <HAL_Delay>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40010c00 	.word	0x40010c00

08000264 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800026e:	bf00      	nop
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <SPI_TxByte+0x30>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	f003 0302 	and.w	r3, r3, #2
 800027a:	2b02      	cmp	r3, #2
 800027c:	d1f8      	bne.n	8000270 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800027e:	1df9      	adds	r1, r7, #7
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	2201      	movs	r2, #1
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <SPI_TxByte+0x30>)
 8000286:	f003 ffcd 	bl	8004224 <HAL_SPI_Transmit>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000188 	.word	0x20000188

08000298 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002a4:	bf00      	nop
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <SPI_TxBuffer+0x30>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	f003 0302 	and.w	r3, r3, #2
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d1f8      	bne.n	80002a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80002b4:	887a      	ldrh	r2, [r7, #2]
 80002b6:	2364      	movs	r3, #100	; 0x64
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4803      	ldr	r0, [pc, #12]	; (80002c8 <SPI_TxBuffer+0x30>)
 80002bc:	f003 ffb2 	bl	8004224 <HAL_SPI_Transmit>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000188 	.word	0x20000188

080002cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80002d2:	23ff      	movs	r3, #255	; 0xff
 80002d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002d6:	bf00      	nop
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <SPI_RxByte+0x34>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d1f8      	bne.n	80002d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80002e6:	1dba      	adds	r2, r7, #6
 80002e8:	1df9      	adds	r1, r7, #7
 80002ea:	2364      	movs	r3, #100	; 0x64
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <SPI_RxByte+0x34>)
 80002f2:	f004 f8d3 	bl	800449c <HAL_SPI_TransmitReceive>

	return data;
 80002f6:	79bb      	ldrb	r3, [r7, #6]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000188 	.word	0x20000188

08000304 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800030c:	f7ff ffde 	bl	80002cc <SPI_RxByte>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	701a      	strb	r2, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <SD_ReadyWait+0x30>)
 8000328:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800032c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800032e:	f7ff ffcd 	bl	80002cc <SPI_RxByte>
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2bff      	cmp	r3, #255	; 0xff
 800033a:	d003      	beq.n	8000344 <SD_ReadyWait+0x24>
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <SD_ReadyWait+0x30>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f4      	bne.n	800032e <SD_ReadyWait+0xe>

	return res;
 8000344:	79fb      	ldrb	r3, [r7, #7]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000a6 	.word	0x200000a6

08000354 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800035a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800035e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000360:	f7ff ff70 	bl	8000244 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	e005      	b.n	8000376 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800036a:	20ff      	movs	r0, #255	; 0xff
 800036c:	f7ff ff7a 	bl	8000264 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	3301      	adds	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	2b09      	cmp	r3, #9
 800037a:	ddf6      	ble.n	800036a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800037c:	f7ff ff52 	bl	8000224 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000380:	2340      	movs	r3, #64	; 0x40
 8000382:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000394:	2395      	movs	r3, #149	; 0x95
 8000396:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000398:	463b      	mov	r3, r7
 800039a:	2106      	movs	r1, #6
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff7b 	bl	8000298 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80003a2:	e002      	b.n	80003aa <SD_PowerOn+0x56>
	{
		cnt--;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80003aa:	f7ff ff8f 	bl	80002cc <SPI_RxByte>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d002      	beq.n	80003ba <SD_PowerOn+0x66>
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1f4      	bne.n	80003a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80003ba:	f7ff ff43 	bl	8000244 <DESELECT>
	SPI_TxByte(0XFF);
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	f7ff ff50 	bl	8000264 <SPI_TxByte>

	PowerFlag = 1;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <SD_PowerOn+0x80>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000a9 	.word	0x200000a9

080003d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <SD_PowerOff+0x14>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200000a9 	.word	0x200000a9

080003f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <SD_CheckPower+0x10>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	200000a9 	.word	0x200000a9

08000404 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <SD_RxDataBlock+0x58>)
 8000410:	22c8      	movs	r2, #200	; 0xc8
 8000412:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000414:	f7ff ff5a 	bl	80002cc <SPI_RxByte>
 8000418:	4603      	mov	r3, r0
 800041a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	2bff      	cmp	r3, #255	; 0xff
 8000420:	d103      	bne.n	800042a <SD_RxDataBlock+0x26>
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <SD_RxDataBlock+0x58>)
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f4      	bne.n	8000414 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2bfe      	cmp	r3, #254	; 0xfe
 800042e:	d001      	beq.n	8000434 <SD_RxDataBlock+0x30>
 8000430:	2300      	movs	r3, #0
 8000432:	e00f      	b.n	8000454 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	607a      	str	r2, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff62 	bl	8000304 <SPI_RxBytePtr>
	} while(len--);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	603a      	str	r2, [r7, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1f4      	bne.n	8000434 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800044a:	f7ff ff3f 	bl	80002cc <SPI_RxByte>
	SPI_RxByte();
 800044e:	f7ff ff3d 	bl	80002cc <SPI_RxByte>

	return TRUE;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000a4 	.word	0x200000a4

08000460 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000470:	f7ff ff56 	bl	8000320 <SD_ReadyWait>
 8000474:	4603      	mov	r3, r0
 8000476:	2bff      	cmp	r3, #255	; 0xff
 8000478:	d001      	beq.n	800047e <SD_TxDataBlock+0x1e>
 800047a:	2300      	movs	r3, #0
 800047c:	e02f      	b.n	80004de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff feef 	bl	8000264 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000486:	78fb      	ldrb	r3, [r7, #3]
 8000488:	2bfd      	cmp	r3, #253	; 0xfd
 800048a:	d020      	beq.n	80004ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f7ff ff01 	bl	8000298 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000496:	f7ff ff19 	bl	80002cc <SPI_RxByte>
		SPI_RxByte();
 800049a:	f7ff ff17 	bl	80002cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800049e:	e00b      	b.n	80004b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80004a0:	f7ff ff14 	bl	80002cc <SPI_RxByte>
 80004a4:	4603      	mov	r3, r0
 80004a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	f003 031f 	and.w	r3, r3, #31
 80004ae:	2b05      	cmp	r3, #5
 80004b0:	d006      	beq.n	80004c0 <SD_TxDataBlock+0x60>
			i++;
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	3301      	adds	r3, #1
 80004b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	2b40      	cmp	r3, #64	; 0x40
 80004bc:	d9f0      	bls.n	80004a0 <SD_TxDataBlock+0x40>
 80004be:	e000      	b.n	80004c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80004c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80004c2:	bf00      	nop
 80004c4:	f7ff ff02 	bl	80002cc <SPI_RxByte>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0fa      	beq.n	80004c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	f003 031f 	and.w	r3, r3, #31
 80004d4:	2b05      	cmp	r3, #5
 80004d6:	d101      	bne.n	80004dc <SD_TxDataBlock+0x7c>
 80004d8:	2301      	movs	r3, #1
 80004da:	e000      	b.n	80004de <SD_TxDataBlock+0x7e>

	return FALSE;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b084      	sub	sp, #16
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	6039      	str	r1, [r7, #0]
 80004f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80004f2:	f7ff ff15 	bl	8000320 <SD_ReadyWait>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2bff      	cmp	r3, #255	; 0xff
 80004fa:	d001      	beq.n	8000500 <SD_SendCmd+0x1a>
 80004fc:	23ff      	movs	r3, #255	; 0xff
 80004fe:	e042      	b.n	8000586 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff feae 	bl	8000264 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	0e1b      	lsrs	r3, r3, #24
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fea8 	bl	8000264 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff fea2 	bl	8000264 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe9c 	bl	8000264 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe97 	bl	8000264 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b40      	cmp	r3, #64	; 0x40
 800053a:	d102      	bne.n	8000542 <SD_SendCmd+0x5c>
 800053c:	2395      	movs	r3, #149	; 0x95
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e007      	b.n	8000552 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b48      	cmp	r3, #72	; 0x48
 8000546:	d102      	bne.n	800054e <SD_SendCmd+0x68>
 8000548:	2387      	movs	r3, #135	; 0x87
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e001      	b.n	8000552 <SD_SendCmd+0x6c>
	else crc = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe85 	bl	8000264 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b4c      	cmp	r3, #76	; 0x4c
 800055e:	d101      	bne.n	8000564 <SD_SendCmd+0x7e>
 8000560:	f7ff feb4 	bl	80002cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000564:	230a      	movs	r3, #10
 8000566:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000568:	f7ff feb0 	bl	80002cc <SPI_RxByte>
 800056c:	4603      	mov	r3, r0
 800056e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000570:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000574:	2b00      	cmp	r3, #0
 8000576:	da05      	bge.n	8000584 <SD_SendCmd+0x9e>
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	3b01      	subs	r3, #1
 800057c:	73bb      	strb	r3, [r7, #14]
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f1      	bne.n	8000568 <SD_SendCmd+0x82>

	return res;
 8000584:	7b7b      	ldrb	r3, [r7, #13]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SD_disk_initialize+0x14>
 80005a0:	2301      	movs	r3, #1
 80005a2:	e0d1      	b.n	8000748 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80005a4:	4b6a      	ldr	r3, [pc, #424]	; (8000750 <SD_disk_initialize+0x1c0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <SD_disk_initialize+0x2a>
 80005b2:	4b67      	ldr	r3, [pc, #412]	; (8000750 <SD_disk_initialize+0x1c0>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	e0c6      	b.n	8000748 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80005ba:	f7ff fecb 	bl	8000354 <SD_PowerOn>

	/* slave select */
	SELECT();
 80005be:	f7ff fe31 	bl	8000224 <SELECT>

	/* check disk type */
	type = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80005c6:	2100      	movs	r1, #0
 80005c8:	2040      	movs	r0, #64	; 0x40
 80005ca:	f7ff ff8c 	bl	80004e6 <SD_SendCmd>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	f040 80a1 	bne.w	8000718 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80005d6:	4b5f      	ldr	r3, [pc, #380]	; (8000754 <SD_disk_initialize+0x1c4>)
 80005d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80005de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80005e2:	2048      	movs	r0, #72	; 0x48
 80005e4:	f7ff ff7f 	bl	80004e6 <SD_SendCmd>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d155      	bne.n	800069a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e00c      	b.n	800060e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80005f4:	7bfc      	ldrb	r4, [r7, #15]
 80005f6:	f7ff fe69 	bl	80002cc <SPI_RxByte>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	f104 0310 	add.w	r3, r4, #16
 8000602:	443b      	add	r3, r7
 8000604:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	3301      	adds	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d9ef      	bls.n	80005f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000614:	7abb      	ldrb	r3, [r7, #10]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d17e      	bne.n	8000718 <SD_disk_initialize+0x188>
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	2baa      	cmp	r3, #170	; 0xaa
 800061e:	d17b      	bne.n	8000718 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000620:	2100      	movs	r1, #0
 8000622:	2077      	movs	r0, #119	; 0x77
 8000624:	f7ff ff5f 	bl	80004e6 <SD_SendCmd>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d807      	bhi.n	800063e <SD_disk_initialize+0xae>
 800062e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000632:	2069      	movs	r0, #105	; 0x69
 8000634:	f7ff ff57 	bl	80004e6 <SD_SendCmd>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d004      	beq.n	8000648 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800063e:	4b45      	ldr	r3, [pc, #276]	; (8000754 <SD_disk_initialize+0x1c4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1ec      	bne.n	8000620 <SD_disk_initialize+0x90>
 8000646:	e000      	b.n	800064a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000648:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800064a:	4b42      	ldr	r3, [pc, #264]	; (8000754 <SD_disk_initialize+0x1c4>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d062      	beq.n	8000718 <SD_disk_initialize+0x188>
 8000652:	2100      	movs	r1, #0
 8000654:	207a      	movs	r0, #122	; 0x7a
 8000656:	f7ff ff46 	bl	80004e6 <SD_SendCmd>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d15b      	bne.n	8000718 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e00c      	b.n	8000680 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000666:	7bfc      	ldrb	r4, [r7, #15]
 8000668:	f7ff fe30 	bl	80002cc <SPI_RxByte>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	f104 0310 	add.w	r3, r4, #16
 8000674:	443b      	add	r3, r7
 8000676:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3301      	adds	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d9ef      	bls.n	8000666 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000686:	7a3b      	ldrb	r3, [r7, #8]
 8000688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SD_disk_initialize+0x104>
 8000690:	230c      	movs	r3, #12
 8000692:	e000      	b.n	8000696 <SD_disk_initialize+0x106>
 8000694:	2304      	movs	r3, #4
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	e03e      	b.n	8000718 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800069a:	2100      	movs	r1, #0
 800069c:	2077      	movs	r0, #119	; 0x77
 800069e:	f7ff ff22 	bl	80004e6 <SD_SendCmd>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d808      	bhi.n	80006ba <SD_disk_initialize+0x12a>
 80006a8:	2100      	movs	r1, #0
 80006aa:	2069      	movs	r0, #105	; 0x69
 80006ac:	f7ff ff1b 	bl	80004e6 <SD_SendCmd>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d801      	bhi.n	80006ba <SD_disk_initialize+0x12a>
 80006b6:	2302      	movs	r3, #2
 80006b8:	e000      	b.n	80006bc <SD_disk_initialize+0x12c>
 80006ba:	2301      	movs	r3, #1
 80006bc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d10e      	bne.n	80006e2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80006c4:	2100      	movs	r1, #0
 80006c6:	2077      	movs	r0, #119	; 0x77
 80006c8:	f7ff ff0d 	bl	80004e6 <SD_SendCmd>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d80e      	bhi.n	80006f0 <SD_disk_initialize+0x160>
 80006d2:	2100      	movs	r1, #0
 80006d4:	2069      	movs	r0, #105	; 0x69
 80006d6:	f7ff ff06 	bl	80004e6 <SD_SendCmd>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d107      	bne.n	80006f0 <SD_disk_initialize+0x160>
 80006e0:	e00c      	b.n	80006fc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80006e2:	2100      	movs	r1, #0
 80006e4:	2041      	movs	r0, #65	; 0x41
 80006e6:	f7ff fefe 	bl	80004e6 <SD_SendCmd>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <SD_disk_initialize+0x1c4>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1e2      	bne.n	80006be <SD_disk_initialize+0x12e>
 80006f8:	e000      	b.n	80006fc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80006fa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <SD_disk_initialize+0x1c4>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <SD_disk_initialize+0x184>
 8000704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000708:	2050      	movs	r0, #80	; 0x50
 800070a:	f7ff feec 	bl	80004e6 <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SD_disk_initialize+0x188>
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <SD_disk_initialize+0x1c8>)
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800071e:	f7ff fd91 	bl	8000244 <DESELECT>
	SPI_RxByte();
 8000722:	f7ff fdd3 	bl	80002cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <SD_disk_initialize+0x1c0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SD_disk_initialize+0x1c0>)
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e001      	b.n	8000742 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800073e:	f7ff fe4b 	bl	80003d8 <SD_PowerOff>
	}

	return Stat;
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_disk_initialize+0x1c0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	200000a4 	.word	0x200000a4
 8000758:	200000a8 	.word	0x200000a8

0800075c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SD_disk_status+0x14>
 800076c:	2301      	movs	r3, #1
 800076e:	e002      	b.n	8000776 <SD_disk_status+0x1a>
	return Stat;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <SD_disk_status+0x24>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000000 	.word	0x20000000

08000784 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d102      	bne.n	80007a0 <SD_disk_read+0x1c>
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <SD_disk_read+0x20>
 80007a0:	2304      	movs	r3, #4
 80007a2:	e051      	b.n	8000848 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <SD_disk_read+0xcc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SD_disk_read+0x32>
 80007b2:	2303      	movs	r3, #3
 80007b4:	e048      	b.n	8000848 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <SD_disk_read+0xd0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d102      	bne.n	80007c8 <SD_disk_read+0x44>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	607b      	str	r3, [r7, #4]

	SELECT();
 80007c8:	f7ff fd2c 	bl	8000224 <SELECT>

	if (count == 1)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d111      	bne.n	80007f6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2051      	movs	r0, #81	; 0x51
 80007d6:	f7ff fe86 	bl	80004e6 <SD_SendCmd>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d129      	bne.n	8000834 <SD_disk_read+0xb0>
 80007e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f7ff fe0d 	bl	8000404 <SD_RxDataBlock>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d021      	beq.n	8000834 <SD_disk_read+0xb0>
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e01e      	b.n	8000834 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	2052      	movs	r0, #82	; 0x52
 80007fa:	f7ff fe74 	bl	80004e6 <SD_SendCmd>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d117      	bne.n	8000834 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f7ff fdfb 	bl	8000404 <SD_RxDataBlock>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00a      	beq.n	800082a <SD_disk_read+0xa6>
				buff += 512;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800081a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1ed      	bne.n	8000804 <SD_disk_read+0x80>
 8000828:	e000      	b.n	800082c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800082a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	204c      	movs	r0, #76	; 0x4c
 8000830:	f7ff fe59 	bl	80004e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000834:	f7ff fd06 	bl	8000244 <DESELECT>
	SPI_RxByte();
 8000838:	f7ff fd48 	bl	80002cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	200000a8 	.word	0x200000a8

08000858 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d102      	bne.n	8000874 <SD_disk_write+0x1c>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <SD_disk_write+0x20>
 8000874:	2304      	movs	r3, #4
 8000876:	e06b      	b.n	8000950 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000878:	4b37      	ldr	r3, [pc, #220]	; (8000958 <SD_disk_write+0x100>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SD_disk_write+0x32>
 8000886:	2303      	movs	r3, #3
 8000888:	e062      	b.n	8000950 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <SD_disk_write+0x100>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SD_disk_write+0x44>
 8000898:	2302      	movs	r3, #2
 800089a:	e059      	b.n	8000950 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <SD_disk_write+0x104>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <SD_disk_write+0x56>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	025b      	lsls	r3, r3, #9
 80008ac:	607b      	str	r3, [r7, #4]

	SELECT();
 80008ae:	f7ff fcb9 	bl	8000224 <SELECT>

	if (count == 1)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d110      	bne.n	80008da <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	2058      	movs	r0, #88	; 0x58
 80008bc:	f7ff fe13 	bl	80004e6 <SD_SendCmd>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d13a      	bne.n	800093c <SD_disk_write+0xe4>
 80008c6:	21fe      	movs	r1, #254	; 0xfe
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f7ff fdc9 	bl	8000460 <SD_TxDataBlock>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d033      	beq.n	800093c <SD_disk_write+0xe4>
			count = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	e030      	b.n	800093c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <SD_disk_write+0x104>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d007      	beq.n	80008f6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2077      	movs	r0, #119	; 0x77
 80008ea:	f7ff fdfc 	bl	80004e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	2057      	movs	r0, #87	; 0x57
 80008f2:	f7ff fdf8 	bl	80004e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	2059      	movs	r0, #89	; 0x59
 80008fa:	f7ff fdf4 	bl	80004e6 <SD_SendCmd>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11b      	bne.n	800093c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000904:	21fc      	movs	r1, #252	; 0xfc
 8000906:	68b8      	ldr	r0, [r7, #8]
 8000908:	f7ff fdaa 	bl	8000460 <SD_TxDataBlock>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00a      	beq.n	8000928 <SD_disk_write+0xd0>
				buff += 512;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000918:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1ee      	bne.n	8000904 <SD_disk_write+0xac>
 8000926:	e000      	b.n	800092a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000928:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800092a:	21fd      	movs	r1, #253	; 0xfd
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fd97 	bl	8000460 <SD_TxDataBlock>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <SD_disk_write+0xe4>
			{
				count = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800093c:	f7ff fc82 	bl	8000244 <DESELECT>
	SPI_RxByte();
 8000940:	f7ff fcc4 	bl	80002cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	200000a8 	.word	0x200000a8

08000960 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	603a      	str	r2, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	460b      	mov	r3, r1
 800096e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SD_disk_ioctl+0x1e>
 800097a:	2304      	movs	r3, #4
 800097c:	e115      	b.n	8000baa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d124      	bne.n	80009d4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d012      	beq.n	80009b8 <SD_disk_ioctl+0x58>
 8000992:	2b02      	cmp	r3, #2
 8000994:	dc1a      	bgt.n	80009cc <SD_disk_ioctl+0x6c>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <SD_disk_ioctl+0x40>
 800099a:	2b01      	cmp	r3, #1
 800099c:	d006      	beq.n	80009ac <SD_disk_ioctl+0x4c>
 800099e:	e015      	b.n	80009cc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80009a0:	f7ff fd1a 	bl	80003d8 <SD_PowerOff>
			res = RES_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009aa:	e0fc      	b.n	8000ba6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80009ac:	f7ff fcd2 	bl	8000354 <SD_PowerOn>
			res = RES_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009b6:	e0f6      	b.n	8000ba6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	1c5c      	adds	r4, r3, #1
 80009bc:	f7ff fd18 	bl	80003f0 <SD_CheckPower>
 80009c0:	4603      	mov	r3, r0
 80009c2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80009ca:	e0ec      	b.n	8000ba6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80009cc:	2304      	movs	r3, #4
 80009ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d2:	e0e8      	b.n	8000ba6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009d4:	4b77      	ldr	r3, [pc, #476]	; (8000bb4 <SD_disk_ioctl+0x254>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SD_disk_ioctl+0x86>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e0e1      	b.n	8000baa <SD_disk_ioctl+0x24a>

		SELECT();
 80009e6:	f7ff fc1d 	bl	8000224 <SELECT>

		switch (ctrl)
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b0d      	cmp	r3, #13
 80009ee:	f200 80cb 	bhi.w	8000b88 <SD_disk_ioctl+0x228>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <SD_disk_ioctl+0x98>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000af3 	.word	0x08000af3
 80009fc:	08000a31 	.word	0x08000a31
 8000a00:	08000ae3 	.word	0x08000ae3
 8000a04:	08000b89 	.word	0x08000b89
 8000a08:	08000b89 	.word	0x08000b89
 8000a0c:	08000b89 	.word	0x08000b89
 8000a10:	08000b89 	.word	0x08000b89
 8000a14:	08000b89 	.word	0x08000b89
 8000a18:	08000b89 	.word	0x08000b89
 8000a1c:	08000b89 	.word	0x08000b89
 8000a20:	08000b89 	.word	0x08000b89
 8000a24:	08000b05 	.word	0x08000b05
 8000a28:	08000b29 	.word	0x08000b29
 8000a2c:	08000b4d 	.word	0x08000b4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000a30:	2100      	movs	r1, #0
 8000a32:	2049      	movs	r0, #73	; 0x49
 8000a34:	f7ff fd57 	bl	80004e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f040 80a8 	bne.w	8000b90 <SD_disk_ioctl+0x230>
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2110      	movs	r1, #16
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fcdc 	bl	8000404 <SD_RxDataBlock>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 809e 	beq.w	8000b90 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000a54:	7b3b      	ldrb	r3, [r7, #12]
 8000a56:	099b      	lsrs	r3, r3, #6
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10e      	bne.n	8000a7c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000a5e:	7d7b      	ldrb	r3, [r7, #21]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	7d3b      	ldrb	r3, [r7, #20]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	3301      	adds	r3, #1
 8000a70:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000a72:	8bfb      	ldrh	r3, [r7, #30]
 8000a74:	029a      	lsls	r2, r3, #10
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e02e      	b.n	8000ada <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000a7c:	7c7b      	ldrb	r3, [r7, #17]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	7dbb      	ldrb	r3, [r7, #22]
 8000a86:	09db      	lsrs	r3, r3, #7
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	7d7b      	ldrb	r3, [r7, #21]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0306 	and.w	r3, r3, #6
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000aa4:	7d3b      	ldrb	r3, [r7, #20]
 8000aa6:	099b      	lsrs	r3, r3, #6
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	7cfb      	ldrb	r3, [r7, #19]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	7cbb      	ldrb	r3, [r7, #18]
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000acc:	8bfa      	ldrh	r2, [r7, #30]
 8000ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ad2:	3b09      	subs	r3, #9
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000ae0:	e056      	b.n	8000b90 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000af0:	e055      	b.n	8000b9e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000af2:	f7ff fc15 	bl	8000320 <SD_ReadyWait>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d14b      	bne.n	8000b94 <SD_disk_ioctl+0x234>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b02:	e047      	b.n	8000b94 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b04:	2100      	movs	r1, #0
 8000b06:	2049      	movs	r0, #73	; 0x49
 8000b08:	f7ff fced 	bl	80004e6 <SD_SendCmd>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d142      	bne.n	8000b98 <SD_disk_ioctl+0x238>
 8000b12:	2110      	movs	r1, #16
 8000b14:	6a38      	ldr	r0, [r7, #32]
 8000b16:	f7ff fc75 	bl	8000404 <SD_RxDataBlock>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d03b      	beq.n	8000b98 <SD_disk_ioctl+0x238>
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b26:	e037      	b.n	8000b98 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b28:	2100      	movs	r1, #0
 8000b2a:	204a      	movs	r0, #74	; 0x4a
 8000b2c:	f7ff fcdb 	bl	80004e6 <SD_SendCmd>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d132      	bne.n	8000b9c <SD_disk_ioctl+0x23c>
 8000b36:	2110      	movs	r1, #16
 8000b38:	6a38      	ldr	r0, [r7, #32]
 8000b3a:	f7ff fc63 	bl	8000404 <SD_RxDataBlock>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02b      	beq.n	8000b9c <SD_disk_ioctl+0x23c>
 8000b44:	2300      	movs	r3, #0
 8000b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b4a:	e027      	b.n	8000b9c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	207a      	movs	r0, #122	; 0x7a
 8000b50:	f7ff fcc9 	bl	80004e6 <SD_SendCmd>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d116      	bne.n	8000b88 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b60:	e00b      	b.n	8000b7a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000b62:	6a3c      	ldr	r4, [r7, #32]
 8000b64:	1c63      	adds	r3, r4, #1
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	f7ff fbb0 	bl	80002cc <SPI_RxByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b74:	3301      	adds	r3, #1
 8000b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d9ef      	bls.n	8000b62 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b8e:	e006      	b.n	8000b9e <SD_disk_ioctl+0x23e>
			break;
 8000b90:	bf00      	nop
 8000b92:	e004      	b.n	8000b9e <SD_disk_ioctl+0x23e>
			break;
 8000b94:	bf00      	nop
 8000b96:	e002      	b.n	8000b9e <SD_disk_ioctl+0x23e>
			break;
 8000b98:	bf00      	nop
 8000b9a:	e000      	b.n	8000b9e <SD_disk_ioctl+0x23e>
			break;
 8000b9c:	bf00      	nop
		}

		DESELECT();
 8000b9e:	f7ff fb51 	bl	8000244 <DESELECT>
		SPI_RxByte();
 8000ba2:	f7ff fb93 	bl	80002cc <SPI_RxByte>
	}

	return res;
 8000ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	372c      	adds	r7, #44	; 0x2c
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd90      	pop	{r4, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	e002      	b.n	8000bc8 <Delay+0x10>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f9      	bne.n	8000bc2 <Delay+0xa>
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <LCD_INIT>:

void LCD_INIT ( void )
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 f829 	bl	8000c38 <LCD_BackLed_Control>
	LCD_Rst();
 8000be6:	f000 f80f 	bl	8000c08 <LCD_Rst>
	LCD_REG_Config();
 8000bea:	f000 f85f 	bl	8000cac <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bf8:	22f0      	movs	r2, #240	; 0xf0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f9e6 	bl	8000fce <LCD_Clear>
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <LCD_Rst+0x28>)
 8000c12:	f002 fb71 	bl	80032f8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <LCD_Rst+0x2c>)
 8000c18:	f7ff ffce 	bl	8000bb8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <LCD_Rst+0x28>)
 8000c22:	f002 fb69 	bl	80032f8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <LCD_Rst+0x2c>)
 8000c28:	f7ff ffc6 	bl	8000bb8 <Delay>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40011800 	.word	0x40011800
 8000c34:	0002bffc 	.word	0x0002bffc

08000c38 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <LCD_BackLed_Control+0x34>)
 8000c50:	f002 fb52 	bl	80032f8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c54:	e005      	b.n	8000c62 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <LCD_BackLed_Control+0x34>)
 8000c5e:	f002 fb4b 	bl	80032f8 <HAL_GPIO_WritePin>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40011400 	.word	0x40011400

08000c70 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c7a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	8013      	strh	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <LCD_Write_Data+0x1c>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	8013      	strh	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	60020000 	.word	0x60020000

08000cac <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000cb0:	20cf      	movs	r0, #207	; 0xcf
 8000cb2:	f7ff ffdd 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ffe8 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000cbc:	2081      	movs	r0, #129	; 0x81
 8000cbe:	f7ff ffe5 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000cc2:	2030      	movs	r0, #48	; 0x30
 8000cc4:	f7ff ffe2 	bl	8000c8c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000cc8:	20ed      	movs	r0, #237	; 0xed
 8000cca:	f7ff ffd1 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f7ff ffdc 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff ffd9 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000cda:	2012      	movs	r0, #18
 8000cdc:	f7ff ffd6 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000ce0:	2081      	movs	r0, #129	; 0x81
 8000ce2:	f7ff ffd3 	bl	8000c8c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000ce6:	20e8      	movs	r0, #232	; 0xe8
 8000ce8:	f7ff ffc2 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000cec:	2085      	movs	r0, #133	; 0x85
 8000cee:	f7ff ffcd 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f7ff ffca 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f7ff ffc7 	bl	8000c8c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000cfe:	20cb      	movs	r0, #203	; 0xcb
 8000d00:	f7ff ffb6 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000d04:	2039      	movs	r0, #57	; 0x39
 8000d06:	f7ff ffc1 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000d0a:	202c      	movs	r0, #44	; 0x2c
 8000d0c:	f7ff ffbe 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff ffbb 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000d16:	2034      	movs	r0, #52	; 0x34
 8000d18:	f7ff ffb8 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff ffb5 	bl	8000c8c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d22:	20f7      	movs	r0, #247	; 0xf7
 8000d24:	f7ff ffa4 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000d28:	2020      	movs	r0, #32
 8000d2a:	f7ff ffaf 	bl	8000c8c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d2e:	20ea      	movs	r0, #234	; 0xea
 8000d30:	f7ff ff9e 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ffa9 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffa6 	bl	8000c8c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d40:	20b1      	movs	r0, #177	; 0xb1
 8000d42:	f7ff ff95 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff ffa0 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d4c:	201b      	movs	r0, #27
 8000d4e:	f7ff ff9d 	bl	8000c8c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d52:	20b6      	movs	r0, #182	; 0xb6
 8000d54:	f7ff ff8c 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f7ff ff97 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d5e:	20a2      	movs	r0, #162	; 0xa2
 8000d60:	f7ff ff94 	bl	8000c8c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d64:	20c0      	movs	r0, #192	; 0xc0
 8000d66:	f7ff ff83 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d6a:	2035      	movs	r0, #53	; 0x35
 8000d6c:	f7ff ff8e 	bl	8000c8c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d70:	20c1      	movs	r0, #193	; 0xc1
 8000d72:	f7ff ff7d 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d76:	2011      	movs	r0, #17
 8000d78:	f7ff ff88 	bl	8000c8c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d7c:	20c5      	movs	r0, #197	; 0xc5
 8000d7e:	f7ff ff77 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d82:	2045      	movs	r0, #69	; 0x45
 8000d84:	f7ff ff82 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d88:	2045      	movs	r0, #69	; 0x45
 8000d8a:	f7ff ff7f 	bl	8000c8c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d8e:	20c7      	movs	r0, #199	; 0xc7
 8000d90:	f7ff ff6e 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d94:	20a2      	movs	r0, #162	; 0xa2
 8000d96:	f7ff ff79 	bl	8000c8c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d9a:	20f2      	movs	r0, #242	; 0xf2
 8000d9c:	f7ff ff68 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff73 	bl	8000c8c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000da6:	2026      	movs	r0, #38	; 0x26
 8000da8:	f7ff ff62 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff6d 	bl	8000c8c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000db2:	20e0      	movs	r0, #224	; 0xe0
 8000db4:	f7ff ff5c 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000db8:	200f      	movs	r0, #15
 8000dba:	f7ff ff67 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000dbe:	2026      	movs	r0, #38	; 0x26
 8000dc0:	f7ff ff64 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000dc4:	2024      	movs	r0, #36	; 0x24
 8000dc6:	f7ff ff61 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000dca:	200b      	movs	r0, #11
 8000dcc:	f7ff ff5e 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000dd0:	200e      	movs	r0, #14
 8000dd2:	f7ff ff5b 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000dd6:	2009      	movs	r0, #9
 8000dd8:	f7ff ff58 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000ddc:	2054      	movs	r0, #84	; 0x54
 8000dde:	f7ff ff55 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000de2:	20a8      	movs	r0, #168	; 0xa8
 8000de4:	f7ff ff52 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000de8:	2046      	movs	r0, #70	; 0x46
 8000dea:	f7ff ff4f 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000dee:	200c      	movs	r0, #12
 8000df0:	f7ff ff4c 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000df4:	2017      	movs	r0, #23
 8000df6:	f7ff ff49 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000dfa:	2009      	movs	r0, #9
 8000dfc:	f7ff ff46 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff ff43 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e06:	2007      	movs	r0, #7
 8000e08:	f7ff ff40 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff3d 	bl	8000c8c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e12:	20e1      	movs	r0, #225	; 0xe1
 8000e14:	f7ff ff2c 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff37 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000e1e:	2019      	movs	r0, #25
 8000e20:	f7ff ff34 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e24:	201b      	movs	r0, #27
 8000e26:	f7ff ff31 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff2e 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000e30:	2010      	movs	r0, #16
 8000e32:	f7ff ff2b 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e36:	2007      	movs	r0, #7
 8000e38:	f7ff ff28 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000e3c:	202a      	movs	r0, #42	; 0x2a
 8000e3e:	f7ff ff25 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000e42:	2047      	movs	r0, #71	; 0x47
 8000e44:	f7ff ff22 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000e48:	2039      	movs	r0, #57	; 0x39
 8000e4a:	f7ff ff1f 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff ff1c 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e54:	2006      	movs	r0, #6
 8000e56:	f7ff ff19 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff ff16 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e60:	2030      	movs	r0, #48	; 0x30
 8000e62:	f7ff ff13 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e66:	2038      	movs	r0, #56	; 0x38
 8000e68:	f7ff ff10 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	f7ff ff0d 	bl	8000c8c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e72:	2036      	movs	r0, #54	; 0x36
 8000e74:	f7ff fefc 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000e78:	20c8      	movs	r0, #200	; 0xc8
 8000e7a:	f7ff ff07 	bl	8000c8c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e7e:	202a      	movs	r0, #42	; 0x2a
 8000e80:	f7ff fef6 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff01 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fefe 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fefb 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e96:	20ef      	movs	r0, #239	; 0xef
 8000e98:	f7ff fef8 	bl	8000c8c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e9c:	202b      	movs	r0, #43	; 0x2b
 8000e9e:	f7ff fee7 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fef2 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff feef 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff feec 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000eb4:	203f      	movs	r0, #63	; 0x3f
 8000eb6:	f7ff fee9 	bl	8000c8c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000eba:	203a      	movs	r0, #58	; 0x3a
 8000ebc:	f7ff fed8 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000ec0:	2055      	movs	r0, #85	; 0x55
 8000ec2:	f7ff fee3 	bl	8000c8c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000ec6:	2011      	movs	r0, #17
 8000ec8:	f7ff fed2 	bl	8000c70 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <LCD_REG_Config+0x230>)
 8000ece:	f7ff fe73 	bl	8000bb8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000ed2:	2029      	movs	r0, #41	; 0x29
 8000ed4:	f7ff fecc 	bl	8000c70 <LCD_Write_Cmd>
	
	
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	0002bffc 	.word	0x0002bffc

08000ee0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	80fb      	strh	r3, [r7, #6]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80bb      	strh	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
 8000efa:	4613      	mov	r3, r2
 8000efc:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000efe:	202a      	movs	r0, #42	; 0x2a
 8000f00:	f7ff feb6 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff febe 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff feb8 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	4413      	add	r3, r2
 8000f22:	3b01      	subs	r3, #1
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff feaf 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fea4 	bl	8000c8c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f44:	202b      	movs	r0, #43	; 0x2b
 8000f46:	f7ff fe93 	bl	8000c70 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe9b 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe95 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	883b      	ldrh	r3, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	121b      	asrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fe8c 	bl	8000c8c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f74:	88ba      	ldrh	r2, [r7, #4]
 8000f76:	883b      	ldrh	r3, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fe81 	bl	8000c8c <LCD_Write_Data>
	
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}

08000f92 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fa2:	202c      	movs	r0, #44	; 0x2c
 8000fa4:	f7ff fe64 	bl	8000c70 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e006      	b.n	8000fbc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe6b 	bl	8000c8c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f4      	bcc.n	8000fae <LCD_FillColor+0x1c>
		
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000fce:	b590      	push	{r4, r7, lr}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4611      	mov	r1, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4623      	mov	r3, r4
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	80bb      	strh	r3, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000fec:	883b      	ldrh	r3, [r7, #0]
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	88b9      	ldrh	r1, [r7, #4]
 8000ff2:	88f8      	ldrh	r0, [r7, #6]
 8000ff4:	f7ff ff74 	bl	8000ee0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	883a      	ldrh	r2, [r7, #0]
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	461a      	mov	r2, r3
 8001002:	8b3b      	ldrh	r3, [r7, #24]
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f7ff ffc3 	bl	8000f92 <LCD_FillColor>
	
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}

08001014 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	3b20      	subs	r3, #32
 800102a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800102c:	88b9      	ldrh	r1, [r7, #4]
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	2310      	movs	r3, #16
 8001032:	2208      	movs	r2, #8
 8001034:	f7ff ff54 	bl	8000ee0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001038:	202c      	movs	r0, #44	; 0x2c
 800103a:	f7ff fe19 	bl	8000c70 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800103e:	2300      	movs	r3, #0
 8001040:	73bb      	strb	r3, [r7, #14]
 8001042:	e023      	b.n	800108c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001044:	7b3a      	ldrb	r2, [r7, #12]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	4914      	ldr	r1, [pc, #80]	; (800109c <LCD_DrawChar+0x88>)
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	440a      	add	r2, r1
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001054:	2300      	movs	r3, #0
 8001056:	737b      	strb	r3, [r7, #13]
 8001058:	e012      	b.n	8001080 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001064:	201f      	movs	r0, #31
 8001066:	f7ff fe11 	bl	8000c8c <LCD_Write_Data>
 800106a:	e003      	b.n	8001074 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800106c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001070:	f7ff fe0c 	bl	8000c8c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	3301      	adds	r3, #1
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	2b07      	cmp	r3, #7
 8001084:	d9e9      	bls.n	800105a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	3301      	adds	r3, #1
 800108a:	73bb      	strb	r3, [r7, #14]
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d9d8      	bls.n	8001044 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08008fd0 	.word	0x08008fd0

080010a0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	603a      	str	r2, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
 80010ac:	460b      	mov	r3, r1
 80010ae:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80010b0:	e01c      	b.n	80010ec <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2be8      	cmp	r3, #232	; 0xe8
 80010b6:	d904      	bls.n	80010c2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010b8:	2300      	movs	r3, #0
 80010ba:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	3310      	adds	r3, #16
 80010c0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80010c8:	d903      	bls.n	80010d2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80010ca:	2300      	movs	r3, #0
 80010cc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	88b9      	ldrh	r1, [r7, #4]
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff9a 	bl	8001014 <LCD_DrawChar>
		
		pStr ++;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	3308      	adds	r3, #8
 80010ea:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1de      	bne.n	80010b2 <LCD_DrawString+0x12>
		
	}
	
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <initFileStruct>:
//void initFileSturct(FileStruct*);
//int initFileHeader(FileStruct*);
//int readFile(FileStruct*);
//int16_t readSample(FileStruct*);

static inline void initFileStruct(FileStruct *fileStruct) {
 80010fe:	b480      	push	{r7}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BUFF_NUM; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e03a      	b.n	8001182 <initFileStruct+0x84>
		fileStruct->structs[i].curr = fileStruct->structs[i].first = fileStruct->structs[i].raw;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800111a:	3318      	adds	r3, #24
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 800112a:	fb00 f303 	mul.w	r3, r0, r3
 800112e:	440b      	add	r3, r1
 8001130:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001134:	3304      	adds	r3, #4
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	4413      	add	r3, r2
 8001146:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800114a:	3304      	adds	r3, #4
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 8001156:	fb00 f303 	mul.w	r3, r0, r3
 800115a:	440b      	add	r3, r1
 800115c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001160:	3308      	adds	r3, #8
 8001162:	601a      	str	r2, [r3, #0]
		fileStruct->structs[i].buffSize = 0;
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800116c:	fb01 f303 	mul.w	r3, r1, r3
 8001170:	4413      	add	r3, r2
 8001172:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001176:	330c      	adds	r3, #12
 8001178:	2200      	movs	r2, #0
 800117a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFF_NUM; i++) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	ddc1      	ble.n	800110c <initFileStruct+0xe>
	}
	fileStruct->currReading = BUFF_NUM - 1; // set to use the first fileStruct
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
	fileStruct->currWriting = 0; // also set to use the first fileStruct
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	fileStruct->inUse = 1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fileStruct->fileEmpty = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	fileStruct->sampleCount = 0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011be:	461a      	mov	r2, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <initFileHeader>:

static inline int initFileHeader(FileStruct *fileStruct) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	int bytes_read;
	return f_read(&(fileStruct->file), &(fileStruct->header), sizeof(WAV_HEADER), &bytes_read);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 80011e0:	310c      	adds	r1, #12
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	222c      	movs	r2, #44	; 0x2c
 80011e8:	f006 fe8e 	bl	8007f08 <f_read>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <readFile>:

static inline int readFile(FileStruct* f) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	if (f->fileEmpty) return -1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001204:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <readFile+0x1c>
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	e077      	b.n	8001302 <readFile+0x10c>

	if (f->currWriting == f->currReading) return -1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001218:	f893 2845 	ldrb.w	r2, [r3, #2117]	; 0x845
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001222:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001226:	429a      	cmp	r2, r3
 8001228:	d102      	bne.n	8001230 <readFile+0x3a>
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e068      	b.n	8001302 <readFile+0x10c>
	if (fileStructEmpty(f, f->currWriting)) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001236:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 800123a:	4619      	mov	r1, r3
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	4413      	add	r3, r2
 8001248:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800124c:	330c      	adds	r3, #12
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d155      	bne.n	8001300 <readFile+0x10a>
		FRESULT res = f_read(&(f->file), f->structs[f->currWriting].raw, BUFF_SIZE, &(f->structs[f->currWriting].buffSize));
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125c:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8001260:	461a      	mov	r2, r3
 8001262:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800126e:	3318      	adds	r3, #24
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	1d19      	adds	r1, r3, #4
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127c:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8001280:	461a      	mov	r2, r3
 8001282:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800128e:	3308      	adds	r3, #8
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129a:	f006 fe35 	bl	8007f08 <f_read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || f->structs[f->currWriting].buffSize == 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <readFile+0xd6>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ae:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80012b2:	4619      	mov	r1, r3
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80012c4:	330c      	adds	r3, #12
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <readFile+0xe8>
			f->fileEmpty = 1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	e011      	b.n	8001302 <readFile+0x10c>
		}
		f->currWriting = (f->currWriting + 1) % BUFF_NUM;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80012e8:	3301      	adds	r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fc:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	}
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <readSample>:

static inline uint16_t readSample(FileStruct* f) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	if (!f->inUse) return 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001318:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <readSample+0x1a>
 8001320:	2300      	movs	r3, #0
 8001322:	e0e5      	b.n	80014f0 <readSample+0x1e6>

	if (!fileStructEmpty(f, f->currReading)) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 800132e:	4619      	mov	r1, r3
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001340:	330c      	adds	r3, #12
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d079      	beq.n	800143c <readSample+0x132>
		f->structs[f->currReading].buffSize -= 2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001352:	4619      	mov	r1, r3
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001364:	330c      	adds	r3, #12
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800136e:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 8001372:	4610      	mov	r0, r2
 8001374:	3b02      	subs	r3, #2
 8001376:	b299      	uxth	r1, r3
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 800137e:	fb00 f303 	mul.w	r3, r0, r3
 8001382:	4413      	add	r3, r2
 8001384:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001388:	330c      	adds	r3, #12
 800138a:	460a      	mov	r2, r1
 800138c:	801a      	strh	r2, [r3, #0]
		temp = (f->structs[f->currReading].curr[1] << 8) | f->structs[f->currReading].curr[0];
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001394:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001398:	4619      	mov	r1, r3
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80013aa:	3308      	adds	r3, #8
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80013c0:	4618      	mov	r0, r3
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80013c8:	fb00 f303 	mul.w	r3, r0, r3
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80013d2:	3308      	adds	r3, #8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b21b      	sxth	r3, r3
 80013de:	81fb      	strh	r3, [r7, #14]
		f->structs[f->currReading].curr += 2;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e6:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80013ea:	4619      	mov	r1, r3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80013fc:	3308      	adds	r3, #8
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001406:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 800140a:	4610      	mov	r0, r2
 800140c:	1c9a      	adds	r2, r3, #2
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8001414:	fb00 f303 	mul.w	r3, r0, r3
 8001418:	440b      	add	r3, r1
 800141a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800141e:	3308      	adds	r3, #8
 8001420:	601a      	str	r2, [r3, #0]
		f->sampleCount++;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001428:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 800142c:	3301      	adds	r3, #1
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001434:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848
		return temp;
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	e059      	b.n	80014f0 <readSample+0x1e6>
	} else if (!fileStructEmpty(f, (f->currReading + 1) % BUFF_NUM)) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001446:	3301      	adds	r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	bfb8      	it	lt
 8001450:	425b      	neglt	r3, r3
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4413      	add	r3, r2
 800145e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8001462:	330c      	adds	r3, #12
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d034      	beq.n	80014d4 <readSample+0x1ca>
		f->currReading = (f->currReading + 1) % BUFF_NUM;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001474:	3301      	adds	r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	bfb8      	it	lt
 800147e:	425b      	neglt	r3, r3
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
		f->structs[f->currReading].curr = f->structs[f->currReading].first;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001492:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8001496:	4619      	mov	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80014a2:	4618      	mov	r0, r3
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80014b4:	3304      	adds	r3, #4
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80014be:	fb00 f303 	mul.w	r3, r0, r3
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80014c8:	3308      	adds	r3, #8
 80014ca:	601a      	str	r2, [r3, #0]
		readSample(f);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff1c 	bl	800130a <readSample>
	} else {
		if (f->fileEmpty) f->inUse = 0;
		return 0;
	}
}
 80014d2:	e00d      	b.n	80014f0 <readSample+0x1e6>
		if (f->fileEmpty) f->inUse = 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <readSample+0x1e4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <error_handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define TESTFILE
void error_handler(int res, const char* msg) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	char buff[100];
		sprintf(buff, "%d %s", res, msg);
 8001502:	f107 000c 	add.w	r0, r7, #12
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <error_handler+0x34>)
 800150c:	f007 f84e 	bl	80085ac <siprintf>
	  LCD_DrawString(40, 0, buff);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	461a      	mov	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	2028      	movs	r0, #40	; 0x28
 800151a:	f7ff fdc1 	bl	80010a0 <LCD_DrawString>
	  HAL_Delay(1000000);
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <error_handler+0x38>)
 8001520:	f000 ff86 	bl	8002430 <HAL_Delay>
}
 8001524:	bf00      	nop
 8001526:	3770      	adds	r7, #112	; 0x70
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	08008eb8 	.word	0x08008eb8
 8001530:	000f4240 	.word	0x000f4240

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 ff16 	bl	800236c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 fa14 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001544:	f000 fb7c 	bl	8001c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001548:	f000 fb5c 	bl	8001c04 <MX_DMA_Init>
  MX_FSMC_Init();
 800154c:	f000 fc2e 	bl	8001dac <MX_FSMC_Init>
  MX_DAC_Init();
 8001550:	f000 fa52 	bl	80019f8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001554:	f000 fabc 	bl	8001ad0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001558:	f000 fb06 	bl	8001b68 <MX_TIM3_Init>
//  MX_SDIO_SD_Init();
  MX_FATFS_Init();
 800155c:	f004 f8c4 	bl	80056e8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001560:	f000 fa80 	bl	8001a64 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001564:	f7ff fb39 	bl	8000bda <LCD_INIT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001568:	2100      	movs	r1, #0
 800156a:	485c      	ldr	r0, [pc, #368]	; (80016dc <main+0x1a8>)
 800156c:	f001 f8b3 	bl	80026d6 <HAL_DAC_Start>

//  TIM2->PSC = 7900;
//  TIM2->ARR = 7900;
  TIM2->ARR = 72000000 / 22050 - 1;
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  FATFS FatFs;
  DIR dir;
  FILINFO fno;

#ifdef TESTFILE
  HAL_Delay(20);
 800157a:	2014      	movs	r0, #20
 800157c:	f000 ff58 	bl	8002430 <HAL_Delay>
  res = f_mount(&FatFs, "", 1);
 8001580:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001584:	3b04      	subs	r3, #4
 8001586:	2201      	movs	r2, #1
 8001588:	4955      	ldr	r1, [pc, #340]	; (80016e0 <main+0x1ac>)
 800158a:	4618      	mov	r0, r3
 800158c:	f006 f96c 	bl	8007868 <f_mount>
 8001590:	4603      	mov	r3, r0
 8001592:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001596:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800159a:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "No sd card found!");
 800159c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015a0:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <main+0x88>
 80015aa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015ae:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	494b      	ldr	r1, [pc, #300]	; (80016e4 <main+0x1b0>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff9e 	bl	80014f8 <error_handler>
  HAL_Delay(20);
 80015bc:	2014      	movs	r0, #20
 80015be:	f000 ff37 	bl	8002430 <HAL_Delay>

  res = f_opendir(&dir, "0:");
 80015c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c6:	3b24      	subs	r3, #36	; 0x24
 80015c8:	4947      	ldr	r1, [pc, #284]	; (80016e8 <main+0x1b4>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 fe84 	bl	80082d8 <f_opendir>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015d6:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80015da:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open drive");
 80015dc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015e0:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <main+0xc8>
 80015ea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015ee:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	493d      	ldr	r1, [pc, #244]	; (80016ec <main+0x1b8>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff7e 	bl	80014f8 <error_handler>
  HAL_Delay(20);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f000 ff17 	bl	8002430 <HAL_Delay>

  int lineNum = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001608:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800160c:	6013      	str	r3, [r2, #0]
  char* filename;
  while (1) {
	  res = f_readdir(&dir, &fno);
 800160e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001612:	3a3c      	subs	r2, #60	; 0x3c
 8001614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001618:	3b24      	subs	r3, #36	; 0x24
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f006 feed 	bl	80083fc <f_readdir>
 8001622:	4603      	mov	r3, r0
 8001624:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001628:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800162c:	7013      	strb	r3, [r2, #0]
	  if (res != FR_OK || fno.fname[0] == 0) {
 800162e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001632:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <main+0x114>
 800163c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001640:	f813 3c73 	ldrb.w	r3, [r3, #-115]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11b      	bne.n	8001680 <main+0x14c>
		  sprintf(buff, "%d no more :(", res);
 8001648:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800164c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <main+0x1bc>)
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <main+0x1c0>)
 8001658:	f006 ffa8 	bl	80085ac <siprintf>
		  LCD_DrawString(0, 20+20*(lineNum), buff);
 800165c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001660:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	b29b      	uxth	r3, r3
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <main+0x1c0>)
 8001676:	4619      	mov	r1, r3
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fd11 	bl	80010a0 <LCD_DrawString>
		  break;
 800167e:	e03c      	b.n	80016fa <main+0x1c6>
	  }
	  filename = fno.fname;
 8001680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001684:	3b3c      	subs	r3, #60	; 0x3c
 8001686:	3309      	adds	r3, #9
 8001688:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800168c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001690:	6013      	str	r3, [r2, #0]
	  LCD_DrawString(0, 20+20*(lineNum++), filename);
 8001692:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001696:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80016a2:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 80016a6:	600a      	str	r2, [r1, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80016ba:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fcec 	bl	80010a0 <LCD_DrawString>
	  if (filename[0] == 'M') break;
 80016c8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016cc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b4d      	cmp	r3, #77	; 0x4d
 80016d6:	d00f      	beq.n	80016f8 <main+0x1c4>
	  res = f_readdir(&dir, &fno);
 80016d8:	e799      	b.n	800160e <main+0xda>
 80016da:	bf00      	nop
 80016dc:	200000ac 	.word	0x200000ac
 80016e0:	08008ec0 	.word	0x08008ec0
 80016e4:	08008ec4 	.word	0x08008ec4
 80016e8:	08008ed8 	.word	0x08008ed8
 80016ec:	08008edc 	.word	0x08008edc
 80016f0:	08008ef0 	.word	0x08008ef0
 80016f4:	200002b8 	.word	0x200002b8
	  if (filename[0] == 'M') break;
 80016f8:	bf00      	nop
  }


  // Initialize the fileStruct struct
  res = f_open(&(sampleFile.file), filename, FA_READ);
 80016fa:	2201      	movs	r2, #1
 80016fc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001700:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	488c      	ldr	r0, [pc, #560]	; (8001938 <main+0x404>)
 8001708:	f006 f8f8 	bl	80078fc <f_open>
 800170c:	4603      	mov	r3, r0
 800170e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001712:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8001716:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open file");
 8001718:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800171c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <main+0x204>
 8001726:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800172a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4982      	ldr	r1, [pc, #520]	; (800193c <main+0x408>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fee0 	bl	80014f8 <error_handler>

  HAL_Delay(20);
 8001738:	2014      	movs	r0, #20
 800173a:	f000 fe79 	bl	8002430 <HAL_Delay>
  initFileStruct(&sampleFile);
 800173e:	487e      	ldr	r0, [pc, #504]	; (8001938 <main+0x404>)
 8001740:	f7ff fcdd 	bl	80010fe <initFileStruct>
  res = initFileHeader(&sampleFile);
 8001744:	487c      	ldr	r0, [pc, #496]	; (8001938 <main+0x404>)
 8001746:	f7ff fd43 	bl	80011d0 <initFileHeader>
 800174a:	4603      	mov	r3, r0
 800174c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001750:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8001754:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot read file");
 8001756:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800175a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <main+0x242>
 8001764:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001768:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4974      	ldr	r1, [pc, #464]	; (8001940 <main+0x40c>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fec1 	bl	80014f8 <error_handler>

  HAL_TIM_Base_Start(&htim2);
 8001776:	4873      	ldr	r0, [pc, #460]	; (8001944 <main+0x410>)
 8001778:	f003 f974 	bl	8004a64 <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800177c:	4b71      	ldr	r3, [pc, #452]	; (8001944 <main+0x410>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <main+0x410>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	60da      	str	r2, [r3, #12]

  // Display some information about the header
  	WavHeader *header = &(sampleFile.header);
 800178c:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <main+0x414>)
 800178e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001792:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001796:	6013      	str	r3, [r2, #0]
    sprintf(buff, "hertz: %d", header->sampleFreq);
 8001798:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800179c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4969      	ldr	r1, [pc, #420]	; (800194c <main+0x418>)
 80017a8:	4869      	ldr	r0, [pc, #420]	; (8001950 <main+0x41c>)
 80017aa:	f006 feff 	bl	80085ac <siprintf>
    LCD_DrawString(30, 100, buff);
 80017ae:	4a68      	ldr	r2, [pc, #416]	; (8001950 <main+0x41c>)
 80017b0:	2164      	movs	r1, #100	; 0x64
 80017b2:	201e      	movs	r0, #30
 80017b4:	f7ff fc74 	bl	80010a0 <LCD_DrawString>
    sprintf(buff, "bits/sample: %d", header->bitsPerSample);
 80017b8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80017bc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80017c4:	461a      	mov	r2, r3
 80017c6:	4963      	ldr	r1, [pc, #396]	; (8001954 <main+0x420>)
 80017c8:	4861      	ldr	r0, [pc, #388]	; (8001950 <main+0x41c>)
 80017ca:	f006 feef 	bl	80085ac <siprintf>
    LCD_DrawString(30, 120, buff);
 80017ce:	4a60      	ldr	r2, [pc, #384]	; (8001950 <main+0x41c>)
 80017d0:	2178      	movs	r1, #120	; 0x78
 80017d2:	201e      	movs	r0, #30
 80017d4:	f7ff fc64 	bl	80010a0 <LCD_DrawString>
    sprintf(buff, "channels: %d", header->channels);
 80017d8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80017dc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	8adb      	ldrh	r3, [r3, #22]
 80017e4:	461a      	mov	r2, r3
 80017e6:	495c      	ldr	r1, [pc, #368]	; (8001958 <main+0x424>)
 80017e8:	4859      	ldr	r0, [pc, #356]	; (8001950 <main+0x41c>)
 80017ea:	f006 fedf 	bl	80085ac <siprintf>
    LCD_DrawString(30, 140, buff);
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <main+0x41c>)
 80017f0:	218c      	movs	r1, #140	; 0x8c
 80017f2:	201e      	movs	r0, #30
 80017f4:	f7ff fc54 	bl	80010a0 <LCD_DrawString>
    sprintf(buff, "data: %d", header->dataChunkLength);
 80017f8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80017fc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	461a      	mov	r2, r3
 8001806:	4955      	ldr	r1, [pc, #340]	; (800195c <main+0x428>)
 8001808:	4851      	ldr	r0, [pc, #324]	; (8001950 <main+0x41c>)
 800180a:	f006 fecf 	bl	80085ac <siprintf>
    LCD_DrawString(30, 160, buff);
 800180e:	4a50      	ldr	r2, [pc, #320]	; (8001950 <main+0x41c>)
 8001810:	21a0      	movs	r1, #160	; 0xa0
 8001812:	201e      	movs	r0, #30
 8001814:	f7ff fc44 	bl	80010a0 <LCD_DrawString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int some_tick = HAL_GetTick();
 8001818:	f000 fe00 	bl	800241c <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001822:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001826:	6013      	str	r3, [r2, #0]

  while (1)
  {

	  if (HAL_GetTick() - some_tick > 200) {
 8001828:	f000 fdf8 	bl	800241c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001832:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2bc8      	cmp	r3, #200	; 0xc8
 800183c:	d90b      	bls.n	8001856 <main+0x322>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800183e:	2102      	movs	r1, #2
 8001840:	4847      	ldr	r0, [pc, #284]	; (8001960 <main+0x42c>)
 8001842:	f001 fd71 	bl	8003328 <HAL_GPIO_TogglePin>
		  some_tick = HAL_GetTick();
 8001846:	f000 fde9 	bl	800241c <HAL_GetTick>
 800184a:	4603      	mov	r3, r0
 800184c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001850:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001854:	6013      	str	r3, [r2, #0]
//	  	  LCD_DrawString(0, 210, buff);
//	  	  sprintf(buff, "r:%d,w:%d,empty:%d", sampleFile.currReading, sampleFile.currWriting, sampleFile.fileEmpty);
//	  	  LCD_DrawString(0, 230, buff);
//		  sprintf(buff, "sample: %6d     ", sample_sum);
//	      LCD_DrawString(20, 80, buff);
	  if (sampleFile.sampleCount % 3241 == 0) {
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <main+0x404>)
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	f8d3 2848 	ldr.w	r2, [r3, #2120]	; 0x848
 8001860:	4b40      	ldr	r3, [pc, #256]	; (8001964 <main+0x430>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	1ad1      	subs	r1, r2, r3
 8001868:	0849      	lsrs	r1, r1, #1
 800186a:	440b      	add	r3, r1
 800186c:	0adb      	lsrs	r3, r3, #11
 800186e:	f640 41a9 	movw	r1, #3241	; 0xca9
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10e      	bne.n	800189a <main+0x366>
		  sprintf(buff, "count: %6d     ", sampleFile.sampleCount);
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <main+0x404>)
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 8001886:	461a      	mov	r2, r3
 8001888:	4937      	ldr	r1, [pc, #220]	; (8001968 <main+0x434>)
 800188a:	4831      	ldr	r0, [pc, #196]	; (8001950 <main+0x41c>)
 800188c:	f006 fe8e 	bl	80085ac <siprintf>
	      LCD_DrawString(20, 80, buff);
 8001890:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <main+0x41c>)
 8001892:	2150      	movs	r1, #80	; 0x50
 8001894:	2014      	movs	r0, #20
 8001896:	f7ff fc03 	bl	80010a0 <LCD_DrawString>
	  }

		readFile(&sampleFile);
 800189a:	4827      	ldr	r0, [pc, #156]	; (8001938 <main+0x404>)
 800189c:	f7ff fcab 	bl	80011f6 <readFile>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
		__disable_irq();
		if (!sampleFile.inUse) {
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <main+0x404>)
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d13e      	bne.n	8001930 <main+0x3fc>
		  res = f_open(&(sampleFile.file), filename, FA_READ);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80018b8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	481e      	ldr	r0, [pc, #120]	; (8001938 <main+0x404>)
 80018c0:	f006 f81c 	bl	80078fc <f_open>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80018ca:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80018ce:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot open file");
 80018d0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80018d4:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <main+0x3bc>
 80018de:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80018e2:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4914      	ldr	r1, [pc, #80]	; (800193c <main+0x408>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe04 	bl	80014f8 <error_handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80018f0:	b662      	cpsie	i
}
 80018f2:	bf00      	nop
		  __enable_irq();
		  initFileStruct(&sampleFile);
 80018f4:	4810      	ldr	r0, [pc, #64]	; (8001938 <main+0x404>)
 80018f6:	f7ff fc02 	bl	80010fe <initFileStruct>
  __ASM volatile ("cpsid i" : : : "memory");
 80018fa:	b672      	cpsid	i
}
 80018fc:	bf00      	nop
		  __disable_irq();
		  res = initFileHeader(&sampleFile);
 80018fe:	480e      	ldr	r0, [pc, #56]	; (8001938 <main+0x404>)
 8001900:	f7ff fc66 	bl	80011d0 <initFileHeader>
 8001904:	4603      	mov	r3, r0
 8001906:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800190a:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800190e:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot read file");
 8001910:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001914:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <main+0x3fc>
 800191e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001922:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4905      	ldr	r1, [pc, #20]	; (8001940 <main+0x40c>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fde4 	bl	80014f8 <error_handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001930:	b662      	cpsie	i
}
 8001932:	bf00      	nop
	  if (HAL_GetTick() - some_tick > 200) {
 8001934:	e778      	b.n	8001828 <main+0x2f4>
 8001936:	bf00      	nop
 8001938:	200002d8 	.word	0x200002d8
 800193c:	08008f00 	.word	0x08008f00
 8001940:	08008f14 	.word	0x08008f14
 8001944:	200001e0 	.word	0x200001e0
 8001948:	20001304 	.word	0x20001304
 800194c:	08008f28 	.word	0x08008f28
 8001950:	200002b8 	.word	0x200002b8
 8001954:	08008f34 	.word	0x08008f34
 8001958:	08008f44 	.word	0x08008f44
 800195c:	08008f54 	.word	0x08008f54
 8001960:	40010c00 	.word	0x40010c00
 8001964:	4388e2db 	.word	0x4388e2db
 8001968:	08008f60 	.word	0x08008f60

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b090      	sub	sp, #64	; 0x40
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	2228      	movs	r2, #40	; 0x28
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f006 fe0e 	bl	800859c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199c:	2301      	movs	r3, #1
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a0:	2302      	movs	r3, #2
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fcd1 	bl	800335c <HAL_RCC_OscConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019c0:	f000 fa86 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 ff3e 	bl	8003860 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019ea:	f000 fa71 	bl	8001ed0 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_DAC_Init+0x64>)
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <MX_DAC_Init+0x68>)
 8001a0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <MX_DAC_Init+0x64>)
 8001a0e:	f000 fe40 	bl	8002692 <HAL_DAC_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a18:	f000 fa5a 	bl	8001ed0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_DAC_Init+0x64>)
 8001a2c:	f000 fec8 	bl	80027c0 <HAL_DAC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a36:	f000 fa4b 	bl	8001ed0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001a3a:	2324      	movs	r3, #36	; 0x24
 8001a3c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2210      	movs	r2, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_DAC_Init+0x64>)
 8001a46:	f000 febb 	bl	80027c0 <HAL_DAC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001a50:	f000 fa3e 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  /* USER CODE END DAC_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000ac 	.word	0x200000ac
 8001a60:	40007400 	.word	0x40007400

08001a64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <MX_SPI2_Init+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_SPI2_Init+0x64>)
 8001ab6:	f002 fb31 	bl	800411c <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ac0:	f000 fa06 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000188 	.word	0x20000188
 8001acc:	40003800 	.word	0x40003800

08001ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b02:	f241 1293 	movw	r2, #4499	; 0x1193
 8001b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b16:	f002 ff56 	bl	80049c6 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b20:	f000 f9d6 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b32:	f003 f8f7 	bl	8004d24 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b3c:	f000 f9c8 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b40:	2320      	movs	r3, #32
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b4e:	f003 fae1 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b58:	f000 f9ba 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200001e0 	.word	0x200001e0

08001b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <MX_TIM3_Init+0x98>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3264;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001b98:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8001b9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001bac:	f002 ff0b 	bl	80049c6 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f000 f98b 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001bc8:	f003 f8ac 	bl	8004d24 <HAL_TIM_ConfigClockSource>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f000 f97d 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_TIM3_Init+0x94>)
 8001be4:	f003 fa96 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bee:	f000 f96f 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000228 	.word	0x20000228
 8001c00:	40000400 	.word	0x40000400

08001c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_DMA_Init+0x38>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <MX_DMA_Init+0x38>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_DMA_Init+0x38>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	203b      	movs	r0, #59	; 0x3b
 8001c28:	f000 fcfd 	bl	8002626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8001c2c:	203b      	movs	r0, #59	; 0x3b
 8001c2e:	f000 fd16 	bl	800265e <HAL_NVIC_EnableIRQ>

}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a3c      	ldr	r2, [pc, #240]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001cba:	f043 0320 	orr.w	r3, r3, #32
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <MX_GPIO_Init+0x154>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f241 0103 	movw	r1, #4099	; 0x1003
 8001cd2:	4831      	ldr	r0, [pc, #196]	; (8001d98 <MX_GPIO_Init+0x158>)
 8001cd4:	f001 fb10 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cde:	482f      	ldr	r0, [pc, #188]	; (8001d9c <MX_GPIO_Init+0x15c>)
 8001ce0:	f001 fb0a 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cea:	482d      	ldr	r0, [pc, #180]	; (8001da0 <MX_GPIO_Init+0x160>)
 8001cec:	f001 fb04 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	482b      	ldr	r0, [pc, #172]	; (8001da4 <MX_GPIO_Init+0x164>)
 8001cf6:	f001 faff 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0318 	add.w	r3, r7, #24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4826      	ldr	r0, [pc, #152]	; (8001da8 <MX_GPIO_Init+0x168>)
 8001d10:	f001 f95e 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8001d14:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2302      	movs	r3, #2
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <MX_GPIO_Init+0x158>)
 8001d2e:	f001 f94f 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4814      	ldr	r0, [pc, #80]	; (8001d9c <MX_GPIO_Init+0x15c>)
 8001d4c:	f001 f940 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4619      	mov	r1, r3
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_GPIO_Init+0x160>)
 8001d6a:	f001 f931 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_GPIO_Init+0x164>)
 8001d86:	f001 f923 	bl	8002fd0 <HAL_GPIO_Init>

}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	40011400 	.word	0x40011400
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40011800 	.word	0x40011800
 8001da8:	40011000 	.word	0x40011000

08001dac <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	615a      	str	r2, [r3, #20]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dc6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001dca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dce:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <MX_FSMC_Init+0xc0>)
 8001dd0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001de6:	2210      	movs	r2, #16
 8001de8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e22:	230f      	movs	r3, #15
 8001e24:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e26:	230f      	movs	r3, #15
 8001e28:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e2a:	23ff      	movs	r3, #255	; 0xff
 8001e2c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e2e:	230f      	movs	r3, #15
 8001e30:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e32:	2310      	movs	r3, #16
 8001e34:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e36:	2311      	movs	r3, #17
 8001e38:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <MX_FSMC_Init+0xbc>)
 8001e46:	f002 fd71 	bl	800492c <HAL_SRAM_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001e50:	f000 f83e 	bl	8001ed0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_FSMC_Init+0xc4>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <MX_FSMC_Init+0xc4>)
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000270 	.word	0x20000270
 8001e6c:	a0000104 	.word	0xa0000104
 8001e70:	40010000 	.word	0x40010000

08001e74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e84:	d118      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x44>
//		counter++;
		sample_sum = readSample(&sampleFile);
 8001e86:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e88:	f7ff fa3f 	bl	800130a <readSample>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e92:	801a      	strh	r2, [r3, #0]
		dac_out = (sample_sum + 32768);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ea4:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (dac_out) >> 5);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4806      	ldr	r0, [pc, #24]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001eb4:	f000 fc60 	bl	8002778 <HAL_DAC_SetValue>
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200002d8 	.word	0x200002d8
 8001ec4:	20001b26 	.word	0x20001b26
 8001ec8:	20001b24 	.word	0x20001b24
 8001ecc:	200000ac 	.word	0x200000ac

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_MspInit+0x5c>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_MspInit+0x60>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_MspInit+0x60>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000

08001f40 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_DAC_MspInit+0xc0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d14a      	bne.n	8001ff6 <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	4a27      	ldr	r2, [pc, #156]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f6a:	61d3      	str	r3, [r2, #28]
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_DAC_MspInit+0xc4>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f90:	2330      	movs	r3, #48	; 0x30
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <HAL_DAC_MspInit+0xc8>)
 8001fa0:	f001 f816 	bl	8002fd0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_DAC_MspInit+0xd0>)
 8001fa8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fac:	2210      	movs	r2, #16
 8001fae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fce:	2220      	movs	r2, #32
 8001fd0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001fda:	480c      	ldr	r0, [pc, #48]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fdc:	f000 fc3e 	bl	800285c <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8001fe6:	f7ff ff73 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_DAC_MspInit+0xcc>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40007400 	.word	0x40007400
 8002004:	40021000 	.word	0x40021000
 8002008:	40010800 	.word	0x40010800
 800200c:	200000c0 	.word	0x200000c0
 8002010:	40020444 	.word	0x40020444

08002014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_SPI_MspInit+0x8c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d131      	bne.n	8002098 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203e:	61d3      	str	r3, [r2, #28]
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_SPI_MspInit+0x90>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002064:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4619      	mov	r1, r3
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <HAL_SPI_MspInit+0x94>)
 800207a:	f000 ffa9 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800207e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_SPI_MspInit+0x94>)
 8002094:	f000 ff9c 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40003800 	.word	0x40003800
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010c00 	.word	0x40010c00

080020ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d114      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	201c      	movs	r0, #28
 80020dc:	f000 faa3 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e0:	201c      	movs	r0, #28
 80020e2:	f000 fabc 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020e6:	e018      	b.n	800211a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_TIM_Base_MspInit+0x7c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d113      	bne.n	800211a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_TIM_Base_MspInit+0x78>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	201d      	movs	r0, #29
 8002110:	f000 fa89 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002114:	201d      	movs	r0, #29
 8002116:	f000 faa2 	bl	800265e <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40000400 	.word	0x40000400

0800212c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_FSMC_MspInit+0x78>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d129      	bne.n	800219c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_FSMC_MspInit+0x78>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6153      	str	r3, [r2, #20]
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_FSMC_MspInit+0x7c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002166:	f64f 7380 	movw	r3, #65408	; 0xff80
 800216a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4619      	mov	r1, r3
 800217a:	480c      	ldr	r0, [pc, #48]	; (80021ac <HAL_FSMC_MspInit+0x80>)
 800217c:	f000 ff28 	bl	8002fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002180:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002184:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4619      	mov	r1, r3
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <HAL_FSMC_MspInit+0x84>)
 8002196:	f000 ff1b 	bl	8002fd0 <HAL_GPIO_Init>
 800219a:	e000      	b.n	800219e <HAL_FSMC_MspInit+0x72>
    return;
 800219c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20001b28 	.word	0x20001b28
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40011800 	.word	0x40011800
 80021b0:	40011400 	.word	0x40011400

080021b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80021bc:	f7ff ffb6 	bl	800212c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>
	...

080021d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LCD_DrawString(0, 0, "HardFault!");
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <HardFault_Handler+0x10>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	2000      	movs	r0, #0
 80021da:	f7fe ff61 	bl	80010a0 <LCD_DrawString>
 80021de:	e7f9      	b.n	80021d4 <HardFault_Handler+0x4>
 80021e0:	08008f70 	.word	0x08008f70

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <SysTick_Handler+0x34>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <SysTick_Handler+0x18>
		Timer1--;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <SysTick_Handler+0x34>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <SysTick_Handler+0x34>)
 8002232:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <SysTick_Handler+0x38>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <SysTick_Handler+0x2c>
		Timer2--;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Handler+0x38>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <SysTick_Handler+0x38>)
 8002246:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f8d6 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200000a4 	.word	0x200000a4
 8002254:	200000a6 	.word	0x200000a6

08002258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM2_IRQHandler+0x10>)
 800225e:	f002 fc59 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001e0 	.word	0x200001e0

0800226c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM3_IRQHandler+0x10>)
 8002272:	f002 fc4f 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000228 	.word	0x20000228

08002280 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <SDIO_IRQHandler+0x10>)
 8002286:	f001 fc51 	bl	8003b2c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000104 	.word	0x20000104

08002294 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA2_Channel4_5_IRQHandler+0x10>)
 800229a:	f000 fc5d 	bl	8002b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200000c0 	.word	0x200000c0

080022a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <_sbrk+0x5c>)
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <_sbrk+0x60>)
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_sbrk+0x64>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <_sbrk+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d8:	f006 f936 	bl	8008548 <__errno>
 80022dc:	4603      	mov	r3, r0
 80022de:	220c      	movs	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e009      	b.n	80022fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <_sbrk+0x64>)
 80022f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20010000 	.word	0x20010000
 8002308:	00000400 	.word	0x00000400
 800230c:	20001b2c 	.word	0x20001b2c
 8002310:	20001b78 	.word	0x20001b78

08002314 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002322:	490d      	ldr	r1, [pc, #52]	; (8002358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002338:	4c0a      	ldr	r4, [pc, #40]	; (8002364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002346:	f7ff ffe5 	bl	8002314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234a:	f006 f903 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234e:	f7ff f8f1 	bl	8001534 <main>
  bx lr
 8002352:	4770      	bx	lr
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800235c:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 8002360:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002364:	20001b78 	.word	0x20001b78

08002368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>
	...

0800236c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x28>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x28>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 f947 	bl	8002610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	200f      	movs	r0, #15
 8002384:	f000 f808 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fda8 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x54>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x58>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f95f 	bl	800267a <HAL_SYSTICK_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00e      	b.n	80023e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d80a      	bhi.n	80023e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 f927 	bl	8002626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_InitTick+0x5c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000004 	.word	0x20000004
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	20000008 	.word	0x20000008

080023f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x20>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_IncTick+0x20>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	2000000c 	.word	0x2000000c
 8002418:	20001b30 	.word	0x20001b30

0800241c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_GetTick+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20001b30 	.word	0x20001b30

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fff0 	bl	800241c <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffe0 	bl	800241c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000000c 	.word	0x2000000c

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4906      	ldr	r1, [pc, #24]	; (8002510 <__NVIC_EnableIRQ+0x34>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025dc:	d301      	bcc.n	80025e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025de:	2301      	movs	r3, #1
 80025e0:	e00f      	b.n	8002602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <SysTick_Config+0x40>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ea:	210f      	movs	r1, #15
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f7ff ff90 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <SysTick_Config+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <SysTick_Config+0x40>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	e000e010 	.word	0xe000e010

08002610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ff2d 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002638:	f7ff ff42 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 800263c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	f7ff ff90 	bl	8002568 <NVIC_EncodePriority>
 8002648:	4602      	mov	r2, r0
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff5f 	bl	8002514 <__NVIC_SetPriority>
}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff35 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffa2 	bl	80025cc <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e014      	b.n	80026ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	791b      	ldrb	r3, [r3, #4]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fc43 	bl	8001f40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	795b      	ldrb	r3, [r3, #5]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_DAC_Start+0x16>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e040      	b.n	800276e <HAL_DAC_Start+0x98>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002720:	2b3c      	cmp	r3, #60	; 0x3c
 8002722:	d11d      	bne.n	8002760 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	e014      	b.n	8002760 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	213c      	movs	r1, #60	; 0x3c
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0202 	orr.w	r2, r2, #2
 800275e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	3308      	adds	r3, #8
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e004      	b.n	80027ac <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3314      	adds	r3, #20
 80027aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	795b      	ldrb	r3, [r3, #5]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DAC_ConfigChannel+0x18>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e03c      	b.n	8002852 <HAL_DAC_ConfigChannel+0x92>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2202      	movs	r2, #2
 80027e2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4013      	ands	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	22c0      	movs	r2, #192	; 0xc0
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e059      	b.n	8002926 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_DMA_Init+0xd4>)
 800287a:	429a      	cmp	r2, r3
 800287c:	d80f      	bhi.n	800289e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_DMA_Init+0xd8>)
 8002886:	4413      	add	r3, r2
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_DMA_Init+0xdc>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	009a      	lsls	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_DMA_Init+0xe0>)
 800289a:	63da      	str	r2, [r3, #60]	; 0x3c
 800289c:	e00e      	b.n	80028bc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_DMA_Init+0xe4>)
 80028a6:	4413      	add	r3, r2
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_DMA_Init+0xdc>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	009a      	lsls	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_DMA_Init+0xe8>)
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40020407 	.word	0x40020407
 8002934:	bffdfff8 	.word	0xbffdfff8
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	40020000 	.word	0x40020000
 8002940:	bffdfbf8 	.word	0xbffdfbf8
 8002944:	40020400 	.word	0x40020400

08002948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800295a:	2b02      	cmp	r3, #2
 800295c:	d005      	beq.n	800296a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e0d6      	b.n	8002b18 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 020e 	bic.w	r2, r2, #14
 8002978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_DMA_Abort_IT+0x1dc>)
 8002992:	429a      	cmp	r2, r3
 8002994:	d958      	bls.n	8002a48 <HAL_DMA_Abort_IT+0x100>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_DMA_Abort_IT+0x1e0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04f      	beq.n	8002a40 <HAL_DMA_Abort_IT+0xf8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <HAL_DMA_Abort_IT+0x1e4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d048      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xf4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <HAL_DMA_Abort_IT+0x1e8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Abort_IT+0xee>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5e      	ldr	r2, [pc, #376]	; (8002b34 <HAL_DMA_Abort_IT+0x1ec>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d038      	beq.n	8002a30 <HAL_DMA_Abort_IT+0xe8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <HAL_DMA_Abort_IT+0x1f0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d030      	beq.n	8002a2a <HAL_DMA_Abort_IT+0xe2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <HAL_DMA_Abort_IT+0x1f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d028      	beq.n	8002a24 <HAL_DMA_Abort_IT+0xdc>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a53      	ldr	r2, [pc, #332]	; (8002b24 <HAL_DMA_Abort_IT+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d020      	beq.n	8002a1e <HAL_DMA_Abort_IT+0xd6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_DMA_Abort_IT+0x1f8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_DMA_Abort_IT+0xd2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_DMA_Abort_IT+0x1fc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d012      	beq.n	8002a16 <HAL_DMA_Abort_IT+0xce>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_DMA_Abort_IT+0x200>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00a      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xc8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_DMA_Abort_IT+0x204>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_DMA_Abort_IT+0xc2>
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	e01b      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a0e:	e018      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	e015      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a16:	2310      	movs	r3, #16
 8002a18:	e013      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e011      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a22:	e00e      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a28:	e00b      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a2e:	e008      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a34:	e005      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3a:	e002      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	e000      	b.n	8002a42 <HAL_DMA_Abort_IT+0xfa>
 8002a40:	2301      	movs	r3, #1
 8002a42:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <HAL_DMA_Abort_IT+0x208>)
 8002a44:	6053      	str	r3, [r2, #4]
 8002a46:	e057      	b.n	8002af8 <HAL_DMA_Abort_IT+0x1b0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <HAL_DMA_Abort_IT+0x1e0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d04f      	beq.n	8002af2 <HAL_DMA_Abort_IT+0x1aa>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_DMA_Abort_IT+0x1e4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d048      	beq.n	8002aee <HAL_DMA_Abort_IT+0x1a6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <HAL_DMA_Abort_IT+0x1e8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d040      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x1a0>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_DMA_Abort_IT+0x1ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d038      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0x19a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_DMA_Abort_IT+0x1f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d030      	beq.n	8002adc <HAL_DMA_Abort_IT+0x194>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <HAL_DMA_Abort_IT+0x1f4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d028      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x18e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_DMA_Abort_IT+0x1dc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d020      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x188>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <HAL_DMA_Abort_IT+0x1f8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d019      	beq.n	8002acc <HAL_DMA_Abort_IT+0x184>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <HAL_DMA_Abort_IT+0x1fc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d012      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x180>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <HAL_DMA_Abort_IT+0x200>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x17a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <HAL_DMA_Abort_IT+0x204>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d102      	bne.n	8002abc <HAL_DMA_Abort_IT+0x174>
 8002ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aba:	e01b      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac0:	e018      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac6:	e015      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ac8:	2310      	movs	r3, #16
 8002aca:	e013      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e011      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	e00e      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ad6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ada:	e00b      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae0:	e008      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae6:	e005      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aec:	e002      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002aee:	2310      	movs	r3, #16
 8002af0:	e000      	b.n	8002af4 <HAL_DMA_Abort_IT+0x1ac>
 8002af2:	2301      	movs	r3, #1
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_DMA_Abort_IT+0x20c>)
 8002af6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
    } 
  }
  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020080 	.word	0x40020080
 8002b28:	40020008 	.word	0x40020008
 8002b2c:	4002001c 	.word	0x4002001c
 8002b30:	40020030 	.word	0x40020030
 8002b34:	40020044 	.word	0x40020044
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	4002006c 	.word	0x4002006c
 8002b40:	40020408 	.word	0x40020408
 8002b44:	4002041c 	.word	0x4002041c
 8002b48:	40020430 	.word	0x40020430
 8002b4c:	40020444 	.word	0x40020444
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020000 	.word	0x40020000

08002b58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2204      	movs	r2, #4
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80f1 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x20c>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80eb 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_DMA_IRQHandler+0x1d8>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d958      	bls.n	8002c6a <HAL_DMA_IRQHandler+0x112>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5d      	ldr	r2, [pc, #372]	; (8002d34 <HAL_DMA_IRQHandler+0x1dc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d04f      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x10a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5c      	ldr	r2, [pc, #368]	; (8002d38 <HAL_DMA_IRQHandler+0x1e0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d048      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x106>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_DMA_IRQHandler+0x1e4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d040      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x100>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a59      	ldr	r2, [pc, #356]	; (8002d40 <HAL_DMA_IRQHandler+0x1e8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d038      	beq.n	8002c52 <HAL_DMA_IRQHandler+0xfa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_DMA_IRQHandler+0x1ec>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d030      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xf4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_DMA_IRQHandler+0x1f0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d028      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xee>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4d      	ldr	r2, [pc, #308]	; (8002d30 <HAL_DMA_IRQHandler+0x1d8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d020      	beq.n	8002c40 <HAL_DMA_IRQHandler+0xe8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_DMA_IRQHandler+0x1f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d019      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xe4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_DMA_IRQHandler+0x1f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d012      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xe0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4f      	ldr	r2, [pc, #316]	; (8002d54 <HAL_DMA_IRQHandler+0x1fc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xda>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_DMA_IRQHandler+0x200>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d102      	bne.n	8002c2c <HAL_DMA_IRQHandler+0xd4>
 8002c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c2a:	e01b      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c30:	e018      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c36:	e015      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	e013      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e011      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c44:	e00e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c4a:	e00b      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c50:	e008      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c56:	e005      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5c:	e002      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c5e:	2340      	movs	r3, #64	; 0x40
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_IRQHandler+0x10c>
 8002c62:	2304      	movs	r3, #4
 8002c64:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <HAL_DMA_IRQHandler+0x204>)
 8002c66:	6053      	str	r3, [r2, #4]
 8002c68:	e057      	b.n	8002d1a <HAL_DMA_IRQHandler+0x1c2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a31      	ldr	r2, [pc, #196]	; (8002d34 <HAL_DMA_IRQHandler+0x1dc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d04f      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x1bc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_DMA_IRQHandler+0x1e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d048      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1b8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_DMA_IRQHandler+0x1e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d040      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x1b2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <HAL_DMA_IRQHandler+0x1e8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d038      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x1ac>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_DMA_IRQHandler+0x1ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d030      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x1a6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_DMA_IRQHandler+0x1f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d028      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x1a0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_DMA_IRQHandler+0x1d8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d020      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x19a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <HAL_DMA_IRQHandler+0x1f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_DMA_IRQHandler+0x196>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_DMA_IRQHandler+0x1f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_IRQHandler+0x192>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_DMA_IRQHandler+0x1fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x18c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_DMA_IRQHandler+0x200>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d102      	bne.n	8002cde <HAL_DMA_IRQHandler+0x186>
 8002cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cdc:	e01b      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ce2:	e018      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce8:	e015      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cea:	2340      	movs	r3, #64	; 0x40
 8002cec:	e013      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e011      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cf6:	e00e      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cfc:	e00b      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002cfe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d02:	e008      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d08:	e005      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d0e:	e002      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002d10:	2340      	movs	r3, #64	; 0x40
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_IRQHandler+0x1be>
 8002d14:	2304      	movs	r3, #4
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_DMA_IRQHandler+0x208>)
 8002d18:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8136 	beq.w	8002f90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d2c:	e130      	b.n	8002f90 <HAL_DMA_IRQHandler+0x438>
 8002d2e:	bf00      	nop
 8002d30:	40020080 	.word	0x40020080
 8002d34:	40020008 	.word	0x40020008
 8002d38:	4002001c 	.word	0x4002001c
 8002d3c:	40020030 	.word	0x40020030
 8002d40:	40020044 	.word	0x40020044
 8002d44:	40020058 	.word	0x40020058
 8002d48:	4002006c 	.word	0x4002006c
 8002d4c:	40020408 	.word	0x40020408
 8002d50:	4002041c 	.word	0x4002041c
 8002d54:	40020430 	.word	0x40020430
 8002d58:	40020444 	.word	0x40020444
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2202      	movs	r2, #2
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80dd 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x3d8>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80d7 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 020a 	bic.w	r2, r2, #10
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <HAL_DMA_IRQHandler+0x444>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d958      	bls.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a79      	ldr	r2, [pc, #484]	; (8002fa0 <HAL_DMA_IRQHandler+0x448>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x306>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_DMA_IRQHandler+0x44c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d048      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x302>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a76      	ldr	r2, [pc, #472]	; (8002fa8 <HAL_DMA_IRQHandler+0x450>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x2fc>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_DMA_IRQHandler+0x454>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d038      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2f6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a73      	ldr	r2, [pc, #460]	; (8002fb0 <HAL_DMA_IRQHandler+0x458>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d030      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2f0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a72      	ldr	r2, [pc, #456]	; (8002fb4 <HAL_DMA_IRQHandler+0x45c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d028      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2ea>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <HAL_DMA_IRQHandler+0x444>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d020      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2e4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_DMA_IRQHandler+0x460>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d019      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2e0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6c      	ldr	r2, [pc, #432]	; (8002fbc <HAL_DMA_IRQHandler+0x464>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d012      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2dc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6b      	ldr	r2, [pc, #428]	; (8002fc0 <HAL_DMA_IRQHandler+0x468>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00a      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x2d6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_DMA_IRQHandler+0x46c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d102      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x2d0>
 8002e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e26:	e01b      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2c:	e018      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e32:	e015      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e34:	2320      	movs	r3, #32
 8002e36:	e013      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e011      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e40:	e00e      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e46:	e00b      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4c:	e008      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e52:	e005      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e58:	e002      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e000      	b.n	8002e60 <HAL_DMA_IRQHandler+0x308>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <HAL_DMA_IRQHandler+0x470>)
 8002e62:	6053      	str	r3, [r2, #4]
 8002e64:	e057      	b.n	8002f16 <HAL_DMA_IRQHandler+0x3be>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a4d      	ldr	r2, [pc, #308]	; (8002fa0 <HAL_DMA_IRQHandler+0x448>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04f      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x3b8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <HAL_DMA_IRQHandler+0x44c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d048      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x3b4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4a      	ldr	r2, [pc, #296]	; (8002fa8 <HAL_DMA_IRQHandler+0x450>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x3ae>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_DMA_IRQHandler+0x454>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d038      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x3a8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <HAL_DMA_IRQHandler+0x458>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d030      	beq.n	8002efa <HAL_DMA_IRQHandler+0x3a2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a45      	ldr	r2, [pc, #276]	; (8002fb4 <HAL_DMA_IRQHandler+0x45c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d028      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x39c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <HAL_DMA_IRQHandler+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d020      	beq.n	8002eee <HAL_DMA_IRQHandler+0x396>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a41      	ldr	r2, [pc, #260]	; (8002fb8 <HAL_DMA_IRQHandler+0x460>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_DMA_IRQHandler+0x392>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_DMA_IRQHandler+0x464>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d012      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x38e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3e      	ldr	r2, [pc, #248]	; (8002fc0 <HAL_DMA_IRQHandler+0x468>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x388>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <HAL_DMA_IRQHandler+0x46c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d102      	bne.n	8002eda <HAL_DMA_IRQHandler+0x382>
 8002ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed8:	e01b      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ede:	e018      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee4:	e015      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e013      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e011      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef2:	e00e      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef8:	e00b      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efe:	e008      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f04:	e005      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0a:	e002      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e000      	b.n	8002f12 <HAL_DMA_IRQHandler+0x3ba>
 8002f10:	2302      	movs	r3, #2
 8002f12:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <HAL_DMA_IRQHandler+0x474>)
 8002f14:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d034      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f2e:	e02f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2208      	movs	r2, #8
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x43a>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d023      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 020e 	bic.w	r2, r2, #14
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
    }
  }
  return;
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
}
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40020080 	.word	0x40020080
 8002fa0:	40020008 	.word	0x40020008
 8002fa4:	4002001c 	.word	0x4002001c
 8002fa8:	40020030 	.word	0x40020030
 8002fac:	40020044 	.word	0x40020044
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	4002006c 	.word	0x4002006c
 8002fb8:	40020408 	.word	0x40020408
 8002fbc:	4002041c 	.word	0x4002041c
 8002fc0:	40020430 	.word	0x40020430
 8002fc4:	40020444 	.word	0x40020444
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b08b      	sub	sp, #44	; 0x2c
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe2:	e179      	b.n	80032d8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8168 	bne.w	80032d2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a96      	ldr	r2, [pc, #600]	; (8003260 <HAL_GPIO_Init+0x290>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d05e      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
 800300c:	4a94      	ldr	r2, [pc, #592]	; (8003260 <HAL_GPIO_Init+0x290>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d875      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 8003012:	4a94      	ldr	r2, [pc, #592]	; (8003264 <HAL_GPIO_Init+0x294>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d058      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
 8003018:	4a92      	ldr	r2, [pc, #584]	; (8003264 <HAL_GPIO_Init+0x294>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d86f      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 800301e:	4a92      	ldr	r2, [pc, #584]	; (8003268 <HAL_GPIO_Init+0x298>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d052      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
 8003024:	4a90      	ldr	r2, [pc, #576]	; (8003268 <HAL_GPIO_Init+0x298>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d869      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 800302a:	4a90      	ldr	r2, [pc, #576]	; (800326c <HAL_GPIO_Init+0x29c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d04c      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
 8003030:	4a8e      	ldr	r2, [pc, #568]	; (800326c <HAL_GPIO_Init+0x29c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d863      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 8003036:	4a8e      	ldr	r2, [pc, #568]	; (8003270 <HAL_GPIO_Init+0x2a0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d046      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
 800303c:	4a8c      	ldr	r2, [pc, #560]	; (8003270 <HAL_GPIO_Init+0x2a0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d85d      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 8003042:	2b12      	cmp	r3, #18
 8003044:	d82a      	bhi.n	800309c <HAL_GPIO_Init+0xcc>
 8003046:	2b12      	cmp	r3, #18
 8003048:	d859      	bhi.n	80030fe <HAL_GPIO_Init+0x12e>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_GPIO_Init+0x80>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	080030cb 	.word	0x080030cb
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080030b7 	.word	0x080030b7
 800305c:	080030f9 	.word	0x080030f9
 8003060:	080030ff 	.word	0x080030ff
 8003064:	080030ff 	.word	0x080030ff
 8003068:	080030ff 	.word	0x080030ff
 800306c:	080030ff 	.word	0x080030ff
 8003070:	080030ff 	.word	0x080030ff
 8003074:	080030ff 	.word	0x080030ff
 8003078:	080030ff 	.word	0x080030ff
 800307c:	080030ff 	.word	0x080030ff
 8003080:	080030ff 	.word	0x080030ff
 8003084:	080030ff 	.word	0x080030ff
 8003088:	080030ff 	.word	0x080030ff
 800308c:	080030ff 	.word	0x080030ff
 8003090:	080030ff 	.word	0x080030ff
 8003094:	080030ad 	.word	0x080030ad
 8003098:	080030c1 	.word	0x080030c1
 800309c:	4a75      	ldr	r2, [pc, #468]	; (8003274 <HAL_GPIO_Init+0x2a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030a2:	e02c      	b.n	80030fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	623b      	str	r3, [r7, #32]
          break;
 80030aa:	e029      	b.n	8003100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	3304      	adds	r3, #4
 80030b2:	623b      	str	r3, [r7, #32]
          break;
 80030b4:	e024      	b.n	8003100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	3308      	adds	r3, #8
 80030bc:	623b      	str	r3, [r7, #32]
          break;
 80030be:	e01f      	b.n	8003100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	330c      	adds	r3, #12
 80030c6:	623b      	str	r3, [r7, #32]
          break;
 80030c8:	e01a      	b.n	8003100 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030d2:	2304      	movs	r3, #4
 80030d4:	623b      	str	r3, [r7, #32]
          break;
 80030d6:	e013      	b.n	8003100 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e0:	2308      	movs	r3, #8
 80030e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	611a      	str	r2, [r3, #16]
          break;
 80030ea:	e009      	b.n	8003100 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	615a      	str	r2, [r3, #20]
          break;
 80030f6:	e003      	b.n	8003100 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
          break;
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x130>
          break;
 80030fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	d801      	bhi.n	800310a <HAL_GPIO_Init+0x13a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e001      	b.n	800310e <HAL_GPIO_Init+0x13e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d802      	bhi.n	800311c <HAL_GPIO_Init+0x14c>
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x152>
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	3b08      	subs	r3, #8
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	210f      	movs	r1, #15
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	401a      	ands	r2, r3
 8003134:	6a39      	ldr	r1, [r7, #32]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80c1 	beq.w	80032d2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003150:	4b49      	ldr	r3, [pc, #292]	; (8003278 <HAL_GPIO_Init+0x2a8>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a48      	ldr	r2, [pc, #288]	; (8003278 <HAL_GPIO_Init+0x2a8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_GPIO_Init+0x2a8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003168:	4a44      	ldr	r2, [pc, #272]	; (800327c <HAL_GPIO_Init+0x2ac>)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <HAL_GPIO_Init+0x2b0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01f      	beq.n	80031d4 <HAL_GPIO_Init+0x204>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <HAL_GPIO_Init+0x2b4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d019      	beq.n	80031d0 <HAL_GPIO_Init+0x200>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_GPIO_Init+0x2b8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_GPIO_Init+0x1fc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a39      	ldr	r2, [pc, #228]	; (800328c <HAL_GPIO_Init+0x2bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00d      	beq.n	80031c8 <HAL_GPIO_Init+0x1f8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_GPIO_Init+0x2c0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <HAL_GPIO_Init+0x1f4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a37      	ldr	r2, [pc, #220]	; (8003294 <HAL_GPIO_Init+0x2c4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_GPIO_Init+0x1f0>
 80031bc:	2305      	movs	r3, #5
 80031be:	e00a      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031c0:	2306      	movs	r3, #6
 80031c2:	e008      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031c8:	2303      	movs	r3, #3
 80031ca:	e004      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_GPIO_Init+0x206>
 80031d4:	2300      	movs	r3, #0
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031e6:	4925      	ldr	r1, [pc, #148]	; (800327c <HAL_GPIO_Init+0x2ac>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4924      	ldr	r1, [pc, #144]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	4920      	ldr	r1, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003218:	4013      	ands	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	491a      	ldr	r1, [pc, #104]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003240:	4013      	ands	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d025      	beq.n	800329c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4910      	ldr	r1, [pc, #64]	; (8003298 <HAL_GPIO_Init+0x2c8>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
 800325c:	e025      	b.n	80032aa <HAL_GPIO_Init+0x2da>
 800325e:	bf00      	nop
 8003260:	10320000 	.word	0x10320000
 8003264:	10310000 	.word	0x10310000
 8003268:	10220000 	.word	0x10220000
 800326c:	10210000 	.word	0x10210000
 8003270:	10120000 	.word	0x10120000
 8003274:	10110000 	.word	0x10110000
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	40010800 	.word	0x40010800
 8003284:	40010c00 	.word	0x40010c00
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	40011800 	.word	0x40011800
 8003294:	40011c00 	.word	0x40011c00
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_GPIO_Init+0x324>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4913      	ldr	r1, [pc, #76]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60cb      	str	r3, [r1, #12]
 80032c2:	e006      	b.n	80032d2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4909      	ldr	r1, [pc, #36]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f47f ae7e 	bne.w	8002fe4 <HAL_GPIO_Init+0x14>
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	372c      	adds	r7, #44	; 0x2c
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40010400 	.word	0x40010400

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	041a      	lsls	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43d9      	mvns	r1, r3
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	400b      	ands	r3, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	611a      	str	r2, [r3, #16]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
	...

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e272      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8087 	beq.w	800348a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337c:	4b92      	ldr	r3, [pc, #584]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b04      	cmp	r3, #4
 8003386:	d00c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003388:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d112      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
 8003394:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d10b      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a2:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06c      	beq.n	8003488 <HAL_RCC_OscConfig+0x12c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d168      	bne.n	8003488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e24c      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x76>
 80033c4:	4b80      	ldr	r3, [pc, #512]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7f      	ldr	r2, [pc, #508]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x98>
 80033da:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0xbc>
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a71      	ldr	r2, [pc, #452]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a67      	ldr	r2, [pc, #412]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fff0 	bl	800241c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe ffec 	bl	800241c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e200      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xe4>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe ffdc 	bl	800241c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe ffd8 	bl	800241c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1ec      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x10c>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003496:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034a2:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c0      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4939      	ldr	r1, [pc, #228]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe ff91 	bl	800241c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe ff8d 	bl	800241c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4927      	ldr	r1, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe ff70 	bl	800241c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe ff6c 	bl	800241c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e180      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03a      	beq.n	80035e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe ff50 	bl	800241c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe ff4c 	bl	800241c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e160      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 faa6 	bl	8003af0 <RCC_Delay>
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7fe ff36 	bl	800241c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe ff32 	bl	800241c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d908      	bls.n	80035d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e146      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	42420000 	.word	0x42420000
 80035d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b92      	ldr	r3, [pc, #584]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e9      	bne.n	80035b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a6 	beq.w	800373a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a87      	ldr	r2, [pc, #540]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7e      	ldr	r2, [pc, #504]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fef3 	bl	800241c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe feef 	bl	800241c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e103      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b75      	ldr	r3, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x312>
 8003660:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a6e      	ldr	r2, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x334>
 8003676:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a69      	ldr	r2, [pc, #420]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a66      	ldr	r2, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x356>
 8003698:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a60      	ldr	r2, [pc, #384]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	4b5e      	ldr	r3, [pc, #376]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a5a      	ldr	r2, [pc, #360]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b58      	ldr	r3, [pc, #352]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a57      	ldr	r2, [pc, #348]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fea3 	bl	800241c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fe9f 	bl	800241c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0b1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x37e>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fe8d 	bl	800241c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fe89 	bl	800241c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e09b      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b3c      	ldr	r3, [pc, #240]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d061      	beq.n	8003814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d146      	bne.n	80037e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe fe5d 	bl	800241c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fe59 	bl	800241c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e06d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4921      	ldr	r1, [pc, #132]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a19      	ldr	r1, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	430b      	orrs	r3, r1
 80037b2:	491b      	ldr	r1, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fe2d 	bl	800241c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fe29 	bl	800241c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x46a>
 80037e4:	e035      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fe16 	bl	800241c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fe12 	bl	800241c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e026      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x498>
 8003812:	e01e      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e019      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 8003820:	40021000 	.word	0x40021000
 8003824:	40007000 	.word	0x40007000
 8003828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x500>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4965      	ldr	r1, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe fd64 	bl	800241c <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe fd60 	bl	800241c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4922      	ldr	r1, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fcc2 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080095c0 	.word	0x080095c0
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	20000008 	.word	0x20000008

08003a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b490      	push	{r4, r7}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a3c:	1d3c      	adds	r4, r7, #4
 8003a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a44:	f240 2301 	movw	r3, #513	; 0x201
 8003a48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x46>
 8003a72:	e02b      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a76:	623b      	str	r3, [r7, #32]
      break;
 8003a78:	e02b      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	443b      	add	r3, r7
 8003a86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0c5b      	lsrs	r3, r3, #17
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	3328      	adds	r3, #40	; 0x28
 8003aa2:	443b      	add	r3, r7
 8003aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aae:	fb03 f202 	mul.w	r2, r3, r2
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	e004      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	623b      	str	r3, [r7, #32]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ace:	623b      	str	r3, [r7, #32]
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc90      	pop	{r4, r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	08008f7c 	.word	0x08008f7c
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	003d0900 	.word	0x003d0900

08003af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <RCC_Delay+0x34>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <RCC_Delay+0x38>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a5b      	lsrs	r3, r3, #9
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b0c:	bf00      	nop
  }
  while (Delay --);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	60fa      	str	r2, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <RCC_Delay+0x1c>
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	20000004 	.word	0x20000004
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_SD_IRQHandler+0x2e>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa3c 	bl	8003fd0 <SD_Read_IT>
 8003b58:	e157      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 808f 	beq.w	8003c88 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003b82:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003b86:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d039      	beq.n	8003c16 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <HAL_SD_IRQHandler+0x8a>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d011      	beq.n	8003bda <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 fc62 	bl	8005484 <SDMMC_CmdStopTransfer>
 8003bc0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f933 	bl	8003e40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f240 523a 	movw	r2, #1338	; 0x53a
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_SD_IRQHandler+0xda>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f911 	bl	8003e2e <HAL_SD_RxCpltCallback>
 8003c0c:	e0fd      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f904 	bl	8003e1c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c14:	e0f9      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80f4 	beq.w	8003e0a <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fc27 	bl	8005484 <SDMMC_CmdStopTransfer>
 8003c36:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8f8 	bl	8003e40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 80d7 	bne.w	8003e0a <HAL_SD_IRQHandler+0x2de>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 80d1 	bne.w	8003e0a <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0208 	bic.w	r2, r2, #8
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f8cb 	bl	8003e1c <HAL_SD_TxCpltCallback>
}
 8003c86:	e0c0      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_SD_IRQHandler+0x17c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f9e6 	bl	8004072 <SD_Write_IT>
 8003ca6:	e0b0      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a9 	beq.w	8003e0a <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	f043 0208 	orr.w	r2, r3, #8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f240 723a 	movw	r2, #1850	; 0x73a
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fb9e 	bl	8005484 <SDMMC_CmdStopTransfer>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f867 	bl	8003e40 <HAL_SD_ErrorCallback>
}
 8003d72:	e04a      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d045      	beq.n	8003e0a <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_SD_IRQHandler+0x266>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d011      	beq.n	8003db6 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <HAL_SD_IRQHandler+0x2e8>)
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fdd2 	bl	8002948 <HAL_DMA_Abort_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02f      	beq.n	8003e0a <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f878 	bl	8003ea4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003db4:	e029      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_SD_IRQHandler+0x29e>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <HAL_SD_IRQHandler+0x2ec>)
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fdb6 	bl	8002948 <HAL_DMA_Abort_IT>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f893 	bl	8003f12 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003dec:	e00d      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f825 	bl	8003e52 <HAL_SD_AbortCallback>
}
 8003e08:	e7ff      	b.n	8003e0a <HAL_SD_IRQHandler+0x2de>
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08003ea5 	.word	0x08003ea5
 8003e18:	08003f13 	.word	0x08003f13

08003e1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f882 	bl	8003f80 <SD_SendStatus>
 8003e7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003e9a:	693b      	ldr	r3, [r7, #16]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ffd1 	bl	8003e64 <HAL_SD_GetCardState>
 8003ec2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d002      	beq.n	8003ede <SD_DMATxAbort+0x3a>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d10a      	bne.n	8003ef4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 face 	bl	8005484 <SDMMC_CmdStopTransfer>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ffa8 	bl	8003e52 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f02:	e002      	b.n	8003f0a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff ff9b 	bl	8003e40 <HAL_SD_ErrorCallback>
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff9a 	bl	8003e64 <HAL_SD_GetCardState>
 8003f30:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d002      	beq.n	8003f4c <SD_DMARxAbort+0x3a>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d10a      	bne.n	8003f62 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fa97 	bl	8005484 <SDMMC_CmdStopTransfer>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ff71 	bl	8003e52 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f70:	e002      	b.n	8003f78 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff ff64 	bl	8003e40 <HAL_SD_ErrorCallback>
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f94:	e018      	b.n	8003fc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f001 fa90 	bl	80054c8 <SDMMC_CmdSendStatus>
 8003fa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e009      	b.n	8003fc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fa4f 	bl	800545e <SDIO_GetResponse>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03f      	beq.n	800406a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e033      	b.n	8004058 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f9e1 	bl	80053bc <SDIO_ReadFIFO>
 8003ffa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3b01      	subs	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
      tmp++;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3301      	adds	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3b01      	subs	r3, #1
 8004024:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3b01      	subs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3b01      	subs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b07      	cmp	r3, #7
 800405c:	d9c8      	bls.n	8003ff0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d043      	beq.n	8004114 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e037      	b.n	8004102 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	021a      	lsls	r2, r3, #8
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	061a      	lsls	r2, r3, #24
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f107 0208 	add.w	r2, r7, #8
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f96c 	bl	80053d4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b07      	cmp	r3, #7
 8004106:	d9c4      	bls.n	8004092 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e076      	b.n	800421c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd ff50 	bl	8002014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1a      	lsrs	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f002 0204 	and.w	r2, r2, #4
 80041fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Transmit+0x22>
 8004242:	2302      	movs	r3, #2
 8004244:	e126      	b.n	8004494 <HAL_SPI_Transmit+0x270>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424e:	f7fe f8e5 	bl	800241c <HAL_GetTick>
 8004252:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004268:	e10b      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0x52>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800427a:	e102      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d10f      	bne.n	80042e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d007      	beq.n	8004302 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d14b      	bne.n	80043a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Transmit+0xf6>
 8004314:	8afb      	ldrh	r3, [r7, #22]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d13e      	bne.n	8004398 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800433e:	e02b      	b.n	8004398 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d112      	bne.n	8004374 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
 8004372:	e011      	b.n	8004398 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004374:	f7fe f852 	bl	800241c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d803      	bhi.n	800438c <HAL_SPI_Transmit+0x168>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d102      	bne.n	8004392 <HAL_SPI_Transmit+0x16e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004396:	e074      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ce      	bne.n	8004340 <HAL_SPI_Transmit+0x11c>
 80043a2:	e04c      	b.n	800443e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Transmit+0x18e>
 80043ac:	8afb      	ldrh	r3, [r7, #22]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d140      	bne.n	8004434 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043d8:	e02c      	b.n	8004434 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d113      	bne.n	8004410 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	86da      	strh	r2, [r3, #54]	; 0x36
 800440e:	e011      	b.n	8004434 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004410:	f7fe f804 	bl	800241c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d803      	bhi.n	8004428 <HAL_SPI_Transmit+0x204>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d102      	bne.n	800442e <HAL_SPI_Transmit+0x20a>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004432:	e026      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cd      	bne.n	80043da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fa54 	bl	80048f0 <SPI_EndRxTxTransaction>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e000      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004492:	7ffb      	ldrb	r3, [r7, #31]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044aa:	2301      	movs	r3, #1
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x26>
 80044be:	2302      	movs	r3, #2
 80044c0:	e18a      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x33c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ca:	f7fd ffa7 	bl	800241c <HAL_GetTick>
 80044ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d00f      	beq.n	800450c <HAL_SPI_TransmitReceive+0x70>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f2:	d107      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x68>
 80044fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004500:	2b04      	cmp	r3, #4
 8004502:	d003      	beq.n	800450c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800450a:	e15b      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_SPI_TransmitReceive+0x82>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_SPI_TransmitReceive+0x82>
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004524:	e14e      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b04      	cmp	r3, #4
 8004530:	d003      	beq.n	800453a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2205      	movs	r2, #5
 8004536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d007      	beq.n	800458e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d178      	bne.n	800468a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x10a>
 80045a0:	8b7b      	ldrh	r3, [r7, #26]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d166      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ca:	e053      	b.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11b      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x176>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x176>
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d113      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x1b8>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	b292      	uxth	r2, r2
 8004636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004654:	f7fd fee2 	bl	800241c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004660:	429a      	cmp	r2, r3
 8004662:	d807      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d003      	beq.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004672:	e0a7      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1a6      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x130>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1a1      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x130>
 8004688:	e07c      	b.n	8004784 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x1fc>
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d16b      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046be:	e057      	b.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d11c      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d114      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d119      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2ae>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004746:	2301      	movs	r3, #1
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800474a:	f7fd fe67 	bl	800241c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004756:	429a      	cmp	r2, r3
 8004758:	d803      	bhi.n	8004762 <HAL_SPI_TransmitReceive+0x2c6>
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d102      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x2cc>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800476e:	e029      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1a2      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x224>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19d      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f8b1 	bl	80048f0 <SPI_EndRxTxTransaction>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047a0:	e010      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e000      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3730      	adds	r7, #48	; 0x30
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047f0:	f7fd fe14 	bl	800241c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004800:	f7fd fe0c 	bl	800241c <HAL_GetTick>
 8004804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004816:	e054      	b.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d050      	beq.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004820:	f7fd fdfc 	bl	800241c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13d      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d111      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	d004      	beq.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	d107      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d10f      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800489c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e017      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3b01      	subs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d19b      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000004 	.word	0x20000004

080048f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff ff6a 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e000      	b.n	8004924 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_SRAM_Init+0x1c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004946:	d101      	bne.n	800494c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e038      	b.n	80049be <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fd fc27 	bl	80021b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3308      	adds	r3, #8
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f000 fc4d 	bl	8005210 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	461a      	mov	r2, r3
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	f000 fcaf 	bl	80052e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6858      	ldr	r0, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	f000 fcda 	bl	800534c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	f041 0101 	orr.w	r1, r1, #1
 80049b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e041      	b.n	8004a5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fd fb5d 	bl	80020ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fa75 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d001      	beq.n	8004a7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e03c      	b.n	8004af6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_TIM_Base_Start+0x9c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x5c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_TIM_Base_Start+0xa0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x5c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x5c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_TIM_Base_Start+0xa4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x5c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <HAL_TIM_Base_Start+0xa8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x5c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <HAL_TIM_Base_Start+0xac>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d111      	bne.n	8004ae4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00

08004b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0202 	mvn.w	r2, #2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9b1 	bl	8004ebe <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9a4 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f9b3 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0204 	mvn.w	r2, #4
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f987 	bl	8004ebe <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f97a 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f989 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0208 	mvn.w	r2, #8
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f95d 	bl	8004ebe <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f950 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f95f 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0210 	mvn.w	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f933 	bl	8004ebe <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f926 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f935 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0201 	mvn.w	r2, #1
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd f8ee 	bl	8001e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa9d 	bl	80051fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8f9 	bl	8004ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0220 	mvn.w	r2, #32
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa68 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_ConfigClockSource+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e0b3      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x180>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d74:	d03e      	beq.n	8004df4 <HAL_TIM_ConfigClockSource+0xd0>
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	f200 8087 	bhi.w	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d82:	f000 8085 	beq.w	8004e90 <HAL_TIM_ConfigClockSource+0x16c>
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d87f      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d01a      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0xa2>
 8004d90:	2b70      	cmp	r3, #112	; 0x70
 8004d92:	d87b      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d050      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x116>
 8004d98:	2b60      	cmp	r3, #96	; 0x60
 8004d9a:	d877      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004d9c:	2b50      	cmp	r3, #80	; 0x50
 8004d9e:	d03c      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0xf6>
 8004da0:	2b50      	cmp	r3, #80	; 0x50
 8004da2:	d873      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d058      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x136>
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d86f      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d064      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x156>
 8004db0:	2b30      	cmp	r3, #48	; 0x30
 8004db2:	d86b      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d060      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x156>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d867      	bhi.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d05c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x156>
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d05a      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004dc4:	e062      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6899      	ldr	r1, [r3, #8]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f000 f97e 	bl	80050d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004de8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	609a      	str	r2, [r3, #8]
      break;
 8004df2:	e04e      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	6899      	ldr	r1, [r3, #8]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f000 f967 	bl	80050d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e16:	609a      	str	r2, [r3, #8]
      break;
 8004e18:	e03b      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 f8de 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2150      	movs	r1, #80	; 0x50
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f935 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 8004e38:	e02b      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 f8fc 	bl	8005044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2160      	movs	r1, #96	; 0x60
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f925 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 8004e58:	e01b      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 f8be 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f915 	bl	80050a2 <TIM_ITRx_SetConfig>
      break;
 8004e78:	e00b      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f000 f90c 	bl	80050a2 <TIM_ITRx_SetConfig>
        break;
 8004e8a:	e002      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <TIM_Base_SetConfig+0xe0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <TIM_Base_SetConfig+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <TIM_Base_SetConfig+0xec>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <TIM_Base_SetConfig+0xf0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a22      	ldr	r2, [pc, #136]	; (8004fd4 <TIM_Base_SetConfig+0xe0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d00b      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <TIM_Base_SetConfig+0xe8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <TIM_Base_SetConfig+0xec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_Base_SetConfig+0x82>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <TIM_Base_SetConfig+0xf0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <TIM_Base_SetConfig+0xe0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d103      	bne.n	8004fc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	615a      	str	r2, [r3, #20]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00

08004fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 030a 	bic.w	r3, r3, #10
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f023 0210 	bic.w	r2, r3, #16
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	f043 0307 	orr.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	609a      	str	r2, [r3, #8]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e050      	b.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d00e      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10c      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	f023 0101 	bic.w	r1, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d102      	bne.n	8005240 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800523a:	2340      	movs	r3, #64	; 0x40
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e001      	b.n	8005244 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005250:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005256:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800525c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005262:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005268:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800526e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005274:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800527a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005280:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <FSMC_NORSRAM_Init+0xd0>)
 80052a0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80052b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	ea02 0103 	and.w	r1, r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4319      	orrs	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	0008fb7f 	.word	0x0008fb7f

080052e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	431a      	orrs	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	431a      	orrs	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	431a      	orrs	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	3b01      	subs	r3, #1
 8005320:	051b      	lsls	r3, r3, #20
 8005322:	431a      	orrs	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	3b02      	subs	r3, #2
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	3201      	adds	r2, #1
 8005338:	4319      	orrs	r1, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005360:	d11d      	bne.n	800539e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800536c:	4013      	ands	r3, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	6852      	ldr	r2, [r2, #4]
 8005376:	0112      	lsls	r2, r2, #4
 8005378:	4311      	orrs	r1, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	6892      	ldr	r2, [r2, #8]
 800537e:	0212      	lsls	r2, r2, #8
 8005380:	4311      	orrs	r1, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	6992      	ldr	r2, [r2, #24]
 8005386:	4311      	orrs	r1, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68d2      	ldr	r2, [r2, #12]
 800538c:	0412      	lsls	r2, r2, #16
 800538e:	430a      	orrs	r2, r1
 8005390:	ea43 0102 	orr.w	r1, r3, r2
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800539c:	e005      	b.n	80053aa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80053a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	cff00000 	.word	0xcff00000

080053bc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005412:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005418:	431a      	orrs	r2, r3
                       Command->CPSM);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800541e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800542e:	f023 030f 	bic.w	r3, r3, #15
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	b2db      	uxtb	r3, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3314      	adds	r3, #20
 800546c:	461a      	mov	r2, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	4413      	add	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
}  
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
	...

08005484 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005490:	230c      	movs	r3, #12
 8005492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800549c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ffa3 	bl	80053f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80054ae:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <SDMMC_CmdStopTransfer+0x40>)
 80054b0:	210c      	movs	r1, #12
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f82a 	bl	800550c <SDMMC_GetCmdResp1>
 80054b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ba:	69fb      	ldr	r3, [r7, #28]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	05f5e100 	.word	0x05f5e100

080054c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80054d6:	230d      	movs	r3, #13
 80054d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff80 	bl	80053f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	210d      	movs	r1, #13
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f806 	bl	800550c <SDMMC_GetCmdResp1>
 8005500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800551a:	4b70      	ldr	r3, [pc, #448]	; (80056dc <SDMMC_GetCmdResp1+0x1d0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a70      	ldr	r2, [pc, #448]	; (80056e0 <SDMMC_GetCmdResp1+0x1d4>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0a5a      	lsrs	r2, r3, #9
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	61fa      	str	r2, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800553c:	e0c9      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ef      	beq.n	800552e <SDMMC_GetCmdResp1+0x22>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ea      	bne.n	800552e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2204      	movs	r2, #4
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800556a:	2304      	movs	r3, #4
 800556c:	e0b1      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005580:	2301      	movs	r3, #1
 8005582:	e0a6      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22c5      	movs	r2, #197	; 0xc5
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff5b 	bl	8005446 <SDIO_GetCommandResponse>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	4293      	cmp	r3, r2
 8005598:	d001      	beq.n	800559e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800559a:	2301      	movs	r3, #1
 800559c:	e099      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff ff5c 	bl	800545e <SDIO_GetResponse>
 80055a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <SDMMC_GetCmdResp1+0x1d8>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e08d      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da02      	bge.n	80055c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c0:	e087      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	e080      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	e079      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ec:	e071      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055fc:	e069      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560c:	e061      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800561c:	e059      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800562c:	e051      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800563c:	e049      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800564c:	e041      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565c:	e039      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800566c:	e031      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005678:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800567c:	e029      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005688:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800568c:	e021      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800569c:	e019      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80056a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056ac:	e011      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056bc:	e009      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056cc:	e001      	b.n	80056d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000004 	.word	0x20000004
 80056e0:	10624dd3 	.word	0x10624dd3
 80056e4:	fdffe008 	.word	0xfdffe008

080056e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80056ec:	4904      	ldr	r1, [pc, #16]	; (8005700 <MX_FATFS_Init+0x18>)
 80056ee:	4805      	ldr	r0, [pc, #20]	; (8005704 <MX_FATFS_Init+0x1c>)
 80056f0:	f002 ff1a 	bl	8008528 <FATFS_LinkDriver>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <MX_FATFS_Init+0x20>)
 80056fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20001b38 	.word	0x20001b38
 8005704:	20000010 	.word	0x20000010
 8005708:	20001b34 	.word	0x20001b34

0800570c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005710:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	4603      	mov	r3, r0
 8005722:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
#ifndef SD_USE_SPI
    Stat = STA_NOINIT;
    return Stat;
#else
	return SD_disk_initialize(pdrv);
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa ff32 	bl	8000590 <SD_disk_initialize>
 800572c:	4603      	mov	r3, r0
 800572e:	b2db      	uxtb	r3, r3
#endif
  /* USER CODE END INIT */
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
#ifndef SD_USE_SPI
    Stat = STA_NOINIT;
    return Stat;
#else
	return SD_disk_status(pdrv);
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fb f809 	bl	800075c <SD_disk_status>
 800574a:	4603      	mov	r3, r0
 800574c:	b2db      	uxtb	r3, r3
#endif
  /* USER CODE END STATUS */
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
#ifndef SD_USE_SPI
    return RES_OK;
#else
	return SD_disk_read(pdrv, buff, sector, count);
 8005766:	7bf8      	ldrb	r0, [r7, #15]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	f7fb f809 	bl	8000784 <SD_disk_read>
 8005772:	4603      	mov	r3, r0
 8005774:	b2db      	uxtb	r3, r3
#endif
  /* USER CODE END READ */
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4603      	mov	r3, r0
 800578c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
#ifndef SD_USE_SPI
    return RES_OK;
#else
	return SD_disk_write(pdrv, buff, sector, count);
 800578e:	7bf8      	ldrb	r0, [r7, #15]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	f7fb f85f 	bl	8000858 <SD_disk_write>
 800579a:	4603      	mov	r3, r0
 800579c:	b2db      	uxtb	r3, r3
#endif
  /* USER CODE END WRITE */
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	4603      	mov	r3, r0
 80057ae:	603a      	str	r2, [r7, #0]
 80057b0:	71fb      	strb	r3, [r7, #7]
 80057b2:	460b      	mov	r3, r1
 80057b4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
#ifndef SD_USE_SPI
    DRESULT res = RES_ERROR;
    return res;
#else
    return SD_disk_ioctl(pdrv, cmd, buff);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	79b9      	ldrb	r1, [r7, #6]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fb f8cf 	bl	8000960 <SD_disk_ioctl>
 80057c2:	4603      	mov	r3, r0
 80057c4:	b2db      	uxtb	r3, r3
#endif
  /* USER CODE END IOCTL */
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <disk_status+0x30>)
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	79fa      	ldrb	r2, [r7, #7]
 80057e8:	4905      	ldr	r1, [pc, #20]	; (8005800 <disk_status+0x30>)
 80057ea:	440a      	add	r2, r1
 80057ec:	7a12      	ldrb	r2, [r2, #8]
 80057ee:	4610      	mov	r0, r2
 80057f0:	4798      	blx	r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20001b5c 	.word	0x20001b5c

08005804 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <disk_initialize+0x48>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d111      	bne.n	8005840 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	4a0b      	ldr	r2, [pc, #44]	; (800584c <disk_initialize+0x48>)
 8005820:	2101      	movs	r1, #1
 8005822:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <disk_initialize+0x48>)
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	79fa      	ldrb	r2, [r7, #7]
 8005832:	4906      	ldr	r1, [pc, #24]	; (800584c <disk_initialize+0x48>)
 8005834:	440a      	add	r2, r1
 8005836:	7a12      	ldrb	r2, [r2, #8]
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20001b5c 	.word	0x20001b5c

08005850 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <disk_read+0x3c>)
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	689c      	ldr	r4, [r3, #8]
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <disk_read+0x3c>)
 8005870:	4413      	add	r3, r2
 8005872:	7a18      	ldrb	r0, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	47a0      	blx	r4
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}
 800588a:	bf00      	nop
 800588c:	20001b5c 	.word	0x20001b5c

08005890 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <disk_write+0x3c>)
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68dc      	ldr	r4, [r3, #12]
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <disk_write+0x3c>)
 80058b0:	4413      	add	r3, r2
 80058b2:	7a18      	ldrb	r0, [r3, #8]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	47a0      	blx	r4
 80058bc:	4603      	mov	r3, r0
 80058be:	75fb      	strb	r3, [r7, #23]
  return res;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd90      	pop	{r4, r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20001b5c 	.word	0x20001b5c

080058d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	603a      	str	r2, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
 80058dc:	460b      	mov	r3, r1
 80058de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	4a09      	ldr	r2, [pc, #36]	; (8005908 <disk_ioctl+0x38>)
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	79fa      	ldrb	r2, [r7, #7]
 80058ee:	4906      	ldr	r1, [pc, #24]	; (8005908 <disk_ioctl+0x38>)
 80058f0:	440a      	add	r2, r1
 80058f2:	7a10      	ldrb	r0, [r2, #8]
 80058f4:	79b9      	ldrb	r1, [r7, #6]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	4798      	blx	r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20001b5c 	.word	0x20001b5c

0800590c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005920:	e007      	b.n	8005932 <mem_cpy+0x26>
		*d++ = *s++;
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	1c53      	adds	r3, r2, #1
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1c59      	adds	r1, r3, #1
 800592c:	6179      	str	r1, [r7, #20]
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f2      	bne.n	8005922 <mem_cpy+0x16>
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005958:	e005      	b.n	8005966 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	617a      	str	r2, [r7, #20]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f4      	bne.n	800595a <mem_set+0x12>
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005994:	bf00      	nop
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <mem_cmp+0x40>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	61fa      	str	r2, [r7, #28]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	61ba      	str	r2, [r7, #24]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	1acb      	subs	r3, r1, r3
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ec      	beq.n	8005996 <mem_cmp+0x1a>
	return r;
 80059bc:	697b      	ldr	r3, [r7, #20]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059d2:	e002      	b.n	80059da <chk_chr+0x12>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <chk_chr+0x26>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d1f2      	bne.n	80059d4 <chk_chr+0xc>
	return *str;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	781b      	ldrb	r3, [r3, #0]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e03b      	b.n	8005a88 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005a10:	4931      	ldr	r1, [pc, #196]	; (8005ad8 <chk_lock+0xdc>)
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d02c      	beq.n	8005a7e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a24:	492c      	ldr	r1, [pc, #176]	; (8005ad8 <chk_lock+0xdc>)
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d120      	bne.n	8005a82 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005a40:	4925      	ldr	r1, [pc, #148]	; (8005ad8 <chk_lock+0xdc>)
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a58:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d111      	bne.n	8005a82 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a5e:	491e      	ldr	r1, [pc, #120]	; (8005ad8 <chk_lock+0xdc>)
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a76:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d102      	bne.n	8005a82 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a7c:	e007      	b.n	8005a8e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d9c0      	bls.n	8005a10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d109      	bne.n	8005aa8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <chk_lock+0xa4>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d101      	bne.n	8005aa4 <chk_lock+0xa8>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e013      	b.n	8005acc <chk_lock+0xd0>
 8005aa4:	2312      	movs	r3, #18
 8005aa6:	e011      	b.n	8005acc <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <chk_lock+0xca>
 8005aae:	490a      	ldr	r1, [pc, #40]	; (8005ad8 <chk_lock+0xdc>)
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	330a      	adds	r3, #10
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac4:	d101      	bne.n	8005aca <chk_lock+0xce>
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	e000      	b.n	8005acc <chk_lock+0xd0>
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20001b44 	.word	0x20001b44

08005adc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	e002      	b.n	8005aee <enq_lock+0x12>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3301      	adds	r3, #1
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d809      	bhi.n	8005b08 <enq_lock+0x2c>
 8005af4:	490a      	ldr	r1, [pc, #40]	; (8005b20 <enq_lock+0x44>)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ef      	bne.n	8005ae8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20001b44 	.word	0x20001b44

08005b24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e02e      	b.n	8005b92 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005b34:	4958      	ldr	r1, [pc, #352]	; (8005c98 <inc_lock+0x174>)
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d11d      	bne.n	8005b8c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005b50:	4951      	ldr	r1, [pc, #324]	; (8005c98 <inc_lock+0x174>)
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4613      	mov	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3304      	adds	r3, #4
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10e      	bne.n	8005b8c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005b6e:	494a      	ldr	r1, [pc, #296]	; (8005c98 <inc_lock+0x174>)
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d006      	beq.n	8005b9a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d9cd      	bls.n	8005b34 <inc_lock+0x10>
 8005b98:	e000      	b.n	8005b9c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005b9a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d148      	bne.n	8005c34 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e002      	b.n	8005bae <inc_lock+0x8a>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d809      	bhi.n	8005bc8 <inc_lock+0xa4>
 8005bb4:	4938      	ldr	r1, [pc, #224]	; (8005c98 <inc_lock+0x174>)
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1ef      	bne.n	8005ba8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d101      	bne.n	8005bd2 <inc_lock+0xae>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e05d      	b.n	8005c8e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd8:	6819      	ldr	r1, [r3, #0]
 8005bda:	482f      	ldr	r0, [pc, #188]	; (8005c98 <inc_lock+0x174>)
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4403      	add	r3, r0
 8005be8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	6899      	ldr	r1, [r3, #8]
 8005bf2:	4829      	ldr	r0, [pc, #164]	; (8005c98 <inc_lock+0x174>)
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4403      	add	r3, r0
 8005c00:	3304      	adds	r3, #4
 8005c02:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0a:	88d8      	ldrh	r0, [r3, #6]
 8005c0c:	4922      	ldr	r1, [pc, #136]	; (8005c98 <inc_lock+0x174>)
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c20:	491d      	ldr	r1, [pc, #116]	; (8005c98 <inc_lock+0x174>)
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	330a      	adds	r3, #10
 8005c30:	2200      	movs	r2, #0
 8005c32:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <inc_lock+0x130>
 8005c3a:	4917      	ldr	r1, [pc, #92]	; (8005c98 <inc_lock+0x174>)
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	330a      	adds	r3, #10
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <inc_lock+0x130>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e01c      	b.n	8005c8e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <inc_lock+0x14e>
 8005c5a:	490f      	ldr	r1, [pc, #60]	; (8005c98 <inc_lock+0x174>)
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	330a      	adds	r3, #10
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	b299      	uxth	r1, r3
 8005c70:	e001      	b.n	8005c76 <inc_lock+0x152>
 8005c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c76:	4808      	ldr	r0, [pc, #32]	; (8005c98 <inc_lock+0x174>)
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4403      	add	r3, r0
 8005c84:	330a      	adds	r3, #10
 8005c86:	460a      	mov	r2, r1
 8005c88:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	20001b44 	.word	0x20001b44

08005c9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e016      	b.n	8005cd8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005caa:	4910      	ldr	r1, [pc, #64]	; (8005cec <clear_lock+0x50>)
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d108      	bne.n	8005cd2 <clear_lock+0x36>
 8005cc0:	490a      	ldr	r1, [pc, #40]	; (8005cec <clear_lock+0x50>)
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d9e5      	bls.n	8005caa <clear_lock+0xe>
	}
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20001b44 	.word	0x20001b44

08005cf0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d040      	beq.n	8005d8a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	7858      	ldrb	r0, [r3, #1]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	f7ff fdb6 	bl	8005890 <disk_write>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e02c      	b.n	8005d8a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d36:	2200      	movs	r2, #0
 8005d38:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d21b      	bcs.n	8005d8a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e012      	b.n	8005d84 <sync_window+0x94>
					wsect += fs->fsize;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	7858      	ldrb	r0, [r3, #1]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	2301      	movs	r3, #1
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	f7ff fd89 	bl	8005890 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d8e9      	bhi.n	8005d5e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d01e      	beq.n	8005dee <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff9d 	bl	8005cf0 <sync_window>
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d116      	bne.n	8005dee <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc6:	7858      	ldrb	r0, [r3, #1]
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	2301      	movs	r3, #1
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	f7ff fd3f 	bl	8005850 <disk_read>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	461a      	mov	r2, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	3b02      	subs	r3, #2
 8005e06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	3b02      	subs	r3, #2
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d301      	bcc.n	8005e1c <clust2sect+0x24>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e00c      	b.n	8005e36 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e22:	789b      	ldrb	r3, [r3, #2]
 8005e24:	461a      	mov	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	fb03 f202 	mul.w	r2, r3, r2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	4413      	add	r3, r2
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d906      	bls.n	8005e5e <get_fat+0x1e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005e5e:	2301      	movs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e0e4      	b.n	800602e <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	f000 8098 	beq.w	8005fa8 <get_fat+0x168>
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	f300 80ce 	bgt.w	800601a <get_fat+0x1da>
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d002      	beq.n	8005e88 <get_fat+0x48>
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d05f      	beq.n	8005f46 <get_fat+0x106>
 8005e86:	e0c8      	b.n	800601a <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eae:	4413      	add	r3, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ff6e 	bl	8005d94 <move_window>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 80b0 	bne.w	8006020 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	60fa      	str	r2, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ecc:	8952      	ldrh	r2, [r2, #10]
 8005ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ed2:	fb01 f202 	mul.w	r2, r1, r2
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ff4a 	bl	8005d94 <move_window>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 808e 	bne.w	8006024 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	895b      	ldrh	r3, [r3, #10]
 8005f10:	461a      	mov	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f18:	fb01 f202 	mul.w	r2, r1, r2
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	5cd3      	ldrb	r3, [r2, r3]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	461a      	mov	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <get_fat+0xfc>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	e002      	b.n	8005f42 <get_fat+0x102>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f42:	617b      	str	r3, [r7, #20]
			break;
 8005f44:	e073      	b.n	800602e <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f54:	895b      	ldrh	r3, [r3, #10]
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f62:	4413      	add	r3, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff ff14 	bl	8005d94 <move_window>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d15a      	bne.n	8006028 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f7c:	8952      	ldrh	r2, [r2, #10]
 8005f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f82:	fb01 f202 	mul.w	r2, r1, r2
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	617b      	str	r3, [r7, #20]
			break;
 8005fa6:	e042      	b.n	800602e <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb6:	895b      	ldrh	r3, [r3, #10]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fee3 	bl	8005d94 <move_window>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d12b      	bne.n	800602c <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fde:	8952      	ldrh	r2, [r2, #10]
 8005fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe4:	fb01 f202 	mul.w	r2, r1, r2
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3303      	adds	r3, #3
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	061a      	lsls	r2, r3, #24
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	4313      	orrs	r3, r2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	3201      	adds	r2, #1
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	0212      	lsls	r2, r2, #8
 800600a:	4313      	orrs	r3, r2
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006016:	617b      	str	r3, [r7, #20]
			break;
 8006018:	e009      	b.n	800602e <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e006      	b.n	800602e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006020:	bf00      	nop
 8006022:	e004      	b.n	800602e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006024:	bf00      	nop
 8006026:	e002      	b.n	800602e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800602c:	bf00      	nop
		}
	}

	return val;
 800602e:	697b      	ldr	r3, [r7, #20]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d906      	bls.n	8006058 <put_fat+0x20>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d302      	bcc.n	800605e <put_fat+0x26>
		res = FR_INT_ERR;
 8006058:	2302      	movs	r3, #2
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e13a      	b.n	80062d4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	f000 80d0 	beq.w	800620c <put_fat+0x1d4>
 800606c:	2b03      	cmp	r3, #3
 800606e:	f300 8127 	bgt.w	80062c0 <put_fat+0x288>
 8006072:	2b01      	cmp	r3, #1
 8006074:	d003      	beq.n	800607e <put_fat+0x46>
 8006076:	2b02      	cmp	r3, #2
 8006078:	f000 808f 	beq.w	800619a <put_fat+0x162>
 800607c:	e120      	b.n	80062c0 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609a:	895b      	ldrh	r3, [r3, #10]
 800609c:	4619      	mov	r1, r3
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80060a4:	4413      	add	r3, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fe73 	bl	8005d94 <move_window>
 80060ae:	4603      	mov	r3, r0
 80060b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060b2:	7ffb      	ldrb	r3, [r7, #31]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 8106 	bne.w	80062c6 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c6:	8952      	ldrh	r2, [r2, #10]
 80060c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060cc:	fb01 f202 	mul.w	r2, r1, r2
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00d      	beq.n	80060fe <put_fat+0xc6>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	b25a      	sxtb	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	b25b      	sxtb	r3, r3
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	e001      	b.n	8006102 <put_fat+0xca>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610c:	2201      	movs	r2, #1
 800610e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	895b      	ldrh	r3, [r3, #10]
 8006120:	4619      	mov	r1, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	fbb3 f3f1 	udiv	r3, r3, r1
 8006128:	4413      	add	r3, r2
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fe31 	bl	8005d94 <move_window>
 8006132:	4603      	mov	r3, r0
 8006134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006136:	7ffb      	ldrb	r3, [r7, #31]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 80c6 	bne.w	80062ca <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006144:	895b      	ldrh	r3, [r3, #10]
 8006146:	461a      	mov	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	fbb3 f1f2 	udiv	r1, r3, r2
 800614e:	fb01 f202 	mul.w	r2, r1, r2
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <put_fat+0x134>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e00e      	b.n	800618a <put_fat+0x152>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b25b      	sxtb	r3, r3
 8006172:	f023 030f 	bic.w	r3, r3, #15
 8006176:	b25a      	sxtb	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	b25b      	sxtb	r3, r3
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	b25b      	sxtb	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b25b      	sxtb	r3, r3
 8006188:	b2db      	uxtb	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006194:	2201      	movs	r2, #1
 8006196:	711a      	strb	r2, [r3, #4]
			break;
 8006198:	e09c      	b.n	80062d4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a8:	895b      	ldrh	r3, [r3, #10]
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4619      	mov	r1, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b6:	4413      	add	r3, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fdea 	bl	8005d94 <move_window>
 80061c0:	4603      	mov	r3, r0
 80061c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 8081 	bne.w	80062ce <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061d6:	8952      	ldrh	r2, [r2, #10]
 80061d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061dc:	fb01 f202 	mul.w	r2, r1, r2
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	3301      	adds	r3, #1
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	2201      	movs	r2, #1
 8006208:	711a      	strb	r2, [r3, #4]
			break;
 800620a:	e063      	b.n	80062d4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	895b      	ldrh	r3, [r3, #10]
 800621c:	089b      	lsrs	r3, r3, #2
 800621e:	b29b      	uxth	r3, r3
 8006220:	4619      	mov	r1, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	fbb3 f3f1 	udiv	r3, r3, r1
 8006228:	4413      	add	r3, r2
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fdb1 	bl	8005d94 <move_window>
 8006232:	4603      	mov	r3, r0
 8006234:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006236:	7ffb      	ldrb	r3, [r7, #31]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d14a      	bne.n	80062d2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006246:	8952      	ldrh	r2, [r2, #10]
 8006248:	fbb3 f1f2 	udiv	r1, r3, r2
 800624c:	fb01 f202 	mul.w	r2, r1, r2
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3303      	adds	r3, #3
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	061a      	lsls	r2, r3, #24
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	3302      	adds	r3, #2
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	4313      	orrs	r3, r2
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	3201      	adds	r2, #1
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	0212      	lsls	r2, r2, #8
 8006272:	4313      	orrs	r3, r2
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	4313      	orrs	r3, r2
 800627a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4313      	orrs	r3, r2
 8006282:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	b29b      	uxth	r3, r3
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	b29a      	uxth	r2, r3
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3301      	adds	r3, #1
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0c1a      	lsrs	r2, r3, #16
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	3302      	adds	r3, #2
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	0e1a      	lsrs	r2, r3, #24
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	3303      	adds	r3, #3
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	2201      	movs	r2, #1
 80062bc:	711a      	strb	r2, [r3, #4]
			break;
 80062be:	e009      	b.n	80062d4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80062c0:	2302      	movs	r3, #2
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e006      	b.n	80062d4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80062c6:	bf00      	nop
 80062c8:	e004      	b.n	80062d4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80062d2:	bf00      	nop
		}
	}

	return res;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d906      	bls.n	80062fc <remove_chain+0x1e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d302      	bcc.n	8006302 <remove_chain+0x24>
		res = FR_INT_ERR;
 80062fc:	2302      	movs	r3, #2
 80062fe:	73fb      	strb	r3, [r7, #15]
 8006300:	e049      	b.n	8006396 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006306:	e03b      	b.n	8006380 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fd98 	bl	8005e40 <get_fat>
 8006310:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d03b      	beq.n	8006390 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d102      	bne.n	8006324 <remove_chain+0x46>
 800631e:	2302      	movs	r3, #2
 8006320:	73fb      	strb	r3, [r7, #15]
 8006322:	e038      	b.n	8006396 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d102      	bne.n	8006332 <remove_chain+0x54>
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e031      	b.n	8006396 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006332:	2200      	movs	r2, #0
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fe7e 	bl	8006038 <put_fat>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d126      	bne.n	8006394 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d013      	beq.n	800637c <remove_chain+0x9e>
				fs->free_clust++;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	3301      	adds	r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006364:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	795b      	ldrb	r3, [r3, #5]
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d3bc      	bcc.n	8006308 <remove_chain+0x2a>
 800638e:	e002      	b.n	8006396 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006394:	bf00      	nop
		}
	}

	return res;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d111      	bne.n	80063d4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <create_chain+0x2e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d31d      	bcc.n	800640a <create_chain+0x6a>
 80063ce:	2301      	movs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	e01a      	b.n	800640a <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fd32 	bl	8005e40 <get_fat>
 80063dc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d801      	bhi.n	80063e8 <create_chain+0x48>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e07f      	b.n	80064e8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d101      	bne.n	80063f4 <create_chain+0x54>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	e079      	b.n	80064e8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d201      	bcs.n	8006406 <create_chain+0x66>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	e070      	b.n	80064e8 <create_chain+0x148>
		scl = clst;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	3301      	adds	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	429a      	cmp	r2, r3
 8006420:	d307      	bcc.n	8006432 <create_chain+0x92>
			ncl = 2;
 8006422:	2302      	movs	r3, #2
 8006424:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d901      	bls.n	8006432 <create_chain+0x92>
 800642e:	2300      	movs	r3, #0
 8006430:	e05a      	b.n	80064e8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fd03 	bl	8005e40 <get_fat>
 800643a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00e      	beq.n	8006460 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d002      	beq.n	8006450 <create_chain+0xb0>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <create_chain+0xb4>
			return cs;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	e049      	b.n	80064e8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d1d8      	bne.n	800640e <create_chain+0x6e>
 800645c:	2300      	movs	r3, #0
 800645e:	e043      	b.n	80064e8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006460:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006462:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fde5 	bl	8006038 <put_fat>
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <create_chain+0xec>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fdd8 	bl	8006038 <put_fat>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d121      	bne.n	80064d6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006498:	461a      	mov	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d01c      	beq.n	80064e6 <create_chain+0x146>
			fs->free_clust--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064bc:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c4:	795b      	ldrb	r3, [r3, #5]
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d2:	715a      	strb	r2, [r3, #5]
 80064d4:	e007      	b.n	80064e6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d102      	bne.n	80064e2 <create_chain+0x142>
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e000      	b.n	80064e4 <create_chain+0x144>
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	3304      	adds	r3, #4
 8006504:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	895b      	ldrh	r3, [r3, #10]
 8006514:	461a      	mov	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	fbb3 f3f2 	udiv	r3, r3, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006528:	7892      	ldrb	r2, [r2, #2]
 800652a:	fbb3 f3f2 	udiv	r3, r3, r2
 800652e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	613a      	str	r2, [r7, #16]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <clmt_clust+0x54>
 8006540:	2300      	movs	r3, #0
 8006542:	e010      	b.n	8006566 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d307      	bcc.n	800655c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	3304      	adds	r3, #4
 8006558:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800655a:	e7e9      	b.n	8006530 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800655c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006584:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d009      	beq.n	80065aa <dir_sdi+0x3a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d301      	bcc.n	80065ae <dir_sdi+0x3e>
		return FR_INT_ERR;
 80065aa:	2302      	movs	r3, #2
 80065ac:	e0aa      	b.n	8006704 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d110      	bne.n	80065d6 <dir_sdi+0x66>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d107      	bne.n	80065d6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d115      	bne.n	8006608 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e8:	891b      	ldrh	r3, [r3, #8]
 80065ea:	461a      	mov	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d301      	bcc.n	80065f6 <dir_sdi+0x86>
			return FR_INT_ERR;
 80065f2:	2302      	movs	r3, #2
 80065f4:	e086      	b.n	8006704 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	e043      	b.n	8006690 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006614:	895b      	ldrh	r3, [r3, #10]
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	789b      	ldrb	r3, [r3, #2]
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006630:	e021      	b.n	8006676 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fbff 	bl	8005e40 <get_fat>
 8006642:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d101      	bne.n	8006650 <dir_sdi+0xe0>
 800664c:	2301      	movs	r3, #1
 800664e:	e059      	b.n	8006704 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d909      	bls.n	800666a <dir_sdi+0xfa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d301      	bcc.n	800666e <dir_sdi+0xfe>
				return FR_INT_ERR;
 800666a:	2302      	movs	r3, #2
 800666c:	e04a      	b.n	8006704 <dir_sdi+0x194>
			idx -= ic;
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	429a      	cmp	r2, r3
 800667c:	d2d9      	bcs.n	8006632 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fbb5 	bl	8005df8 <clust2sect>
 800668e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006696:	461a      	mov	r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <dir_sdi+0x136>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e02e      	b.n	8006704 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b2:	895b      	ldrh	r3, [r3, #10]
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ca:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e2:	895b      	ldrh	r3, [r3, #10]
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f0:	fb01 f202 	mul.w	r2, r1, r2
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	015b      	lsls	r3, r3, #5
 80066f8:	4403      	add	r3, r0
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006700:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671c:	88db      	ldrh	r3, [r3, #6]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <dir_next+0x2a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <dir_next+0x2e>
		return FR_NO_FILE;
 8006736:	2304      	movs	r3, #4
 8006738:	e12e      	b.n	8006998 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006746:	895b      	ldrh	r3, [r3, #10]
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	fbb3 f1f2 	udiv	r1, r3, r2
 8006754:	fb01 f202 	mul.w	r2, r1, r2
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 80fa 	bne.w	8006954 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	3301      	adds	r3, #1
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006770:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	891b      	ldrh	r3, [r3, #8]
 800678c:	461a      	mov	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4293      	cmp	r3, r2
 8006792:	f0c0 80df 	bcc.w	8006954 <dir_next+0x248>
				return FR_NO_FILE;
 8006796:	2304      	movs	r3, #4
 8006798:	e0fe      	b.n	8006998 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a6:	895b      	ldrh	r3, [r3, #10]
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067c0:	7892      	ldrb	r2, [r2, #2]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 80c4 	bne.w	8006954 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7ff fb2e 	bl	8005e40 <get_fat>
 80067e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d801      	bhi.n	80067f0 <dir_next+0xe4>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0d3      	b.n	8006998 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	d101      	bne.n	80067fc <dir_next+0xf0>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0cd      	b.n	8006998 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	429a      	cmp	r2, r3
 800680e:	f0c0 808e 	bcc.w	800692e <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <dir_next+0x110>
 8006818:	2304      	movs	r3, #4
 800681a:	e0bd      	b.n	8006998 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7ff fdb6 	bl	80063a0 <create_chain>
 8006834:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <dir_next+0x134>
 800683c:	2307      	movs	r3, #7
 800683e:	e0ab      	b.n	8006998 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <dir_next+0x13e>
 8006846:	2302      	movs	r3, #2
 8006848:	e0a6      	b.n	8006998 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d101      	bne.n	8006856 <dir_next+0x14a>
 8006852:	2301      	movs	r3, #1
 8006854:	e0a0      	b.n	8006998 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fa46 	bl	8005cf0 <sync_window>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <dir_next+0x162>
 800686a:	2301      	movs	r3, #1
 800686c:	e094      	b.n	8006998 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006884:	895b      	ldrh	r3, [r3, #10]
 8006886:	461a      	mov	r2, r3
 8006888:	2100      	movs	r1, #0
 800688a:	f7ff f85d 	bl	8005948 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689c:	681c      	ldr	r4, [r3, #0]
 800689e:	6979      	ldr	r1, [r7, #20]
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7ff faa9 	bl	8005df8 <clust2sect>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e021      	b.n	80068f8 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c0:	2201      	movs	r2, #1
 80068c2:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fa0f 	bl	8005cf0 <sync_window>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <dir_next+0x1d0>
 80068d8:	2301      	movs	r3, #1
 80068da:	e05d      	b.n	8006998 <dir_next+0x28c>
						dp->fs->winsect++;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80068e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80068ea:	3201      	adds	r2, #1
 80068ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3301      	adds	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006904:	789b      	ldrb	r3, [r3, #2]
 8006906:	461a      	mov	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4293      	cmp	r3, r2
 800690c:	d3d2      	bcc.n	80068b4 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1acb      	subs	r3, r1, r3
 8006928:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006934:	461a      	mov	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6979      	ldr	r1, [r7, #20]
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fa57 	bl	8005df8 <clust2sect>
 800694a:	4602      	mov	r2, r0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006952:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006976:	895b      	ldrh	r3, [r3, #10]
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	b29b      	uxth	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	fbb3 f1f2 	udiv	r1, r3, r2
 8006984:	fb01 f202 	mul.w	r2, r1, r2
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	015b      	lsls	r3, r3, #5
 800698c:	4403      	add	r3, r0
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006994:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80069aa:	2100      	movs	r1, #0
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fddf 	bl	8006570 <dir_sdi>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d135      	bne.n	8006a28 <dir_alloc+0x88>
		n = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7ff f9de 	bl	8005d94 <move_window>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d121      	bne.n	8006a26 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2be5      	cmp	r3, #229	; 0xe5
 80069ee:	d006      	beq.n	80069fe <dir_alloc+0x5e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d102      	bne.n	8006a12 <dir_alloc+0x72>
 8006a0c:	e00c      	b.n	8006a28 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006a12:	2101      	movs	r1, #1
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fe79 	bl	800670c <dir_next>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0cd      	beq.n	80069c0 <dir_alloc+0x20>
 8006a24:	e000      	b.n	8006a28 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006a26:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d101      	bne.n	8006a32 <dir_alloc+0x92>
 8006a2e:	2307      	movs	r3, #7
 8006a30:	73fb      	strb	r3, [r7, #15]
	return res;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	331b      	adds	r3, #27
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	331a      	adds	r3, #26
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d10f      	bne.n	8006a8c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	3315      	adds	r3, #21
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	b21a      	sxth	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b21b      	sxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

	return cl;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	331a      	adds	r3, #26
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	331b      	adds	r3, #27
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	0c1a      	lsrs	r2, r3, #16
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3315      	adds	r3, #21
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fd3e 	bl	8006570 <dir_sdi>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <dir_find+0x1e>
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	e03f      	b.n	8006b82 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7ff f93d 	bl	8005d94 <move_window>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d12a      	bne.n	8006b7a <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <dir_find+0x5c>
 8006b3a:	2304      	movs	r3, #4
 8006b3c:	75fb      	strb	r3, [r7, #23]
 8006b3e:	e01f      	b.n	8006b80 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	330b      	adds	r3, #11
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <dir_find+0x82>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	220b      	movs	r2, #11
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f7fe ff0e 	bl	800597c <mem_cmp>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006b66:	2100      	movs	r1, #0
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fdcf 	bl	800670c <dir_next>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0c4      	beq.n	8006b02 <dir_find+0x1e>
 8006b78:	e002      	b.n	8006b80 <dir_find+0x9c>
		if (res != FR_OK) break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <dir_find+0x9c>
			break;
 8006b7e:	bf00      	nop

	return res;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8006b94:	2304      	movs	r3, #4
 8006b96:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8006b98:	e042      	b.n	8006c20 <dir_read+0x96>
		res = move_window(dp->fs, dp->sect);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7ff f8f1 	bl	8005d94 <move_window>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d138      	bne.n	8006c2e <dir_read+0xa4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <dir_read+0x4e>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	75fb      	strb	r3, [r7, #23]
 8006bd6:	e02f      	b.n	8006c38 <dir_read+0xae>
		a = dir[DIR_Attr] & AM_MASK;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	330b      	adds	r3, #11
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be2:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2be5      	cmp	r3, #229	; 0xe5
 8006be8:	d011      	beq.n	8006c0e <dir_read+0x84>
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b2e      	cmp	r3, #46	; 0x2e
 8006bee:	d00e      	beq.n	8006c0e <dir_read+0x84>
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d00b      	beq.n	8006c0e <dir_read+0x84>
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	f023 0320 	bic.w	r3, r3, #32
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d011      	beq.n	8006c32 <dir_read+0xa8>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff fd7b 	bl	800670c <dir_next>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <dir_read+0xac>
	while (dp->sect) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1b6      	bne.n	8006b9a <dir_read+0x10>
 8006c2c:	e004      	b.n	8006c38 <dir_read+0xae>
		if (res != FR_OK) break;
 8006c2e:	bf00      	nop
 8006c30:	e002      	b.n	8006c38 <dir_read+0xae>
			break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <dir_read+0xae>
		if (res != FR_OK) break;
 8006c36:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <dir_read+0xc0>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c44:	461a      	mov	r2, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	6113      	str	r3, [r2, #16]

	return res;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fe9e 	bl	80069a0 <dir_alloc>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d12d      	bne.n	8006cca <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7ff f887 	bl	8005d94 <move_window>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11c      	bne.n	8006cca <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fe53 	bl	8005948 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	6958      	ldr	r0, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	220b      	movs	r2, #11
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f7fe fe29 	bl	800590c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	3309      	adds	r3, #9
 8006ce2:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d05b      	beq.n	8006da8 <get_fileinfo+0xd4>
		dir = dp->dir;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	60bb      	str	r3, [r7, #8]
		i = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006cfe:	e01c      	b.n	8006d3a <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	617a      	str	r2, [r7, #20]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d100      	bne.n	8006d16 <get_fileinfo+0x42>
 8006d14:	e011      	b.n	8006d3a <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d101      	bne.n	8006d20 <get_fileinfo+0x4c>
 8006d1c:	23e5      	movs	r3, #229	; 0xe5
 8006d1e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d104      	bne.n	8006d30 <get_fileinfo+0x5c>
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	613a      	str	r2, [r7, #16]
 8006d2c:	222e      	movs	r2, #46	; 0x2e
 8006d2e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	613a      	str	r2, [r7, #16]
 8006d36:	7bfa      	ldrb	r2, [r7, #15]
 8006d38:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b0a      	cmp	r3, #10
 8006d3e:	d9df      	bls.n	8006d00 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	7ada      	ldrb	r2, [r3, #11]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	331f      	adds	r3, #31
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	061a      	lsls	r2, r3, #24
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	331e      	adds	r3, #30
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	321d      	adds	r2, #29
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	0212      	lsls	r2, r2, #8
 8006d62:	4313      	orrs	r3, r2
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	321c      	adds	r2, #28
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3319      	adds	r3, #25
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	b21a      	sxth	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b21b      	sxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b21b      	sxth	r3, r3
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	3317      	adds	r3, #23
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	b21a      	sxth	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3316      	adds	r3, #22
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b21b      	sxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b21b      	sxth	r3, r3
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e002      	b.n	8006dd0 <create_name+0x18>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8006dd6:	d0f8      	beq.n	8006dca <create_name+0x12>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8006dde:	d0f4      	beq.n	8006dca <create_name+0x12>
	sfn = dp->fn;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006dea:	220b      	movs	r2, #11
 8006dec:	2120      	movs	r1, #32
 8006dee:	68b8      	ldr	r0, [r7, #8]
 8006df0:	f7fe fdaa 	bl	8005948 <mem_set>
	si = i = b = 0; ni = 8;
 8006df4:	2300      	movs	r3, #0
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	2308      	movs	r3, #8
 8006e02:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	617a      	str	r2, [r7, #20]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006e12:	7fbb      	ldrb	r3, [r7, #30]
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d953      	bls.n	8006ec0 <create_name+0x108>
 8006e18:	7fbb      	ldrb	r3, [r7, #30]
 8006e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8006e1c:	d050      	beq.n	8006ec0 <create_name+0x108>
 8006e1e:	7fbb      	ldrb	r3, [r7, #30]
 8006e20:	2b5c      	cmp	r3, #92	; 0x5c
 8006e22:	d04d      	beq.n	8006ec0 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8006e24:	7fbb      	ldrb	r3, [r7, #30]
 8006e26:	2b2e      	cmp	r3, #46	; 0x2e
 8006e28:	d003      	beq.n	8006e32 <create_name+0x7a>
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d30f      	bcc.n	8006e52 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d102      	bne.n	8006e3e <create_name+0x86>
 8006e38:	7fbb      	ldrb	r3, [r7, #30]
 8006e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e3c:	d001      	beq.n	8006e42 <create_name+0x8a>
 8006e3e:	2306      	movs	r3, #6
 8006e40:	e073      	b.n	8006f2a <create_name+0x172>
			i = 8; ni = 11;
 8006e42:	2308      	movs	r3, #8
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	230b      	movs	r3, #11
 8006e48:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e035      	b.n	8006ebe <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006e52:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da08      	bge.n	8006e6c <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
 8006e5c:	f043 0303 	orr.w	r3, r3, #3
 8006e60:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006e62:	7fbb      	ldrb	r3, [r7, #30]
 8006e64:	3b80      	subs	r3, #128	; 0x80
 8006e66:	4a33      	ldr	r2, [pc, #204]	; (8006f34 <create_name+0x17c>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
 8006e6a:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006e6c:	7fbb      	ldrb	r3, [r7, #30]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4831      	ldr	r0, [pc, #196]	; (8006f38 <create_name+0x180>)
 8006e72:	f7fe fda9 	bl	80059c8 <chk_chr>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <create_name+0xc8>
				return FR_INVALID_NAME;
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	e054      	b.n	8006f2a <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006e80:	7fbb      	ldrb	r3, [r7, #30]
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d907      	bls.n	8006e96 <create_name+0xde>
 8006e86:	7fbb      	ldrb	r3, [r7, #30]
 8006e88:	2b5a      	cmp	r3, #90	; 0x5a
 8006e8a:	d804      	bhi.n	8006e96 <create_name+0xde>
				b |= 2;
 8006e8c:	7ffb      	ldrb	r3, [r7, #31]
 8006e8e:	f043 0302 	orr.w	r3, r3, #2
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e00c      	b.n	8006eb0 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006e96:	7fbb      	ldrb	r3, [r7, #30]
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	d909      	bls.n	8006eb0 <create_name+0xf8>
 8006e9c:	7fbb      	ldrb	r3, [r7, #30]
 8006e9e:	2b7a      	cmp	r3, #122	; 0x7a
 8006ea0:	d806      	bhi.n	8006eb0 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8006ea2:	7ffb      	ldrb	r3, [r7, #31]
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	7fbb      	ldrb	r3, [r7, #30]
 8006eac:	3b20      	subs	r3, #32
 8006eae:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	613a      	str	r2, [r7, #16]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	7fba      	ldrb	r2, [r7, #30]
 8006ebc:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006ebe:	e7a1      	b.n	8006e04 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	441a      	add	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006eca:	7fbb      	ldrb	r3, [r7, #30]
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d801      	bhi.n	8006ed4 <create_name+0x11c>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	e000      	b.n	8006ed6 <create_name+0x11e>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <create_name+0x12a>
 8006ede:	2306      	movs	r3, #6
 8006ee0:	e023      	b.n	8006f2a <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2be5      	cmp	r3, #229	; 0xe5
 8006ee8:	d102      	bne.n	8006ef0 <create_name+0x138>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2205      	movs	r2, #5
 8006eee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d102      	bne.n	8006efc <create_name+0x144>
 8006ef6:	7ffb      	ldrb	r3, [r7, #31]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006efc:	7ffb      	ldrb	r3, [r7, #31]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d103      	bne.n	8006f0e <create_name+0x156>
 8006f06:	7fbb      	ldrb	r3, [r7, #30]
 8006f08:	f043 0310 	orr.w	r3, r3, #16
 8006f0c:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
 8006f10:	f003 030c 	and.w	r3, r3, #12
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d103      	bne.n	8006f20 <create_name+0x168>
 8006f18:	7fbb      	ldrb	r3, [r7, #30]
 8006f1a:	f043 0308 	orr.w	r3, r3, #8
 8006f1e:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	330b      	adds	r3, #11
 8006f24:	7fba      	ldrb	r2, [r7, #30]
 8006f26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f28:	2300      	movs	r3, #0
#endif
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	080095d0 	.word	0x080095d0
 8006f38:	08008f8c 	.word	0x08008f8c

08006f3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b2f      	cmp	r3, #47	; 0x2f
 8006f4c:	d003      	beq.n	8006f56 <follow_path+0x1a>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b5c      	cmp	r3, #92	; 0x5c
 8006f54:	d102      	bne.n	8006f5c <follow_path+0x20>
		path++;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b1f      	cmp	r3, #31
 8006f6e:	d80c      	bhi.n	8006f8a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fafc 	bl	8006570 <dir_sdi>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6153      	str	r3, [r2, #20]
 8006f88:	e049      	b.n	800701e <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff12 	bl	8006db8 <create_name>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d13a      	bne.n	8007014 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fda0 	bl	8006ae4 <dir_find>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	7adb      	ldrb	r3, [r3, #11]
 8006fb2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d12b      	bne.n	8007018 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d126      	bne.n	8007018 <follow_path+0xdc>
 8006fca:	2305      	movs	r3, #5
 8006fcc:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006fce:	e023      	b.n	8007018 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d120      	bne.n	800701c <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	330b      	adds	r3, #11
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006ff2:	2305      	movs	r3, #5
 8006ff4:	73fb      	strb	r3, [r7, #15]
 8006ff6:	e012      	b.n	800701e <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fd1a 	bl	8006a3c <ld_clust>
 8007008:	4602      	mov	r2, r0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007010:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007012:	e7ba      	b.n	8006f8a <follow_path+0x4e>
			if (res != FR_OK) break;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <follow_path+0xe2>
				break;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800701c:	bf00      	nop
		}
	}

	return res;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d031      	beq.n	80070a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	e002      	b.n	800704c <get_ldnumber+0x24>
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	3301      	adds	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b20      	cmp	r3, #32
 8007052:	d903      	bls.n	800705c <get_ldnumber+0x34>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b3a      	cmp	r3, #58	; 0x3a
 800705a:	d1f4      	bne.n	8007046 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b3a      	cmp	r3, #58	; 0x3a
 8007062:	d11c      	bne.n	800709e <get_ldnumber+0x76>
			tp = *path;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	60fa      	str	r2, [r7, #12]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	3b30      	subs	r3, #48	; 0x30
 8007074:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b09      	cmp	r3, #9
 800707a:	d80e      	bhi.n	800709a <get_ldnumber+0x72>
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	429a      	cmp	r2, r3
 8007082:	d10a      	bne.n	800709a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <get_ldnumber+0x72>
					vol = (int)i;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	e002      	b.n	80070a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80070a2:	693b      	ldr	r3, [r7, #16]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
	...

080070b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	2200      	movs	r2, #0
 80070c2:	711a      	strb	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fe fe5d 	bl	8005d94 <move_window>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <check_fs+0x34>
		return 3;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e04a      	b.n	800717a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070ea:	3301      	adds	r3, #1
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	b21a      	sxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b21b      	sxth	r3, r3
 80070fe:	4a21      	ldr	r2, [pc, #132]	; (8007184 <check_fs+0xd4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d001      	beq.n	8007108 <check_fs+0x58>
		return 2;
 8007104:	2302      	movs	r3, #2
 8007106:	e038      	b.n	800717a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3336      	adds	r3, #54	; 0x36
 800710c:	3303      	adds	r3, #3
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	061a      	lsls	r2, r3, #24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3336      	adds	r3, #54	; 0x36
 8007116:	3302      	adds	r3, #2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	4313      	orrs	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	3236      	adds	r2, #54	; 0x36
 8007122:	3201      	adds	r2, #1
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	0212      	lsls	r2, r2, #8
 8007128:	4313      	orrs	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007130:	4313      	orrs	r3, r2
 8007132:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007136:	4a14      	ldr	r2, [pc, #80]	; (8007188 <check_fs+0xd8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d101      	bne.n	8007140 <check_fs+0x90>
		return 0;
 800713c:	2300      	movs	r3, #0
 800713e:	e01c      	b.n	800717a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3352      	adds	r3, #82	; 0x52
 8007144:	3303      	adds	r3, #3
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	061a      	lsls	r2, r3, #24
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3352      	adds	r3, #82	; 0x52
 800714e:	3302      	adds	r3, #2
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	4313      	orrs	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	3252      	adds	r2, #82	; 0x52
 800715a:	3201      	adds	r2, #1
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	0212      	lsls	r2, r2, #8
 8007160:	4313      	orrs	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007168:	4313      	orrs	r3, r2
 800716a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <check_fs+0xd8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d101      	bne.n	8007178 <check_fs+0xc8>
		return 0;
 8007174:	2300      	movs	r3, #0
 8007176:	e000      	b.n	800717a <check_fs+0xca>

	return 1;
 8007178:	2301      	movs	r3, #1
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	ffffaa55 	.word	0xffffaa55
 8007188:	00544146 	.word	0x00544146

0800718c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b096      	sub	sp, #88	; 0x58
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	f7ff ff41 	bl	8007028 <get_ldnumber>
 80071a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da01      	bge.n	80071b2 <find_volume+0x26>
 80071ae:	230b      	movs	r3, #11
 80071b0:	e311      	b.n	80077d6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071b2:	4a98      	ldr	r2, [pc, #608]	; (8007414 <find_volume+0x288>)
 80071b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <find_volume+0x3a>
 80071c2:	230c      	movs	r3, #12
 80071c4:	e307      	b.n	80077d6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ca:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01c      	beq.n	8007212 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe faf5 	bl	80057d0 <disk_status>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80071ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <find_volume+0x82>
 80071fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800720a:	230a      	movs	r3, #10
 800720c:	e2e3      	b.n	80077d6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800720e:	2300      	movs	r3, #0
 8007210:	e2e1      	b.n	80077d6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	b2da      	uxtb	r2, r3
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007226:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fae7 	bl	8005804 <disk_initialize>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800723c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007248:	2303      	movs	r3, #3
 800724a:	e2c4      	b.n	80077d6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <find_volume+0xd6>
 8007252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800725e:	230a      	movs	r3, #10
 8007260:	e2b9      	b.n	80077d6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	7858      	ldrb	r0, [r3, #1]
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007270:	330a      	adds	r3, #10
 8007272:	461a      	mov	r2, r3
 8007274:	2102      	movs	r1, #2
 8007276:	f7fe fb2b 	bl	80058d0 <disk_ioctl>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10d      	bne.n	800729c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	895b      	ldrh	r3, [r3, #10]
 8007288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728c:	d306      	bcc.n	800729c <find_volume+0x110>
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007294:	895b      	ldrh	r3, [r3, #10]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729a:	d901      	bls.n	80072a0 <find_volume+0x114>
 800729c:	2301      	movs	r3, #1
 800729e:	e29a      	b.n	80077d6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80072a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072a8:	f7ff ff02 	bl	80070b0 <check_fs>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80072b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d153      	bne.n	8007362 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80072ba:	2300      	movs	r3, #0
 80072bc:	643b      	str	r3, [r7, #64]	; 0x40
 80072be:	e028      	b.n	8007312 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80072c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072ca:	4413      	add	r3, r2
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	3304      	adds	r3, #4
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d012      	beq.n	80072fe <find_volume+0x172>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	330b      	adds	r3, #11
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	061a      	lsls	r2, r3, #24
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	330a      	adds	r3, #10
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	4313      	orrs	r3, r2
 80072ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ec:	3209      	adds	r2, #9
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	0212      	lsls	r2, r2, #8
 80072f2:	4313      	orrs	r3, r2
 80072f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f6:	3208      	adds	r2, #8
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	e000      	b.n	8007300 <find_volume+0x174>
 80072fe:	2200      	movs	r2, #0
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	3358      	adds	r3, #88	; 0x58
 8007306:	443b      	add	r3, r7
 8007308:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730e:	3301      	adds	r3, #1
 8007310:	643b      	str	r3, [r7, #64]	; 0x40
 8007312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007314:	2b03      	cmp	r3, #3
 8007316:	d9d3      	bls.n	80072c0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007318:	2300      	movs	r3, #0
 800731a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <find_volume+0x19c>
 8007322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007324:	3b01      	subs	r3, #1
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	3358      	adds	r3, #88	; 0x58
 800732e:	443b      	add	r3, r7
 8007330:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007334:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <find_volume+0x1bc>
 800733c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800733e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007340:	f7ff feb6 	bl	80070b0 <check_fs>
 8007344:	4603      	mov	r3, r0
 8007346:	e000      	b.n	800734a <find_volume+0x1be>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800734e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <find_volume+0x1d6>
 8007356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007358:	3301      	adds	r3, #1
 800735a:	643b      	str	r3, [r7, #64]	; 0x40
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	2b03      	cmp	r3, #3
 8007360:	d9e2      	bls.n	8007328 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007366:	2b03      	cmp	r3, #3
 8007368:	d101      	bne.n	800736e <find_volume+0x1e2>
 800736a:	2301      	movs	r3, #1
 800736c:	e233      	b.n	80077d6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800736e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <find_volume+0x1ee>
 8007376:	230d      	movs	r3, #13
 8007378:	e22d      	b.n	80077d6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	7b1b      	ldrb	r3, [r3, #12]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	b21a      	sxth	r2, r3
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	7adb      	ldrb	r3, [r3, #11]
 8007386:	b21b      	sxth	r3, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	b21a      	sxth	r2, r3
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007392:	895b      	ldrh	r3, [r3, #10]
 8007394:	b21b      	sxth	r3, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	d001      	beq.n	800739e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800739a:	230d      	movs	r3, #13
 800739c:	e21b      	b.n	80077d6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	7ddb      	ldrb	r3, [r3, #23]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	7d9b      	ldrb	r3, [r3, #22]
 80073aa:	b21b      	sxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b21b      	sxth	r3, r3
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80073b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d112      	bne.n	80073e0 <find_volume+0x254>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80073c0:	061a      	lsls	r2, r3, #24
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	4313      	orrs	r3, r2
 80073cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ce:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80073d2:	0212      	lsls	r2, r2, #8
 80073d4:	4313      	orrs	r3, r2
 80073d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80073dc:	4313      	orrs	r3, r2
 80073de:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e6:	461a      	mov	r2, r3
 80073e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ea:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	7c1a      	ldrb	r2, [r3, #16]
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fe:	78db      	ldrb	r3, [r3, #3]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d009      	beq.n	8007418 <find_volume+0x28c>
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800740a:	78db      	ldrb	r3, [r3, #3]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d003      	beq.n	8007418 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007410:	230d      	movs	r3, #13
 8007412:	e1e0      	b.n	80077d6 <find_volume+0x64a>
 8007414:	20001b3c 	.word	0x20001b3c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741e:	78db      	ldrb	r3, [r3, #3]
 8007420:	461a      	mov	r2, r3
 8007422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	7b5a      	ldrb	r2, [r3, #13]
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007434:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <find_volume+0x2d0>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	461a      	mov	r2, r3
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007452:	789b      	ldrb	r3, [r3, #2]
 8007454:	3b01      	subs	r3, #1
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800745c:	230d      	movs	r3, #13
 800745e:	e1ba      	b.n	80077d6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	7c9b      	ldrb	r3, [r3, #18]
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	b21a      	sxth	r2, r3
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	7c5b      	ldrb	r3, [r3, #17]
 800746c:	b21b      	sxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b21b      	sxth	r3, r3
 8007472:	b29a      	uxth	r2, r3
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007482:	891b      	ldrh	r3, [r3, #8]
 8007484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800748a:	8952      	ldrh	r2, [r2, #10]
 800748c:	0952      	lsrs	r2, r2, #5
 800748e:	b292      	uxth	r2, r2
 8007490:	fbb3 f1f2 	udiv	r1, r3, r2
 8007494:	fb01 f202 	mul.w	r2, r1, r2
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80074a0:	230d      	movs	r3, #13
 80074a2:	e198      	b.n	80077d6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	7d1b      	ldrb	r3, [r3, #20]
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	b21a      	sxth	r2, r3
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	7cdb      	ldrb	r3, [r3, #19]
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80074ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d112      	bne.n	80074e6 <find_volume+0x35a>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80074c6:	061a      	lsls	r2, r3, #24
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	4313      	orrs	r3, r2
 80074d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80074d8:	0212      	lsls	r2, r2, #8
 80074da:	4313      	orrs	r3, r2
 80074dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	7bdb      	ldrb	r3, [r3, #15]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	7b9b      	ldrb	r3, [r3, #14]
 80074f2:	b21b      	sxth	r3, r3
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80074fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <find_volume+0x378>
 8007500:	230d      	movs	r3, #13
 8007502:	e168      	b.n	80077d6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007508:	4413      	add	r3, r2
 800750a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007510:	8911      	ldrh	r1, [r2, #8]
 8007512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007514:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007518:	8952      	ldrh	r2, [r2, #10]
 800751a:	0952      	lsrs	r2, r2, #5
 800751c:	b292      	uxth	r2, r2
 800751e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007522:	b292      	uxth	r2, r2
 8007524:	4413      	add	r3, r2
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	429a      	cmp	r2, r3
 800752e:	d201      	bcs.n	8007534 <find_volume+0x3a8>
 8007530:	230d      	movs	r3, #13
 8007532:	e150      	b.n	80077d6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800753c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007540:	7892      	ldrb	r2, [r2, #2]
 8007542:	fbb3 f3f2 	udiv	r3, r3, r2
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <find_volume+0x3c6>
 800754e:	230d      	movs	r3, #13
 8007550:	e141      	b.n	80077d6 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800755e:	4293      	cmp	r3, r2
 8007560:	d902      	bls.n	8007568 <find_volume+0x3dc>
 8007562:	2302      	movs	r3, #2
 8007564:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800756e:	4293      	cmp	r3, r2
 8007570:	d902      	bls.n	8007578 <find_volume+0x3ec>
 8007572:	2303      	movs	r3, #3
 8007574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	3302      	adds	r3, #2
 800757c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800757e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007582:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	461a      	mov	r2, r3
 800758c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007590:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	4413      	add	r3, r2
 8007596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007598:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800759c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800759e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	4413      	add	r3, r2
 80075a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075aa:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80075ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d124      	bne.n	80075fe <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	891b      	ldrh	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <find_volume+0x438>
 80075c0:	230d      	movs	r3, #13
 80075c2:	e108      	b.n	80077d6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075ca:	061a      	lsls	r2, r3, #24
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80075d2:	041b      	lsls	r3, r3, #16
 80075d4:	4313      	orrs	r3, r2
 80075d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80075dc:	0212      	lsls	r2, r2, #8
 80075de:	4313      	orrs	r3, r2
 80075e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80075e6:	4313      	orrs	r3, r2
 80075e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075ee:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	647b      	str	r3, [r7, #68]	; 0x44
 80075fc:	e02b      	b.n	8007656 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007604:	891b      	ldrh	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <find_volume+0x482>
 800760a:	230d      	movs	r3, #13
 800760c:	e0e3      	b.n	80077d6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	4413      	add	r3, r2
 800761a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800761c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007620:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007626:	2b02      	cmp	r3, #2
 8007628:	d105      	bne.n	8007636 <find_volume+0x4aa>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	e00e      	b.n	8007654 <find_volume+0x4c8>
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	4613      	mov	r3, r2
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	4413      	add	r3, r2
 8007644:	085a      	lsrs	r2, r3, #1
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007654:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007664:	895b      	ldrh	r3, [r3, #10]
 8007666:	4619      	mov	r1, r3
 8007668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766a:	440b      	add	r3, r1
 800766c:	3b01      	subs	r3, #1
 800766e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007670:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007674:	8949      	ldrh	r1, [r1, #10]
 8007676:	fbb3 f3f1 	udiv	r3, r3, r1
 800767a:	429a      	cmp	r2, r3
 800767c:	d201      	bcs.n	8007682 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800767e:	230d      	movs	r3, #13
 8007680:	e0a9      	b.n	80077d6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007688:	461a      	mov	r2, r3
 800768a:	f04f 33ff 	mov.w	r3, #4294967295
 800768e:	6113      	str	r3, [r2, #16]
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800769e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a6:	2280      	movs	r2, #128	; 0x80
 80076a8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80076aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d17a      	bne.n	80077a8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	b21a      	sxth	r2, r3
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076c2:	b21b      	sxth	r3, r3
 80076c4:	4313      	orrs	r3, r2
 80076c6:	b21b      	sxth	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d16d      	bne.n	80077a8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80076cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ce:	3301      	adds	r3, #1
 80076d0:	4619      	mov	r1, r3
 80076d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076d4:	f7fe fb5e 	bl	8005d94 <move_window>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d164      	bne.n	80077a8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e4:	2200      	movs	r2, #0
 80076e6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80076f8:	b21b      	sxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b21b      	sxth	r3, r3
 80076fe:	4a38      	ldr	r2, [pc, #224]	; (80077e0 <find_volume+0x654>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d151      	bne.n	80077a8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	78db      	ldrb	r3, [r3, #3]
 8007708:	061a      	lsls	r2, r3, #24
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	789b      	ldrb	r3, [r3, #2]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	4313      	orrs	r3, r2
 8007712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007714:	7852      	ldrb	r2, [r2, #1]
 8007716:	0212      	lsls	r2, r2, #8
 8007718:	4313      	orrs	r3, r2
 800771a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	4313      	orrs	r3, r2
 8007720:	4a30      	ldr	r2, [pc, #192]	; (80077e4 <find_volume+0x658>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d140      	bne.n	80077a8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800772c:	061a      	lsls	r2, r3, #24
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	4313      	orrs	r3, r2
 8007738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800773e:	0212      	lsls	r2, r2, #8
 8007740:	4313      	orrs	r3, r2
 8007742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007744:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007748:	4313      	orrs	r3, r2
 800774a:	4a27      	ldr	r2, [pc, #156]	; (80077e8 <find_volume+0x65c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d12b      	bne.n	80077a8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007756:	061a      	lsls	r2, r3, #24
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800775e:	041b      	lsls	r3, r3, #16
 8007760:	4313      	orrs	r3, r2
 8007762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007764:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007768:	0212      	lsls	r2, r2, #8
 800776a:	4313      	orrs	r3, r2
 800776c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800776e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007772:	4313      	orrs	r3, r2
 8007774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800777a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007782:	061a      	lsls	r2, r3, #24
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	4313      	orrs	r3, r2
 800778e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007790:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007794:	0212      	lsls	r2, r2, #8
 8007796:	4313      	orrs	r3, r2
 8007798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800779a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800779e:	4313      	orrs	r3, r2
 80077a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077a6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	461a      	mov	r2, r3
 80077b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077b4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80077b6:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <find_volume+0x660>)
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <find_volume+0x660>)
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <find_volume+0x660>)
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077cc:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80077ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077d0:	f7fe fa64 	bl	8005c9c <clear_lock>
#endif

	return FR_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3758      	adds	r7, #88	; 0x58
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	ffffaa55 	.word	0xffffaa55
 80077e4:	41615252 	.word	0x41615252
 80077e8:	61417272 	.word	0x61417272
 80077ec:	20001b40 	.word	0x20001b40

080077f0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02a      	beq.n	8007858 <validate+0x68>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d024      	beq.n	8007858 <validate+0x68>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <validate+0x68>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	88da      	ldrh	r2, [r3, #6]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d10e      	bne.n	8007858 <validate+0x68>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	4618      	mov	r0, r3
 800784a:	f7fd ffc1 	bl	80057d0 <disk_status>
 800784e:	4603      	mov	r3, r0
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007858:	2309      	movs	r3, #9
 800785a:	e000      	b.n	800785e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800787a:	f107 0310 	add.w	r3, r7, #16
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff fbd2 	bl	8007028 <get_ldnumber>
 8007884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da01      	bge.n	8007890 <f_mount+0x28>
 800788c:	230b      	movs	r3, #11
 800788e:	e02f      	b.n	80078f0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <f_mount+0x90>)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80078a0:	69b8      	ldr	r0, [r7, #24]
 80078a2:	f7fe f9fb 	bl	8005c9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d004      	beq.n	80078c0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	490d      	ldr	r1, [pc, #52]	; (80078f8 <f_mount+0x90>)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <f_mount+0x6e>
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d001      	beq.n	80078da <f_mount+0x72>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e00a      	b.n	80078f0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80078da:	f107 0108 	add.w	r1, r7, #8
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	2200      	movs	r2, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fc51 	bl	800718c <find_volume>
 80078ea:	4603      	mov	r3, r0
 80078ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20001b3c 	.word	0x20001b3c

080078fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800790a:	f843 0c44 	str.w	r0, [r3, #-68]
 800790e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007912:	f843 1c48 	str.w	r1, [r3, #-72]
 8007916:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800791a:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800791e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007922:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <f_open+0x32>
 800792a:	2309      	movs	r3, #9
 800792c:	e2e6      	b.n	8007efc <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 800792e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007932:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793a:	461a      	mov	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007944:	461a      	mov	r2, r3
 8007946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800794a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800794e:	f003 031f 	and.w	r3, r3, #31
 8007952:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007956:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800795a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	f107 0110 	add.w	r1, r7, #16
 8007968:	3908      	subs	r1, #8
 800796a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800796e:	3b10      	subs	r3, #16
 8007970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fc09 	bl	800718c <find_volume>
 800797a:	4603      	mov	r3, r0
 800797c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007980:	f102 020f 	add.w	r2, r2, #15
 8007984:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007986:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800798a:	f103 030f 	add.w	r3, r3, #15
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 82ae 	bne.w	8007ef2 <f_open+0x5f6>
		INIT_BUF(dj);
 8007996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800799a:	461a      	mov	r2, r3
 800799c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079a0:	3b1c      	subs	r3, #28
 80079a2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80079a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079aa:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80079ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079b2:	3b10      	subs	r3, #16
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fac0 	bl	8006f3c <follow_path>
 80079bc:	4603      	mov	r3, r0
 80079be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079c2:	f102 020f 	add.w	r2, r2, #15
 80079c6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80079c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079cc:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80079d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079d4:	f102 0208 	add.w	r2, r2, #8
 80079d8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079de:	f103 030f 	add.w	r3, r3, #15
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d126      	bne.n	8007a36 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 80079e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079ec:	f103 0308 	add.w	r3, r3, #8
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <f_open+0x108>
				res = FR_INVALID_NAME;
 80079f6:	2306      	movs	r3, #6
 80079f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079fc:	f102 020f 	add.w	r2, r2, #15
 8007a00:	7013      	strb	r3, [r2, #0]
 8007a02:	e018      	b.n	8007a36 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a08:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a20:	3b10      	subs	r3, #16
 8007a22:	4611      	mov	r1, r2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd ffe9 	bl	80059fc <chk_lock>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a30:	f102 020f 	add.w	r2, r2, #15
 8007a34:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a3a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007a3e:	f003 031c 	and.w	r3, r3, #28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8134 	beq.w	8007cb0 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8007a48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a4c:	f103 030f 	add.w	r3, r3, #15
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d02e      	beq.n	8007ab4 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007a56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a5a:	f103 030f 	add.w	r3, r3, #15
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d112      	bne.n	8007a8a <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a64:	f7fe f83a 	bl	8005adc <enq_lock>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <f_open+0x182>
 8007a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a72:	3b10      	subs	r3, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff f8ed 	bl	8006c54 <dir_register>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	e000      	b.n	8007a80 <f_open+0x184>
 8007a7e:	2312      	movs	r3, #18
 8007a80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a84:	f102 020f 	add.w	r2, r2, #15
 8007a88:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a94:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007a98:	f043 0308 	orr.w	r3, r3, #8
 8007a9c:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8007aa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007aa4:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8007aa8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aac:	f102 0208 	add.w	r2, r2, #8
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e01f      	b.n	8007af4 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ab4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ab8:	f103 0308 	add.w	r3, r3, #8
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330b      	adds	r3, #11
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 0311 	and.w	r3, r3, #17
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d006      	beq.n	8007ad8 <f_open+0x1dc>
					res = FR_DENIED;
 8007aca:	2307      	movs	r3, #7
 8007acc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ad0:	f102 020f 	add.w	r2, r2, #15
 8007ad4:	7013      	strb	r3, [r2, #0]
 8007ad6:	e00d      	b.n	8007af4 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007ad8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007adc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <f_open+0x1f8>
						res = FR_EXIST;
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aee:	f102 020f 	add.w	r2, r2, #15
 8007af2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007af4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007af8:	f103 030f 	add.w	r3, r3, #15
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 8108 	bne.w	8007d14 <f_open+0x418>
 8007b04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b08:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 80ff 	beq.w	8007d14 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8007b16:	f7fd fdf9 	bl	800570c <get_fattime>
 8007b1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b1e:	f103 0304 	add.w	r3, r3, #4
 8007b22:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007b24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b28:	f103 0308 	add.w	r3, r3, #8
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330e      	adds	r3, #14
 8007b30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b34:	f102 0204 	add.w	r2, r2, #4
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b42:	f103 0304 	add.w	r3, r3, #4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b52:	f103 0308 	add.w	r3, r3, #8
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330f      	adds	r3, #15
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b62:	f103 0304 	add.w	r3, r3, #4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	0c1a      	lsrs	r2, r3, #16
 8007b6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b6e:	f103 0308 	add.w	r3, r3, #8
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3310      	adds	r3, #16
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b7e:	f103 0304 	add.w	r3, r3, #4
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	0e1a      	lsrs	r2, r3, #24
 8007b86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b8a:	f103 0308 	add.w	r3, r3, #8
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3311      	adds	r3, #17
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007b96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b9a:	f103 0308 	add.w	r3, r3, #8
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	330b      	adds	r3, #11
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007ba6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007baa:	f103 0308 	add.w	r3, r3, #8
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	331c      	adds	r3, #28
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bba:	f103 0308 	add.w	r3, r3, #8
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	331d      	adds	r3, #29
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bca:	f103 0308 	add.w	r3, r3, #8
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	331e      	adds	r3, #30
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bda:	f103 0308 	add.w	r3, r3, #8
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	331f      	adds	r3, #31
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007be6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007bea:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007bee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bf2:	f102 0208 	add.w	r2, r2, #8
 8007bf6:	6811      	ldr	r1, [r2, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe ff1f 	bl	8006a3c <ld_clust>
 8007bfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c02:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007c04:	2100      	movs	r1, #0
 8007c06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c0a:	f103 0308 	add.w	r3, r3, #8
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	f7fe ff42 	bl	8006a98 <st_clust>
				dj.fs->wflag = 1;
 8007c14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c18:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	2201      	movs	r2, #1
 8007c22:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007c24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d072      	beq.n	8007d14 <f_open+0x418>
					dw = dj.fs->winsect;
 8007c2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c32:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c40:	f102 0204 	add.w	r2, r2, #4
 8007c44:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007c46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c4a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007c4e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c52:	6811      	ldr	r1, [r2, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fb42 	bl	80062de <remove_chain>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c60:	f102 020f 	add.w	r2, r2, #15
 8007c64:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007c66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c6a:	f103 030f 	add.w	r3, r3, #15
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d14f      	bne.n	8007d14 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c78:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8007c7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c88:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c8e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007c92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c96:	f102 0204 	add.w	r2, r2, #4
 8007c9a:	6811      	ldr	r1, [r2, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe f879 	bl	8005d94 <move_window>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ca8:	f102 020f 	add.w	r2, r2, #15
 8007cac:	7013      	strb	r3, [r2, #0]
 8007cae:	e031      	b.n	8007d14 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007cb0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cb4:	f103 030f 	add.w	r3, r3, #15
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d12a      	bne.n	8007d14 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007cbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cc2:	f103 0308 	add.w	r3, r3, #8
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	330b      	adds	r3, #11
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0310 	and.w	r3, r3, #16
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <f_open+0x3e6>
					res = FR_NO_FILE;
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cda:	f102 020f 	add.w	r2, r2, #15
 8007cde:	7013      	strb	r3, [r2, #0]
 8007ce0:	e018      	b.n	8007d14 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007ce2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ce6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d010      	beq.n	8007d14 <f_open+0x418>
 8007cf2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cf6:	f103 0308 	add.w	r3, r3, #8
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330b      	adds	r3, #11
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <f_open+0x418>
						res = FR_DENIED;
 8007d08:	2307      	movs	r3, #7
 8007d0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d0e:	f102 020f 	add.w	r2, r2, #15
 8007d12:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007d14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d18:	f103 030f 	add.w	r3, r3, #15
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d157      	bne.n	8007dd2 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d26:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <f_open+0x44c>
				mode |= FA__WRITTEN;
 8007d32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d36:	461a      	mov	r2, r3
 8007d38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d3c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007d40:	f043 0320 	orr.w	r3, r3, #32
 8007d44:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d4c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d5a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d62:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007d64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d68:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d70:	461a      	mov	r2, r3
 8007d72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d76:	f103 0308 	add.w	r3, r3, #8
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d82:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bf14      	ite	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	2300      	moveq	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d9a:	3b10      	subs	r3, #16
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fec0 	bl	8005b24 <inc_lock>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007daa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007db4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007db8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <f_open+0x4d6>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dcc:	f102 020f 	add.w	r2, r2, #15
 8007dd0:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007dd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dd6:	f103 030f 	add.w	r3, r3, #15
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 8088 	bne.w	8007ef2 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 8007de2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007de6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dee:	461a      	mov	r2, r3
 8007df0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007df4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007df8:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007dfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007dfe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	2200      	movs	r2, #0
 8007e08:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007e0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e0e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007e12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e16:	f102 0208 	add.w	r2, r2, #8
 8007e1a:	6811      	ldr	r1, [r2, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fe0d 	bl	8006a3c <ld_clust>
 8007e22:	4602      	mov	r2, r0
 8007e24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e28:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e30:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007e32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e36:	f103 0308 	add.w	r3, r3, #8
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	331f      	adds	r3, #31
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	061a      	lsls	r2, r3, #24
 8007e42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e46:	f103 0308 	add.w	r3, r3, #8
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	331e      	adds	r3, #30
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e58:	f102 0208 	add.w	r2, r2, #8
 8007e5c:	6812      	ldr	r2, [r2, #0]
 8007e5e:	321d      	adds	r2, #29
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	0212      	lsls	r2, r2, #8
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e6a:	f102 0208 	add.w	r2, r2, #8
 8007e6e:	6812      	ldr	r2, [r2, #0]
 8007e70:	321c      	adds	r2, #28
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e7a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007e7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e82:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e88:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e90:	461a      	mov	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007e96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007eac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007eba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ebe:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007ec2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ec6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ece:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007ed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ed4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee2:	88da      	ldrh	r2, [r3, #6]
 8007ee4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ee8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007ef2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ef6:	f103 030f 	add.w	r3, r3, #15
 8007efa:	781b      	ldrb	r3, [r3, #0]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fc65 	bl	80077f0 <validate>
 8007f26:	4603      	mov	r3, r0
 8007f28:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f2a:	7ffb      	ldrb	r3, [r7, #31]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <f_read+0x2c>
 8007f30:	7ffb      	ldrb	r3, [r7, #31]
 8007f32:	e1cd      	b.n	80082d0 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3a:	79db      	ldrb	r3, [r3, #7]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f46:	79db      	ldrb	r3, [r3, #7]
 8007f48:	e1c2      	b.n	80082d0 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f50:	799b      	ldrb	r3, [r3, #6]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007f5a:	2307      	movs	r3, #7
 8007f5c:	e1b8      	b.n	80082d0 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	f240 81a5 	bls.w	80082c6 <f_read+0x3be>
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f80:	e1a1      	b.n	80082c6 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f96:	8952      	ldrh	r2, [r2, #10]
 8007f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f9c:	fb01 f202 	mul.w	r2, r1, r2
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 8140 	bne.w	8008228 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fbc:	8952      	ldrh	r2, [r2, #10]
 8007fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	789b      	ldrb	r3, [r3, #2]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d143      	bne.n	8008068 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff6:	e01c      	b.n	8008032 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	4619      	mov	r1, r3
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7fe fa6e 	bl	80064f0 <clmt_clust>
 8008014:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008016:	e00c      	b.n	8008032 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fd ff08 	bl	8005e40 <get_fat>
 8008030:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d806      	bhi.n	8008046 <f_read+0x13e>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803e:	2202      	movs	r2, #2
 8008040:	71da      	strb	r2, [r3, #7]
 8008042:	2302      	movs	r3, #2
 8008044:	e144      	b.n	80082d0 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d106      	bne.n	800805c <f_read+0x154>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008054:	2201      	movs	r2, #1
 8008056:	71da      	strb	r2, [r3, #7]
 8008058:	2301      	movs	r3, #1
 800805a:	e139      	b.n	80082d0 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008062:	461a      	mov	r2, r3
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fd febc 	bl	8005df8 <clust2sect>
 8008080:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <f_read+0x18e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808e:	2202      	movs	r2, #2
 8008090:	71da      	strb	r2, [r3, #7]
 8008092:	2302      	movs	r3, #2
 8008094:	e11c      	b.n	80082d0 <f_read+0x3c8>
			sect += csect;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4413      	add	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080aa:	895b      	ldrh	r3, [r3, #10]
 80080ac:	461a      	mov	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d066      	beq.n	800818a <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80080bc:	7dfa      	ldrb	r2, [r7, #23]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	4413      	add	r3, r2
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080ce:	7892      	ldrb	r2, [r2, #2]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d90a      	bls.n	80080ea <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e0:	789b      	ldrb	r3, [r3, #2]
 80080e2:	461a      	mov	r2, r3
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f6:	7858      	ldrb	r0, [r3, #1]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	6a39      	ldr	r1, [r7, #32]
 80080fe:	f7fd fba7 	bl	8005850 <disk_read>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810e:	2201      	movs	r2, #1
 8008110:	71da      	strb	r2, [r3, #7]
 8008112:	2301      	movs	r3, #1
 8008114:	e0dc      	b.n	80082d0 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811c:	799b      	ldrb	r3, [r3, #6]
 800811e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d024      	beq.n	8008170 <f_read+0x268>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008134:	429a      	cmp	r2, r3
 8008136:	d91b      	bls.n	8008170 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008150:	8952      	ldrh	r2, [r2, #10]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	18d0      	adds	r0, r2, r3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	461a      	mov	r2, r3
 800816c:	f7fd fbce 	bl	800590c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817c:	895b      	ldrh	r3, [r3, #10]
 800817e:	461a      	mov	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8008188:	e085      	b.n	8008296 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d041      	beq.n	800821c <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819e:	799b      	ldrb	r3, [r3, #6]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d023      	beq.n	80081f0 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	7858      	ldrb	r0, [r3, #1]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	2301      	movs	r3, #1
 80081c2:	f7fd fb65 	bl	8005890 <disk_write>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d2:	2201      	movs	r2, #1
 80081d4:	71da      	strb	r2, [r3, #7]
 80081d6:	2301      	movs	r3, #1
 80081d8:	e07a      	b.n	80082d0 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e0:	799b      	ldrb	r3, [r3, #6]
 80081e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	7858      	ldrb	r0, [r3, #1]
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	2301      	movs	r3, #1
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	f7fd fb24 	bl	8005850 <disk_read>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008214:	2201      	movs	r2, #1
 8008216:	71da      	strb	r2, [r3, #7]
 8008218:	2301      	movs	r3, #1
 800821a:	e059      	b.n	80082d0 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008222:	461a      	mov	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	895b      	ldrh	r3, [r3, #10]
 8008236:	4618      	mov	r0, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800824c:	8952      	ldrh	r2, [r2, #10]
 800824e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008252:	fb01 f202 	mul.w	r2, r1, r2
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	1ac3      	subs	r3, r0, r3
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800825c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d901      	bls.n	8008268 <f_read+0x360>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800827c:	8952      	ldrh	r2, [r2, #10]
 800827e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008282:	fb01 f202 	mul.w	r2, r1, r2
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828e:	4619      	mov	r1, r3
 8008290:	6a38      	ldr	r0, [r7, #32]
 8008292:	f7fd fb3b 	bl	800590c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	4413      	add	r3, r2
 800829c:	623b      	str	r3, [r7, #32]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	4413      	add	r3, r2
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082b0:	6093      	str	r3, [r2, #8]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	441a      	add	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f47f ae5a 	bne.w	8007f82 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3730      	adds	r7, #48	; 0x30
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <f_opendir+0x14>
 80082e8:	2309      	movs	r3, #9
 80082ea:	e083      	b.n	80083f4 <f_opendir+0x11c>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80082ec:	4639      	mov	r1, r7
 80082ee:	f107 0318 	add.w	r3, r7, #24
 80082f2:	2200      	movs	r2, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe ff49 	bl	800718c <find_volume>
 80082fa:	4603      	mov	r3, r0
 80082fc:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80082fe:	7ffb      	ldrb	r3, [r7, #31]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d16d      	bne.n	80083e0 <f_opendir+0x108>
		dp->fs = fs;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800830c:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008314:	461a      	mov	r2, r3
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	6193      	str	r3, [r2, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fe fe0b 	bl	8006f3c <follow_path>
 8008326:	4603      	mov	r3, r0
 8008328:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800832a:	7ffb      	ldrb	r3, [r7, #31]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d152      	bne.n	80083d6 <f_opendir+0xfe>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01a      	beq.n	8008372 <f_opendir+0x9a>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	330b      	adds	r3, #11
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <f_opendir+0x96>
					dp->sclust = ld_clust(fs, dp->dir);
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7fe fb6d 	bl	8006a3c <ld_clust>
 8008362:	4602      	mov	r2, r0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	e001      	b.n	8008372 <f_opendir+0x9a>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800836e:	2305      	movs	r3, #5
 8008370:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d12e      	bne.n	80083d6 <f_opendir+0xfe>
				dp->id = fs->id;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	88da      	ldrh	r2, [r3, #6]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe f8f0 	bl	8006570 <dir_sdi>
 8008390:	4603      	mov	r3, r0
 8008392:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8008394:	7ffb      	ldrb	r3, [r7, #31]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11d      	bne.n	80083d6 <f_opendir+0xfe>
					if (dp->sclust) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d011      	beq.n	80083ca <f_opendir+0xf2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fd fbbb 	bl	8005b24 <inc_lock>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b6:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <f_opendir+0xfe>
							res = FR_TOO_MANY_OPEN_FILES;
 80083c4:	2312      	movs	r3, #18
 80083c6:	77fb      	strb	r3, [r7, #31]
 80083c8:	e005      	b.n	80083d6 <f_opendir+0xfe>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d0:	461a      	mov	r2, r3
 80083d2:	2300      	movs	r3, #0
 80083d4:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80083d6:	7ffb      	ldrb	r3, [r7, #31]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d101      	bne.n	80083e0 <f_opendir+0x108>
 80083dc:	2305      	movs	r3, #5
 80083de:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80083e0:	7ffb      	ldrb	r3, [r7, #31]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <f_opendir+0x11a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ec:	461a      	mov	r2, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 80083f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff f9f2 	bl	80077f0 <validate>
 800840c:	4603      	mov	r3, r0
 800840e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d139      	bne.n	800848a <f_readdir+0x8e>
		if (!fno) {
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800841c:	2100      	movs	r1, #0
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fe f8a6 	bl	8006570 <dir_sdi>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	e02f      	b.n	800848a <f_readdir+0x8e>
		} else {
			INIT_BUF(*dp);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008430:	461a      	mov	r2, r3
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	6193      	str	r3, [r2, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe fba5 	bl	8006b8a <dir_read>
 8008440:	4603      	mov	r3, r0
 8008442:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d107      	bne.n	800845a <f_readdir+0x5e>
				dp->sect = 0;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	461a      	mov	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d114      	bne.n	800848a <f_readdir+0x8e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fe fc36 	bl	8006cd4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008468:	2100      	movs	r1, #0
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fe f94e 	bl	800670c <dir_next>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	2b04      	cmp	r3, #4
 8008478:	d107      	bne.n	800848a <f_readdir+0x8e>
					dp->sect = 0;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80084aa:	4b1e      	ldr	r3, [pc, #120]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084ac:	7a5b      	ldrb	r3, [r3, #9]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d831      	bhi.n	8008518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084b6:	7a5b      	ldrb	r3, [r3, #9]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	461a      	mov	r2, r3
 80084bc:	4b19      	ldr	r3, [pc, #100]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084be:	2100      	movs	r1, #0
 80084c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084c4:	7a5b      	ldrb	r3, [r3, #9]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	4a16      	ldr	r2, [pc, #88]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80084d2:	4b14      	ldr	r3, [pc, #80]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084d4:	7a5b      	ldrb	r3, [r3, #9]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	4b12      	ldr	r3, [pc, #72]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084dc:	4413      	add	r3, r2
 80084de:	79fa      	ldrb	r2, [r7, #7]
 80084e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084e4:	7a5b      	ldrb	r3, [r3, #9]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	b2d1      	uxtb	r1, r2
 80084ec:	4a0d      	ldr	r2, [pc, #52]	; (8008524 <FATFS_LinkDriverEx+0x90>)
 80084ee:	7251      	strb	r1, [r2, #9]
 80084f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084f2:	7dbb      	ldrb	r3, [r7, #22]
 80084f4:	3330      	adds	r3, #48	; 0x30
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3301      	adds	r3, #1
 8008500:	223a      	movs	r2, #58	; 0x3a
 8008502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3302      	adds	r3, #2
 8008508:	222f      	movs	r2, #47	; 0x2f
 800850a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3303      	adds	r3, #3
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr
 8008524:	20001b5c 	.word	0x20001b5c

08008528 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008532:	2200      	movs	r2, #0
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ffac 	bl	8008494 <FATFS_LinkDriverEx>
 800853c:	4603      	mov	r3, r0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <__errno>:
 8008548:	4b01      	ldr	r3, [pc, #4]	; (8008550 <__errno+0x8>)
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000024 	.word	0x20000024

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	2600      	movs	r6, #0
 8008558:	4d0c      	ldr	r5, [pc, #48]	; (800858c <__libc_init_array+0x38>)
 800855a:	4c0d      	ldr	r4, [pc, #52]	; (8008590 <__libc_init_array+0x3c>)
 800855c:	1b64      	subs	r4, r4, r5
 800855e:	10a4      	asrs	r4, r4, #2
 8008560:	42a6      	cmp	r6, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	f000 fc9c 	bl	8008ea0 <_init>
 8008568:	2600      	movs	r6, #0
 800856a:	4d0a      	ldr	r5, [pc, #40]	; (8008594 <__libc_init_array+0x40>)
 800856c:	4c0a      	ldr	r4, [pc, #40]	; (8008598 <__libc_init_array+0x44>)
 800856e:	1b64      	subs	r4, r4, r5
 8008570:	10a4      	asrs	r4, r4, #2
 8008572:	42a6      	cmp	r6, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f855 3b04 	ldr.w	r3, [r5], #4
 800857c:	4798      	blx	r3
 800857e:	3601      	adds	r6, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f855 3b04 	ldr.w	r3, [r5], #4
 8008586:	4798      	blx	r3
 8008588:	3601      	adds	r6, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	08009684 	.word	0x08009684
 8008590:	08009684 	.word	0x08009684
 8008594:	08009684 	.word	0x08009684
 8008598:	08009688 	.word	0x08009688

0800859c <memset>:
 800859c:	4603      	mov	r3, r0
 800859e:	4402      	add	r2, r0
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d100      	bne.n	80085a6 <memset+0xa>
 80085a4:	4770      	bx	lr
 80085a6:	f803 1b01 	strb.w	r1, [r3], #1
 80085aa:	e7f9      	b.n	80085a0 <memset+0x4>

080085ac <siprintf>:
 80085ac:	b40e      	push	{r1, r2, r3}
 80085ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085b2:	b500      	push	{lr}
 80085b4:	b09c      	sub	sp, #112	; 0x70
 80085b6:	ab1d      	add	r3, sp, #116	; 0x74
 80085b8:	9002      	str	r0, [sp, #8]
 80085ba:	9006      	str	r0, [sp, #24]
 80085bc:	9107      	str	r1, [sp, #28]
 80085be:	9104      	str	r1, [sp, #16]
 80085c0:	4808      	ldr	r0, [pc, #32]	; (80085e4 <siprintf+0x38>)
 80085c2:	4909      	ldr	r1, [pc, #36]	; (80085e8 <siprintf+0x3c>)
 80085c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c8:	9105      	str	r1, [sp, #20]
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	a902      	add	r1, sp, #8
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	f000 f868 	bl	80086a4 <_svfiprintf_r>
 80085d4:	2200      	movs	r2, #0
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	b01c      	add	sp, #112	; 0x70
 80085dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e0:	b003      	add	sp, #12
 80085e2:	4770      	bx	lr
 80085e4:	20000024 	.word	0x20000024
 80085e8:	ffff0208 	.word	0xffff0208

080085ec <__ssputs_r>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	688e      	ldr	r6, [r1, #8]
 80085f2:	4682      	mov	sl, r0
 80085f4:	429e      	cmp	r6, r3
 80085f6:	460c      	mov	r4, r1
 80085f8:	4690      	mov	r8, r2
 80085fa:	461f      	mov	r7, r3
 80085fc:	d838      	bhi.n	8008670 <__ssputs_r+0x84>
 80085fe:	898a      	ldrh	r2, [r1, #12]
 8008600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008604:	d032      	beq.n	800866c <__ssputs_r+0x80>
 8008606:	6825      	ldr	r5, [r4, #0]
 8008608:	6909      	ldr	r1, [r1, #16]
 800860a:	3301      	adds	r3, #1
 800860c:	eba5 0901 	sub.w	r9, r5, r1
 8008610:	6965      	ldr	r5, [r4, #20]
 8008612:	444b      	add	r3, r9
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800861c:	106d      	asrs	r5, r5, #1
 800861e:	429d      	cmp	r5, r3
 8008620:	bf38      	it	cc
 8008622:	461d      	movcc	r5, r3
 8008624:	0553      	lsls	r3, r2, #21
 8008626:	d531      	bpl.n	800868c <__ssputs_r+0xa0>
 8008628:	4629      	mov	r1, r5
 800862a:	f000 fb6f 	bl	8008d0c <_malloc_r>
 800862e:	4606      	mov	r6, r0
 8008630:	b950      	cbnz	r0, 8008648 <__ssputs_r+0x5c>
 8008632:	230c      	movs	r3, #12
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	464a      	mov	r2, r9
 800864a:	6921      	ldr	r1, [r4, #16]
 800864c:	f000 face 	bl	8008bec <memcpy>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	6126      	str	r6, [r4, #16]
 800865e:	444e      	add	r6, r9
 8008660:	6026      	str	r6, [r4, #0]
 8008662:	463e      	mov	r6, r7
 8008664:	6165      	str	r5, [r4, #20]
 8008666:	eba5 0509 	sub.w	r5, r5, r9
 800866a:	60a5      	str	r5, [r4, #8]
 800866c:	42be      	cmp	r6, r7
 800866e:	d900      	bls.n	8008672 <__ssputs_r+0x86>
 8008670:	463e      	mov	r6, r7
 8008672:	4632      	mov	r2, r6
 8008674:	4641      	mov	r1, r8
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	f000 fac6 	bl	8008c08 <memmove>
 800867c:	68a3      	ldr	r3, [r4, #8]
 800867e:	2000      	movs	r0, #0
 8008680:	1b9b      	subs	r3, r3, r6
 8008682:	60a3      	str	r3, [r4, #8]
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	4433      	add	r3, r6
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	e7db      	b.n	8008644 <__ssputs_r+0x58>
 800868c:	462a      	mov	r2, r5
 800868e:	f000 fbb1 	bl	8008df4 <_realloc_r>
 8008692:	4606      	mov	r6, r0
 8008694:	2800      	cmp	r0, #0
 8008696:	d1e1      	bne.n	800865c <__ssputs_r+0x70>
 8008698:	4650      	mov	r0, sl
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	f000 face 	bl	8008c3c <_free_r>
 80086a0:	e7c7      	b.n	8008632 <__ssputs_r+0x46>
	...

080086a4 <_svfiprintf_r>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	4698      	mov	r8, r3
 80086aa:	898b      	ldrh	r3, [r1, #12]
 80086ac:	4607      	mov	r7, r0
 80086ae:	061b      	lsls	r3, r3, #24
 80086b0:	460d      	mov	r5, r1
 80086b2:	4614      	mov	r4, r2
 80086b4:	b09d      	sub	sp, #116	; 0x74
 80086b6:	d50e      	bpl.n	80086d6 <_svfiprintf_r+0x32>
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	b963      	cbnz	r3, 80086d6 <_svfiprintf_r+0x32>
 80086bc:	2140      	movs	r1, #64	; 0x40
 80086be:	f000 fb25 	bl	8008d0c <_malloc_r>
 80086c2:	6028      	str	r0, [r5, #0]
 80086c4:	6128      	str	r0, [r5, #16]
 80086c6:	b920      	cbnz	r0, 80086d2 <_svfiprintf_r+0x2e>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e0d1      	b.n	8008876 <_svfiprintf_r+0x1d2>
 80086d2:	2340      	movs	r3, #64	; 0x40
 80086d4:	616b      	str	r3, [r5, #20]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9309      	str	r3, [sp, #36]	; 0x24
 80086da:	2320      	movs	r3, #32
 80086dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e0:	2330      	movs	r3, #48	; 0x30
 80086e2:	f04f 0901 	mov.w	r9, #1
 80086e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008890 <_svfiprintf_r+0x1ec>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f2:	4623      	mov	r3, r4
 80086f4:	469a      	mov	sl, r3
 80086f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fa:	b10a      	cbz	r2, 8008700 <_svfiprintf_r+0x5c>
 80086fc:	2a25      	cmp	r2, #37	; 0x25
 80086fe:	d1f9      	bne.n	80086f4 <_svfiprintf_r+0x50>
 8008700:	ebba 0b04 	subs.w	fp, sl, r4
 8008704:	d00b      	beq.n	800871e <_svfiprintf_r+0x7a>
 8008706:	465b      	mov	r3, fp
 8008708:	4622      	mov	r2, r4
 800870a:	4629      	mov	r1, r5
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff ff6d 	bl	80085ec <__ssputs_r>
 8008712:	3001      	adds	r0, #1
 8008714:	f000 80aa 	beq.w	800886c <_svfiprintf_r+0x1c8>
 8008718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871a:	445a      	add	r2, fp
 800871c:	9209      	str	r2, [sp, #36]	; 0x24
 800871e:	f89a 3000 	ldrb.w	r3, [sl]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 80a2 	beq.w	800886c <_svfiprintf_r+0x1c8>
 8008728:	2300      	movs	r3, #0
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008732:	f10a 0a01 	add.w	sl, sl, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9307      	str	r3, [sp, #28]
 800873a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800873e:	931a      	str	r3, [sp, #104]	; 0x68
 8008740:	4654      	mov	r4, sl
 8008742:	2205      	movs	r2, #5
 8008744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008748:	4851      	ldr	r0, [pc, #324]	; (8008890 <_svfiprintf_r+0x1ec>)
 800874a:	f000 fa41 	bl	8008bd0 <memchr>
 800874e:	9a04      	ldr	r2, [sp, #16]
 8008750:	b9d8      	cbnz	r0, 800878a <_svfiprintf_r+0xe6>
 8008752:	06d0      	lsls	r0, r2, #27
 8008754:	bf44      	itt	mi
 8008756:	2320      	movmi	r3, #32
 8008758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800875c:	0711      	lsls	r1, r2, #28
 800875e:	bf44      	itt	mi
 8008760:	232b      	movmi	r3, #43	; 0x2b
 8008762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008766:	f89a 3000 	ldrb.w	r3, [sl]
 800876a:	2b2a      	cmp	r3, #42	; 0x2a
 800876c:	d015      	beq.n	800879a <_svfiprintf_r+0xf6>
 800876e:	4654      	mov	r4, sl
 8008770:	2000      	movs	r0, #0
 8008772:	f04f 0c0a 	mov.w	ip, #10
 8008776:	9a07      	ldr	r2, [sp, #28]
 8008778:	4621      	mov	r1, r4
 800877a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877e:	3b30      	subs	r3, #48	; 0x30
 8008780:	2b09      	cmp	r3, #9
 8008782:	d94e      	bls.n	8008822 <_svfiprintf_r+0x17e>
 8008784:	b1b0      	cbz	r0, 80087b4 <_svfiprintf_r+0x110>
 8008786:	9207      	str	r2, [sp, #28]
 8008788:	e014      	b.n	80087b4 <_svfiprintf_r+0x110>
 800878a:	eba0 0308 	sub.w	r3, r0, r8
 800878e:	fa09 f303 	lsl.w	r3, r9, r3
 8008792:	4313      	orrs	r3, r2
 8008794:	46a2      	mov	sl, r4
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	e7d2      	b.n	8008740 <_svfiprintf_r+0x9c>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	1d19      	adds	r1, r3, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	9103      	str	r1, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfbb      	ittet	lt
 80087a6:	425b      	neglt	r3, r3
 80087a8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ac:	9307      	strge	r3, [sp, #28]
 80087ae:	9307      	strlt	r3, [sp, #28]
 80087b0:	bfb8      	it	lt
 80087b2:	9204      	strlt	r2, [sp, #16]
 80087b4:	7823      	ldrb	r3, [r4, #0]
 80087b6:	2b2e      	cmp	r3, #46	; 0x2e
 80087b8:	d10c      	bne.n	80087d4 <_svfiprintf_r+0x130>
 80087ba:	7863      	ldrb	r3, [r4, #1]
 80087bc:	2b2a      	cmp	r3, #42	; 0x2a
 80087be:	d135      	bne.n	800882c <_svfiprintf_r+0x188>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	3402      	adds	r4, #2
 80087c4:	1d1a      	adds	r2, r3, #4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	9203      	str	r2, [sp, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfb8      	it	lt
 80087ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008894 <_svfiprintf_r+0x1f0>
 80087d8:	2203      	movs	r2, #3
 80087da:	4650      	mov	r0, sl
 80087dc:	7821      	ldrb	r1, [r4, #0]
 80087de:	f000 f9f7 	bl	8008bd0 <memchr>
 80087e2:	b140      	cbz	r0, 80087f6 <_svfiprintf_r+0x152>
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	eba0 000a 	sub.w	r0, r0, sl
 80087ea:	fa03 f000 	lsl.w	r0, r3, r0
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	3401      	adds	r4, #1
 80087f2:	4303      	orrs	r3, r0
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fa:	2206      	movs	r2, #6
 80087fc:	4826      	ldr	r0, [pc, #152]	; (8008898 <_svfiprintf_r+0x1f4>)
 80087fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008802:	f000 f9e5 	bl	8008bd0 <memchr>
 8008806:	2800      	cmp	r0, #0
 8008808:	d038      	beq.n	800887c <_svfiprintf_r+0x1d8>
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <_svfiprintf_r+0x1f8>)
 800880c:	bb1b      	cbnz	r3, 8008856 <_svfiprintf_r+0x1b2>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	3308      	adds	r3, #8
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881c:	4433      	add	r3, r6
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	e767      	b.n	80086f2 <_svfiprintf_r+0x4e>
 8008822:	460c      	mov	r4, r1
 8008824:	2001      	movs	r0, #1
 8008826:	fb0c 3202 	mla	r2, ip, r2, r3
 800882a:	e7a5      	b.n	8008778 <_svfiprintf_r+0xd4>
 800882c:	2300      	movs	r3, #0
 800882e:	f04f 0c0a 	mov.w	ip, #10
 8008832:	4619      	mov	r1, r3
 8008834:	3401      	adds	r4, #1
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	4620      	mov	r0, r4
 800883a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883e:	3a30      	subs	r2, #48	; 0x30
 8008840:	2a09      	cmp	r2, #9
 8008842:	d903      	bls.n	800884c <_svfiprintf_r+0x1a8>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0c5      	beq.n	80087d4 <_svfiprintf_r+0x130>
 8008848:	9105      	str	r1, [sp, #20]
 800884a:	e7c3      	b.n	80087d4 <_svfiprintf_r+0x130>
 800884c:	4604      	mov	r4, r0
 800884e:	2301      	movs	r3, #1
 8008850:	fb0c 2101 	mla	r1, ip, r1, r2
 8008854:	e7f0      	b.n	8008838 <_svfiprintf_r+0x194>
 8008856:	ab03      	add	r3, sp, #12
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4638      	mov	r0, r7
 800885e:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <_svfiprintf_r+0x1fc>)
 8008860:	a904      	add	r1, sp, #16
 8008862:	f3af 8000 	nop.w
 8008866:	1c42      	adds	r2, r0, #1
 8008868:	4606      	mov	r6, r0
 800886a:	d1d6      	bne.n	800881a <_svfiprintf_r+0x176>
 800886c:	89ab      	ldrh	r3, [r5, #12]
 800886e:	065b      	lsls	r3, r3, #25
 8008870:	f53f af2c 	bmi.w	80086cc <_svfiprintf_r+0x28>
 8008874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008876:	b01d      	add	sp, #116	; 0x74
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	ab03      	add	r3, sp, #12
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	462a      	mov	r2, r5
 8008882:	4638      	mov	r0, r7
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <_svfiprintf_r+0x1fc>)
 8008886:	a904      	add	r1, sp, #16
 8008888:	f000 f87c 	bl	8008984 <_printf_i>
 800888c:	e7eb      	b.n	8008866 <_svfiprintf_r+0x1c2>
 800888e:	bf00      	nop
 8008890:	08009650 	.word	0x08009650
 8008894:	08009656 	.word	0x08009656
 8008898:	0800965a 	.word	0x0800965a
 800889c:	00000000 	.word	0x00000000
 80088a0:	080085ed 	.word	0x080085ed

080088a4 <_printf_common>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	4616      	mov	r6, r2
 80088aa:	4699      	mov	r9, r3
 80088ac:	688a      	ldr	r2, [r1, #8]
 80088ae:	690b      	ldr	r3, [r1, #16]
 80088b0:	4607      	mov	r7, r0
 80088b2:	4293      	cmp	r3, r2
 80088b4:	bfb8      	it	lt
 80088b6:	4613      	movlt	r3, r2
 80088b8:	6033      	str	r3, [r6, #0]
 80088ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088be:	460c      	mov	r4, r1
 80088c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088c4:	b10a      	cbz	r2, 80088ca <_printf_common+0x26>
 80088c6:	3301      	adds	r3, #1
 80088c8:	6033      	str	r3, [r6, #0]
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	0699      	lsls	r1, r3, #26
 80088ce:	bf42      	ittt	mi
 80088d0:	6833      	ldrmi	r3, [r6, #0]
 80088d2:	3302      	addmi	r3, #2
 80088d4:	6033      	strmi	r3, [r6, #0]
 80088d6:	6825      	ldr	r5, [r4, #0]
 80088d8:	f015 0506 	ands.w	r5, r5, #6
 80088dc:	d106      	bne.n	80088ec <_printf_common+0x48>
 80088de:	f104 0a19 	add.w	sl, r4, #25
 80088e2:	68e3      	ldr	r3, [r4, #12]
 80088e4:	6832      	ldr	r2, [r6, #0]
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	dc28      	bgt.n	800893e <_printf_common+0x9a>
 80088ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f0:	1e13      	subs	r3, r2, #0
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	bf18      	it	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	0692      	lsls	r2, r2, #26
 80088fa:	d42d      	bmi.n	8008958 <_printf_common+0xb4>
 80088fc:	4649      	mov	r1, r9
 80088fe:	4638      	mov	r0, r7
 8008900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008904:	47c0      	blx	r8
 8008906:	3001      	adds	r0, #1
 8008908:	d020      	beq.n	800894c <_printf_common+0xa8>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	68e5      	ldr	r5, [r4, #12]
 800890e:	f003 0306 	and.w	r3, r3, #6
 8008912:	2b04      	cmp	r3, #4
 8008914:	bf18      	it	ne
 8008916:	2500      	movne	r5, #0
 8008918:	6832      	ldr	r2, [r6, #0]
 800891a:	f04f 0600 	mov.w	r6, #0
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	bf08      	it	eq
 8008922:	1aad      	subeq	r5, r5, r2
 8008924:	6922      	ldr	r2, [r4, #16]
 8008926:	bf08      	it	eq
 8008928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800892c:	4293      	cmp	r3, r2
 800892e:	bfc4      	itt	gt
 8008930:	1a9b      	subgt	r3, r3, r2
 8008932:	18ed      	addgt	r5, r5, r3
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xcc>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xac>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4649      	mov	r1, r9
 8008944:	4638      	mov	r0, r7
 8008946:	47c0      	blx	r8
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xb0>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c4      	b.n	80088e2 <_printf_common+0x3e>
 8008958:	2030      	movs	r0, #48	; 0x30
 800895a:	18e1      	adds	r1, r4, r3
 800895c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008966:	4422      	add	r2, r4
 8008968:	3302      	adds	r3, #2
 800896a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800896e:	e7c5      	b.n	80088fc <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa8>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x92>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	4691      	mov	r9, r2
 800898c:	2f78      	cmp	r7, #120	; 0x78
 800898e:	4680      	mov	r8, r0
 8008990:	460c      	mov	r4, r1
 8008992:	469a      	mov	sl, r3
 8008994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	; 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d9 	beq.w	8008b58 <_printf_i+0x1d4>
 80089a6:	2f58      	cmp	r7, #88	; 0x58
 80089a8:	f000 80a4 	beq.w	8008af4 <_printf_i+0x170>
 80089ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	; (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b3f 	.word	0x08008b3f
 80089f4:	08008a61 	.word	0x08008a61
 80089f8:	08008b21 	.word	0x08008b21
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b61 	.word	0x08008b61
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008b29 	.word	0x08008b29
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	602a      	str	r2, [r5, #0]
 8008a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0a4      	b.n	8008b7a <_printf_i+0x1f6>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	6829      	ldr	r1, [r5, #0]
 8008a34:	0606      	lsls	r6, r0, #24
 8008a36:	f101 0304 	add.w	r3, r1, #4
 8008a3a:	d50a      	bpl.n	8008a52 <_printf_i+0xce>
 8008a3c:	680e      	ldr	r6, [r1, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	da03      	bge.n	8008a4c <_printf_i+0xc8>
 8008a44:	232d      	movs	r3, #45	; 0x2d
 8008a46:	4276      	negs	r6, r6
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4c:	230a      	movs	r3, #10
 8008a4e:	485e      	ldr	r0, [pc, #376]	; (8008bc8 <_printf_i+0x244>)
 8008a50:	e019      	b.n	8008a86 <_printf_i+0x102>
 8008a52:	680e      	ldr	r6, [r1, #0]
 8008a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	bf18      	it	ne
 8008a5c:	b236      	sxthne	r6, r6
 8008a5e:	e7ef      	b.n	8008a40 <_printf_i+0xbc>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6029      	str	r1, [r5, #0]
 8008a68:	0601      	lsls	r1, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xec>
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	e002      	b.n	8008a76 <_printf_i+0xf2>
 8008a70:	0646      	lsls	r6, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xe8>
 8008a74:	881e      	ldrh	r6, [r3, #0]
 8008a76:	2f6f      	cmp	r7, #111	; 0x6f
 8008a78:	bf0c      	ite	eq
 8008a7a:	2308      	moveq	r3, #8
 8008a7c:	230a      	movne	r3, #10
 8008a7e:	4852      	ldr	r0, [pc, #328]	; (8008bc8 <_printf_i+0x244>)
 8008a80:	2100      	movs	r1, #0
 8008a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a86:	6865      	ldr	r5, [r4, #4]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	bfa8      	it	ge
 8008a8c:	6821      	ldrge	r1, [r4, #0]
 8008a8e:	60a5      	str	r5, [r4, #8]
 8008a90:	bfa4      	itt	ge
 8008a92:	f021 0104 	bicge.w	r1, r1, #4
 8008a96:	6021      	strge	r1, [r4, #0]
 8008a98:	b90e      	cbnz	r6, 8008a9e <_printf_i+0x11a>
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	d04d      	beq.n	8008b3a <_printf_i+0x1b6>
 8008a9e:	4615      	mov	r5, r2
 8008aa0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008aa4:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa8:	5dc7      	ldrb	r7, [r0, r7]
 8008aaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aae:	4637      	mov	r7, r6
 8008ab0:	42bb      	cmp	r3, r7
 8008ab2:	460e      	mov	r6, r1
 8008ab4:	d9f4      	bls.n	8008aa0 <_printf_i+0x11c>
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d10b      	bne.n	8008ad2 <_printf_i+0x14e>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	07de      	lsls	r6, r3, #31
 8008abe:	d508      	bpl.n	8008ad2 <_printf_i+0x14e>
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	6861      	ldr	r1, [r4, #4]
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	bfde      	ittt	le
 8008ac8:	2330      	movle	r3, #48	; 0x30
 8008aca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ace:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ad2:	1b52      	subs	r2, r2, r5
 8008ad4:	6122      	str	r2, [r4, #16]
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4640      	mov	r0, r8
 8008adc:	f8cd a000 	str.w	sl, [sp]
 8008ae0:	aa03      	add	r2, sp, #12
 8008ae2:	f7ff fedf 	bl	80088a4 <_printf_common>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d14c      	bne.n	8008b84 <_printf_i+0x200>
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	b004      	add	sp, #16
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	4834      	ldr	r0, [pc, #208]	; (8008bc8 <_printf_i+0x244>)
 8008af6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008afa:	6829      	ldr	r1, [r5, #0]
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b02:	6029      	str	r1, [r5, #0]
 8008b04:	061d      	lsls	r5, r3, #24
 8008b06:	d514      	bpl.n	8008b32 <_printf_i+0x1ae>
 8008b08:	07df      	lsls	r7, r3, #31
 8008b0a:	bf44      	itt	mi
 8008b0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008b10:	6023      	strmi	r3, [r4, #0]
 8008b12:	b91e      	cbnz	r6, 8008b1c <_printf_i+0x198>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	f023 0320 	bic.w	r3, r3, #32
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	e7af      	b.n	8008a80 <_printf_i+0xfc>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f043 0320 	orr.w	r3, r3, #32
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	2378      	movs	r3, #120	; 0x78
 8008b2a:	4828      	ldr	r0, [pc, #160]	; (8008bcc <_printf_i+0x248>)
 8008b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b30:	e7e3      	b.n	8008afa <_printf_i+0x176>
 8008b32:	0659      	lsls	r1, r3, #25
 8008b34:	bf48      	it	mi
 8008b36:	b2b6      	uxthmi	r6, r6
 8008b38:	e7e6      	b.n	8008b08 <_printf_i+0x184>
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	e7bb      	b.n	8008ab6 <_printf_i+0x132>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	6826      	ldr	r6, [r4, #0]
 8008b42:	1d18      	adds	r0, r3, #4
 8008b44:	6961      	ldr	r1, [r4, #20]
 8008b46:	6028      	str	r0, [r5, #0]
 8008b48:	0635      	lsls	r5, r6, #24
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	d501      	bpl.n	8008b52 <_printf_i+0x1ce>
 8008b4e:	6019      	str	r1, [r3, #0]
 8008b50:	e002      	b.n	8008b58 <_printf_i+0x1d4>
 8008b52:	0670      	lsls	r0, r6, #25
 8008b54:	d5fb      	bpl.n	8008b4e <_printf_i+0x1ca>
 8008b56:	8019      	strh	r1, [r3, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4615      	mov	r5, r2
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	e7ba      	b.n	8008ad6 <_printf_i+0x152>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	2100      	movs	r1, #0
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	602a      	str	r2, [r5, #0]
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	6862      	ldr	r2, [r4, #4]
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f82f 	bl	8008bd0 <memchr>
 8008b72:	b108      	cbz	r0, 8008b78 <_printf_i+0x1f4>
 8008b74:	1b40      	subs	r0, r0, r5
 8008b76:	6060      	str	r0, [r4, #4]
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b82:	e7a8      	b.n	8008ad6 <_printf_i+0x152>
 8008b84:	462a      	mov	r2, r5
 8008b86:	4649      	mov	r1, r9
 8008b88:	4640      	mov	r0, r8
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	47d0      	blx	sl
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d0ab      	beq.n	8008aea <_printf_i+0x166>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	079b      	lsls	r3, r3, #30
 8008b96:	d413      	bmi.n	8008bc0 <_printf_i+0x23c>
 8008b98:	68e0      	ldr	r0, [r4, #12]
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	4298      	cmp	r0, r3
 8008b9e:	bfb8      	it	lt
 8008ba0:	4618      	movlt	r0, r3
 8008ba2:	e7a4      	b.n	8008aee <_printf_i+0x16a>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4640      	mov	r0, r8
 8008bac:	47d0      	blx	sl
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d09b      	beq.n	8008aea <_printf_i+0x166>
 8008bb2:	3501      	adds	r5, #1
 8008bb4:	68e3      	ldr	r3, [r4, #12]
 8008bb6:	9903      	ldr	r1, [sp, #12]
 8008bb8:	1a5b      	subs	r3, r3, r1
 8008bba:	42ab      	cmp	r3, r5
 8008bbc:	dcf2      	bgt.n	8008ba4 <_printf_i+0x220>
 8008bbe:	e7eb      	b.n	8008b98 <_printf_i+0x214>
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	f104 0619 	add.w	r6, r4, #25
 8008bc6:	e7f5      	b.n	8008bb4 <_printf_i+0x230>
 8008bc8:	08009661 	.word	0x08009661
 8008bcc:	08009672 	.word	0x08009672

08008bd0 <memchr>:
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	b510      	push	{r4, lr}
 8008bd4:	b2c9      	uxtb	r1, r1
 8008bd6:	4402      	add	r2, r0
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	d101      	bne.n	8008be2 <memchr+0x12>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e003      	b.n	8008bea <memchr+0x1a>
 8008be2:	7804      	ldrb	r4, [r0, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	428c      	cmp	r4, r1
 8008be8:	d1f6      	bne.n	8008bd8 <memchr+0x8>
 8008bea:	bd10      	pop	{r4, pc}

08008bec <memcpy>:
 8008bec:	440a      	add	r2, r1
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf4:	d100      	bne.n	8008bf8 <memcpy+0xc>
 8008bf6:	4770      	bx	lr
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c04:	d1f9      	bne.n	8008bfa <memcpy+0xe>
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <memmove>:
 8008c08:	4288      	cmp	r0, r1
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	eb01 0402 	add.w	r4, r1, r2
 8008c10:	d902      	bls.n	8008c18 <memmove+0x10>
 8008c12:	4284      	cmp	r4, r0
 8008c14:	4623      	mov	r3, r4
 8008c16:	d807      	bhi.n	8008c28 <memmove+0x20>
 8008c18:	1e43      	subs	r3, r0, #1
 8008c1a:	42a1      	cmp	r1, r4
 8008c1c:	d008      	beq.n	8008c30 <memmove+0x28>
 8008c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c26:	e7f8      	b.n	8008c1a <memmove+0x12>
 8008c28:	4601      	mov	r1, r0
 8008c2a:	4402      	add	r2, r0
 8008c2c:	428a      	cmp	r2, r1
 8008c2e:	d100      	bne.n	8008c32 <memmove+0x2a>
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c3a:	e7f7      	b.n	8008c2c <memmove+0x24>

08008c3c <_free_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4605      	mov	r5, r0
 8008c40:	2900      	cmp	r1, #0
 8008c42:	d040      	beq.n	8008cc6 <_free_r+0x8a>
 8008c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c48:	1f0c      	subs	r4, r1, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bfb8      	it	lt
 8008c4e:	18e4      	addlt	r4, r4, r3
 8008c50:	f000 f910 	bl	8008e74 <__malloc_lock>
 8008c54:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <_free_r+0x8c>)
 8008c56:	6813      	ldr	r3, [r2, #0]
 8008c58:	b933      	cbnz	r3, 8008c68 <_free_r+0x2c>
 8008c5a:	6063      	str	r3, [r4, #4]
 8008c5c:	6014      	str	r4, [r2, #0]
 8008c5e:	4628      	mov	r0, r5
 8008c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c64:	f000 b90c 	b.w	8008e80 <__malloc_unlock>
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	d908      	bls.n	8008c7e <_free_r+0x42>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	1821      	adds	r1, r4, r0
 8008c70:	428b      	cmp	r3, r1
 8008c72:	bf01      	itttt	eq
 8008c74:	6819      	ldreq	r1, [r3, #0]
 8008c76:	685b      	ldreq	r3, [r3, #4]
 8008c78:	1809      	addeq	r1, r1, r0
 8008c7a:	6021      	streq	r1, [r4, #0]
 8008c7c:	e7ed      	b.n	8008c5a <_free_r+0x1e>
 8008c7e:	461a      	mov	r2, r3
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	b10b      	cbz	r3, 8008c88 <_free_r+0x4c>
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d9fa      	bls.n	8008c7e <_free_r+0x42>
 8008c88:	6811      	ldr	r1, [r2, #0]
 8008c8a:	1850      	adds	r0, r2, r1
 8008c8c:	42a0      	cmp	r0, r4
 8008c8e:	d10b      	bne.n	8008ca8 <_free_r+0x6c>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	4401      	add	r1, r0
 8008c94:	1850      	adds	r0, r2, r1
 8008c96:	4283      	cmp	r3, r0
 8008c98:	6011      	str	r1, [r2, #0]
 8008c9a:	d1e0      	bne.n	8008c5e <_free_r+0x22>
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4401      	add	r1, r0
 8008ca2:	6011      	str	r1, [r2, #0]
 8008ca4:	6053      	str	r3, [r2, #4]
 8008ca6:	e7da      	b.n	8008c5e <_free_r+0x22>
 8008ca8:	d902      	bls.n	8008cb0 <_free_r+0x74>
 8008caa:	230c      	movs	r3, #12
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	e7d6      	b.n	8008c5e <_free_r+0x22>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	1821      	adds	r1, r4, r0
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	bf01      	itttt	eq
 8008cb8:	6819      	ldreq	r1, [r3, #0]
 8008cba:	685b      	ldreq	r3, [r3, #4]
 8008cbc:	1809      	addeq	r1, r1, r0
 8008cbe:	6021      	streq	r1, [r4, #0]
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	6054      	str	r4, [r2, #4]
 8008cc4:	e7cb      	b.n	8008c5e <_free_r+0x22>
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20001b68 	.word	0x20001b68

08008ccc <sbrk_aligned>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4e0e      	ldr	r6, [pc, #56]	; (8008d08 <sbrk_aligned+0x3c>)
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	6831      	ldr	r1, [r6, #0]
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	b911      	cbnz	r1, 8008cde <sbrk_aligned+0x12>
 8008cd8:	f000 f8bc 	bl	8008e54 <_sbrk_r>
 8008cdc:	6030      	str	r0, [r6, #0]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 f8b7 	bl	8008e54 <_sbrk_r>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d00a      	beq.n	8008d00 <sbrk_aligned+0x34>
 8008cea:	1cc4      	adds	r4, r0, #3
 8008cec:	f024 0403 	bic.w	r4, r4, #3
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d007      	beq.n	8008d04 <sbrk_aligned+0x38>
 8008cf4:	1a21      	subs	r1, r4, r0
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f000 f8ac 	bl	8008e54 <_sbrk_r>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d101      	bne.n	8008d04 <sbrk_aligned+0x38>
 8008d00:	f04f 34ff 	mov.w	r4, #4294967295
 8008d04:	4620      	mov	r0, r4
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	20001b6c 	.word	0x20001b6c

08008d0c <_malloc_r>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	1ccd      	adds	r5, r1, #3
 8008d12:	f025 0503 	bic.w	r5, r5, #3
 8008d16:	3508      	adds	r5, #8
 8008d18:	2d0c      	cmp	r5, #12
 8008d1a:	bf38      	it	cc
 8008d1c:	250c      	movcc	r5, #12
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	4607      	mov	r7, r0
 8008d22:	db01      	blt.n	8008d28 <_malloc_r+0x1c>
 8008d24:	42a9      	cmp	r1, r5
 8008d26:	d905      	bls.n	8008d34 <_malloc_r+0x28>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	4630      	mov	r0, r6
 8008d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d34:	4e2e      	ldr	r6, [pc, #184]	; (8008df0 <_malloc_r+0xe4>)
 8008d36:	f000 f89d 	bl	8008e74 <__malloc_lock>
 8008d3a:	6833      	ldr	r3, [r6, #0]
 8008d3c:	461c      	mov	r4, r3
 8008d3e:	bb34      	cbnz	r4, 8008d8e <_malloc_r+0x82>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4638      	mov	r0, r7
 8008d44:	f7ff ffc2 	bl	8008ccc <sbrk_aligned>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	d14d      	bne.n	8008dea <_malloc_r+0xde>
 8008d4e:	6834      	ldr	r4, [r6, #0]
 8008d50:	4626      	mov	r6, r4
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d140      	bne.n	8008dd8 <_malloc_r+0xcc>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	eb04 0803 	add.w	r8, r4, r3
 8008d60:	f000 f878 	bl	8008e54 <_sbrk_r>
 8008d64:	4580      	cmp	r8, r0
 8008d66:	d13a      	bne.n	8008dde <_malloc_r+0xd2>
 8008d68:	6821      	ldr	r1, [r4, #0]
 8008d6a:	3503      	adds	r5, #3
 8008d6c:	1a6d      	subs	r5, r5, r1
 8008d6e:	f025 0503 	bic.w	r5, r5, #3
 8008d72:	3508      	adds	r5, #8
 8008d74:	2d0c      	cmp	r5, #12
 8008d76:	bf38      	it	cc
 8008d78:	250c      	movcc	r5, #12
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7ff ffa5 	bl	8008ccc <sbrk_aligned>
 8008d82:	3001      	adds	r0, #1
 8008d84:	d02b      	beq.n	8008dde <_malloc_r+0xd2>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	442b      	add	r3, r5
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	e00e      	b.n	8008dac <_malloc_r+0xa0>
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	1b52      	subs	r2, r2, r5
 8008d92:	d41e      	bmi.n	8008dd2 <_malloc_r+0xc6>
 8008d94:	2a0b      	cmp	r2, #11
 8008d96:	d916      	bls.n	8008dc6 <_malloc_r+0xba>
 8008d98:	1961      	adds	r1, r4, r5
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	6025      	str	r5, [r4, #0]
 8008d9e:	bf18      	it	ne
 8008da0:	6059      	strne	r1, [r3, #4]
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	bf08      	it	eq
 8008da6:	6031      	streq	r1, [r6, #0]
 8008da8:	5162      	str	r2, [r4, r5]
 8008daa:	604b      	str	r3, [r1, #4]
 8008dac:	4638      	mov	r0, r7
 8008dae:	f104 060b 	add.w	r6, r4, #11
 8008db2:	f000 f865 	bl	8008e80 <__malloc_unlock>
 8008db6:	f026 0607 	bic.w	r6, r6, #7
 8008dba:	1d23      	adds	r3, r4, #4
 8008dbc:	1af2      	subs	r2, r6, r3
 8008dbe:	d0b6      	beq.n	8008d2e <_malloc_r+0x22>
 8008dc0:	1b9b      	subs	r3, r3, r6
 8008dc2:	50a3      	str	r3, [r4, r2]
 8008dc4:	e7b3      	b.n	8008d2e <_malloc_r+0x22>
 8008dc6:	6862      	ldr	r2, [r4, #4]
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	bf0c      	ite	eq
 8008dcc:	6032      	streq	r2, [r6, #0]
 8008dce:	605a      	strne	r2, [r3, #4]
 8008dd0:	e7ec      	b.n	8008dac <_malloc_r+0xa0>
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	6864      	ldr	r4, [r4, #4]
 8008dd6:	e7b2      	b.n	8008d3e <_malloc_r+0x32>
 8008dd8:	4634      	mov	r4, r6
 8008dda:	6876      	ldr	r6, [r6, #4]
 8008ddc:	e7b9      	b.n	8008d52 <_malloc_r+0x46>
 8008dde:	230c      	movs	r3, #12
 8008de0:	4638      	mov	r0, r7
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	f000 f84c 	bl	8008e80 <__malloc_unlock>
 8008de8:	e7a1      	b.n	8008d2e <_malloc_r+0x22>
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	e7de      	b.n	8008dac <_malloc_r+0xa0>
 8008dee:	bf00      	nop
 8008df0:	20001b68 	.word	0x20001b68

08008df4 <_realloc_r>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	460e      	mov	r6, r1
 8008dfe:	b921      	cbnz	r1, 8008e0a <_realloc_r+0x16>
 8008e00:	4611      	mov	r1, r2
 8008e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e06:	f7ff bf81 	b.w	8008d0c <_malloc_r>
 8008e0a:	b92a      	cbnz	r2, 8008e18 <_realloc_r+0x24>
 8008e0c:	f7ff ff16 	bl	8008c3c <_free_r>
 8008e10:	4625      	mov	r5, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e18:	f000 f838 	bl	8008e8c <_malloc_usable_size_r>
 8008e1c:	4284      	cmp	r4, r0
 8008e1e:	4607      	mov	r7, r0
 8008e20:	d802      	bhi.n	8008e28 <_realloc_r+0x34>
 8008e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e26:	d812      	bhi.n	8008e4e <_realloc_r+0x5a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	f7ff ff6e 	bl	8008d0c <_malloc_r>
 8008e30:	4605      	mov	r5, r0
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d0ed      	beq.n	8008e12 <_realloc_r+0x1e>
 8008e36:	42bc      	cmp	r4, r7
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	bf28      	it	cs
 8008e3e:	463a      	movcs	r2, r7
 8008e40:	f7ff fed4 	bl	8008bec <memcpy>
 8008e44:	4631      	mov	r1, r6
 8008e46:	4640      	mov	r0, r8
 8008e48:	f7ff fef8 	bl	8008c3c <_free_r>
 8008e4c:	e7e1      	b.n	8008e12 <_realloc_r+0x1e>
 8008e4e:	4635      	mov	r5, r6
 8008e50:	e7df      	b.n	8008e12 <_realloc_r+0x1e>
	...

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	2300      	movs	r3, #0
 8008e58:	4d05      	ldr	r5, [pc, #20]	; (8008e70 <_sbrk_r+0x1c>)
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f9 fa22 	bl	80022a8 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20001b70 	.word	0x20001b70

08008e74 <__malloc_lock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__malloc_lock+0x8>)
 8008e76:	f000 b811 	b.w	8008e9c <__retarget_lock_acquire_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	20001b74 	.word	0x20001b74

08008e80 <__malloc_unlock>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__malloc_unlock+0x8>)
 8008e82:	f000 b80c 	b.w	8008e9e <__retarget_lock_release_recursive>
 8008e86:	bf00      	nop
 8008e88:	20001b74 	.word	0x20001b74

08008e8c <_malloc_usable_size_r>:
 8008e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e90:	1f18      	subs	r0, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfbc      	itt	lt
 8008e96:	580b      	ldrlt	r3, [r1, r0]
 8008e98:	18c0      	addlt	r0, r0, r3
 8008e9a:	4770      	bx	lr

08008e9c <__retarget_lock_acquire_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_release_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr
