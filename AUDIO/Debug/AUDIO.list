
AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009798  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a15c  0800a15c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a15c  0800a15c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a15c  0800a15c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000070  0800a1d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  0800a1d4  00021b00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145d6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003243  00000000  00000000  0003466f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000378b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00038c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7a2  00000000  00000000  00039ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b2  00000000  00000000  00056642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1df5  00000000  00000000  0006d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  0010f53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08009964 	.word	0x08009964

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08009964 	.word	0x08009964

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f002 fb57 	bl	8002930 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f002 fb4f 	bl	8002930 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f002 fb38 	bl	8002930 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f002 fb31 	bl	8002930 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08009a94 	.word	0x08009a94

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <initFileStruct>:
//void initFileSturct(FileStruct*);
//int initFileHeader(FileStruct*);
//int readFile(FileStruct*);
//int16_t readSample(FileStruct*);

static inline void initFileStruct(FileStruct *fileStruct) {
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BUFF_NUM; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e03a      	b.n	80007ee <initFileStruct+0x84>
		fileStruct->structs[i].curr = fileStruct->structs[i].first = fileStruct->structs[i].raw;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8000786:	3318      	adds	r3, #24
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	1d1a      	adds	r2, r3, #4
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 8000796:	fb00 f303 	mul.w	r3, r0, r3
 800079a:	440b      	add	r3, r1
 800079c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007a0:	3304      	adds	r3, #4
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80007ac:	fb01 f303 	mul.w	r3, r1, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007b6:	3304      	adds	r3, #4
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
 80007c2:	fb00 f303 	mul.w	r3, r0, r3
 80007c6:	440b      	add	r3, r1
 80007c8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007cc:	3308      	adds	r3, #8
 80007ce:	601a      	str	r2, [r3, #0]
		fileStruct->structs[i].buffSize = 0;
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80007d8:	fb01 f303 	mul.w	r3, r1, r3
 80007dc:	4413      	add	r3, r2
 80007de:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80007e2:	330c      	adds	r3, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFF_NUM; i++) {
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	ddc1      	ble.n	8000778 <initFileStruct+0xe>
	}
	fileStruct->currReading = BUFF_NUM - 1; // set to use the first fileStruct
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
	fileStruct->currWriting = 0; // also set to use the first fileStruct
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	fileStruct->inUse = 1;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fileStruct->fileEmpty = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	fileStruct->sampleCount = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082a:	461a      	mov	r2, r3
 800082c:	2300      	movs	r3, #0
 800082e:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <initFileHeader>:

static inline int initFileHeader(FileStruct *fileStruct) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int bytes_read;
	return f_read(&(fileStruct->file), &(fileStruct->header), sizeof(WAV_HEADER), &bytes_read);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 800084c:	310c      	adds	r1, #12
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	222c      	movs	r2, #44	; 0x2c
 8000854:	f007 ffcc 	bl	80087f0 <f_read>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <readFile>:

static inline int readFile(FileStruct* f) {
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	if (f->fileEmpty) return -1;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000870:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <readFile+0x1c>
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	e077      	b.n	800096e <readFile+0x10c>

	if (f->currWriting == f->currReading) return -1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f893 2845 	ldrb.w	r2, [r3, #2117]	; 0x845
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088e:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000892:	429a      	cmp	r2, r3
 8000894:	d102      	bne.n	800089c <readFile+0x3a>
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e068      	b.n	800096e <readFile+0x10c>
	if (fileStructEmpty(f, f->currWriting)) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a2:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80008a6:	4619      	mov	r1, r3
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008ae:	fb01 f303 	mul.w	r3, r1, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80008b8:	330c      	adds	r3, #12
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d155      	bne.n	800096c <readFile+0x10a>
		FRESULT res = f_read(&(f->file), f->structs[f->currWriting].raw, BUFF_SIZE, &(f->structs[f->currWriting].buffSize));
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c8:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80008cc:	461a      	mov	r2, r3
 80008ce:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80008da:	3318      	adds	r3, #24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	1d19      	adds	r1, r3, #4
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008e8:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 80008ec:	461a      	mov	r2, r3
 80008ee:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80008f2:	fb02 f303 	mul.w	r3, r2, r3
 80008f6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80008fa:	3308      	adds	r3, #8
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000906:	f007 ff73 	bl	80087f0 <f_read>
 800090a:	4603      	mov	r3, r0
 800090c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || f->structs[f->currWriting].buffSize == 0) {
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d111      	bne.n	8000938 <readFile+0xd6>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800091a:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 800091e:	4619      	mov	r1, r3
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000926:	fb01 f303 	mul.w	r3, r1, r3
 800092a:	4413      	add	r3, r2
 800092c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000930:	330c      	adds	r3, #12
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d108      	bne.n	800094a <readFile+0xe8>
			f->fileEmpty = 1;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800093e:	2201      	movs	r2, #1
 8000940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			return -1;
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	e011      	b.n	800096e <readFile+0x10c>
		}
		f->currWriting = (f->currWriting + 1) % BUFF_NUM;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000950:	f893 3845 	ldrb.w	r3, [r3, #2117]	; 0x845
 8000954:	3301      	adds	r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000968:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
	}
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <readSample>:

static inline uint16_t readSample(FileStruct* f) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	if (!f->inUse) return 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <readSample+0x1a>
 800098c:	2300      	movs	r3, #0
 800098e:	e0e5      	b.n	8000b5c <readSample+0x1e6>

	if (!fileStructEmpty(f, f->currReading)) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000996:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 800099a:	4619      	mov	r1, r3
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009a2:	fb01 f303 	mul.w	r3, r1, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80009ac:	330c      	adds	r3, #12
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d079      	beq.n	8000aa8 <readSample+0x132>
		f->structs[f->currReading].buffSize -= 2;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009ba:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 80009be:	4619      	mov	r1, r3
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009c6:	fb01 f303 	mul.w	r3, r1, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80009d0:	330c      	adds	r3, #12
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80009da:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 80009de:	4610      	mov	r0, r2
 80009e0:	3b02      	subs	r3, #2
 80009e2:	b299      	uxth	r1, r3
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 80009ea:	fb00 f303 	mul.w	r3, r0, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80009f4:	330c      	adds	r3, #12
 80009f6:	460a      	mov	r2, r1
 80009f8:	801a      	strh	r2, [r3, #0]
		temp = (f->structs[f->currReading].curr[1] << 8) | f->structs[f->currReading].curr[0];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a00:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a04:	4619      	mov	r1, r3
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a0c:	fb01 f303 	mul.w	r3, r1, r3
 8000a10:	4413      	add	r3, r2
 8000a12:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a16:	3308      	adds	r3, #8
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a28:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a34:	fb00 f303 	mul.w	r3, r0, r3
 8000a38:	440b      	add	r3, r1
 8000a3a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a3e:	3308      	adds	r3, #8
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	81fb      	strh	r3, [r7, #14]
		f->structs[f->currReading].curr += 2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a52:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000a56:	4619      	mov	r1, r3
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a68:	3308      	adds	r3, #8
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000a72:	f892 2844 	ldrb.w	r2, [r2, #2116]	; 0x844
 8000a76:	4610      	mov	r0, r2
 8000a78:	1c9a      	adds	r2, r3, #2
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000a80:	fb00 f303 	mul.w	r3, r0, r3
 8000a84:	440b      	add	r3, r1
 8000a86:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	601a      	str	r2, [r3, #0]
		f->sampleCount++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a94:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 8000a98:	3301      	adds	r3, #1
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000aa0:	f8c2 3848 	str.w	r3, [r2, #2120]	; 0x848
		return temp;
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	e059      	b.n	8000b5c <readSample+0x1e6>
	} else if (!fileStructEmpty(f, (f->currReading + 1) % BUFF_NUM)) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aae:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	bfb8      	it	lt
 8000abc:	425b      	neglt	r3, r3
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8000ac4:	fb01 f303 	mul.w	r3, r1, r3
 8000ac8:	4413      	add	r3, r2
 8000aca:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000ace:	330c      	adds	r3, #12
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d034      	beq.n	8000b40 <readSample+0x1ca>
		f->currReading = (f->currReading + 1) % BUFF_NUM;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000adc:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000af4:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
		f->structs[f->currReading].curr = f->structs[f->currReading].first;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000afe:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000b02:	4619      	mov	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b0a:	f893 3844 	ldrb.w	r3, [r3, #2116]	; 0x844
 8000b0e:	4618      	mov	r0, r3
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000b20:	3304      	adds	r3, #4
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 8000b2a:	fb00 f303 	mul.w	r3, r0, r3
 8000b2e:	440b      	add	r3, r1
 8000b30:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8000b34:	3308      	adds	r3, #8
 8000b36:	601a      	str	r2, [r3, #0]
		readSample(f);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff1c 	bl	8000976 <readSample>
	} else {
		if (f->fileEmpty) f->inUse = 0;
		return 0;
	}
}
 8000b3e:	e00d      	b.n	8000b5c <readSample+0x1e6>
		if (f->fileEmpty) f->inUse = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d005      	beq.n	8000b5a <readSample+0x1e4>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		return 0;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <error_handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define TESTFILE
void error_handler(int res, const char* msg) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	; 0x70
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	char buff[100];
		sprintf(buff, "%d %s", res, msg);
 8000b6e:	f107 000c 	add.w	r0, r7, #12
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <error_handler+0x34>)
 8000b78:	f008 fa7a 	bl	8009070 <siprintf>
	  LCD_DrawString(40, 0, buff);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	461a      	mov	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	2028      	movs	r0, #40	; 0x28
 8000b86:	f7ff fdc1 	bl	800070c <LCD_DrawString>
	  HAL_Delay(1000000);
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <error_handler+0x38>)
 8000b8c:	f000 ff6c 	bl	8001a68 <HAL_Delay>
}
 8000b90:	bf00      	nop
 8000b92:	3770      	adds	r7, #112	; 0x70
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0800997c 	.word	0x0800997c
 8000b9c:	000f4240 	.word	0x000f4240

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f000 fefc 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 fa14 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 fb66 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb4:	f000 fb46 	bl	8001244 <MX_DMA_Init>
  MX_FSMC_Init();
 8000bb8:	f000 fc16 	bl	80013e8 <MX_FSMC_Init>
  MX_DAC_Init();
 8000bbc:	f000 fa52 	bl	8001064 <MX_DAC_Init>
  MX_TIM2_Init();
 8000bc0:	f000 faa6 	bl	8001110 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bc4:	f000 faf0 	bl	80011a8 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8000bc8:	f000 fa82 	bl	80010d0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000bcc:	f005 f99a 	bl	8005f04 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8000bd0:	f7ff fb39 	bl	8000246 <LCD_INIT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	485c      	ldr	r0, [pc, #368]	; (8000d48 <main+0x1a8>)
 8000bd8:	f001 f899 	bl	8001d0e <HAL_DAC_Start>

//  TIM2->PSC = 7900;
//  TIM2->ARR = 7900;
  TIM2->ARR = 72000000 / 22050 - 1;
 8000bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be0:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  FATFS FatFs;
  DIR dir;
  FILINFO fno;

#ifdef TESTFILE
  HAL_Delay(20);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f000 ff3e 	bl	8001a68 <HAL_Delay>
  res = f_mount(&FatFs, "", 1);
 8000bec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000bf0:	3b04      	subs	r3, #4
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4955      	ldr	r1, [pc, #340]	; (8000d4c <main+0x1ac>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 faaa 	bl	8008150 <f_mount>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c02:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000c06:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "No sd card found!");
 8000c08:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c0c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d008      	beq.n	8000c28 <main+0x88>
 8000c16:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c1a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	494b      	ldr	r1, [pc, #300]	; (8000d50 <main+0x1b0>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff9e 	bl	8000b64 <error_handler>
  HAL_Delay(20);
 8000c28:	2014      	movs	r0, #20
 8000c2a:	f000 ff1d 	bl	8001a68 <HAL_Delay>

  res = f_opendir(&dir, "0:");
 8000c2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c32:	3b24      	subs	r3, #36	; 0x24
 8000c34:	4947      	ldr	r1, [pc, #284]	; (8000d54 <main+0x1b4>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 ffc2 	bl	8008bc0 <f_opendir>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c42:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000c46:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open drive");
 8000c48:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c4c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d008      	beq.n	8000c68 <main+0xc8>
 8000c56:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c5a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	493d      	ldr	r1, [pc, #244]	; (8000d58 <main+0x1b8>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff7e 	bl	8000b64 <error_handler>
  HAL_Delay(20);
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f000 fefd 	bl	8001a68 <HAL_Delay>

  int lineNum = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c74:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000c78:	6013      	str	r3, [r2, #0]
  char* filename;
  while (1) {
	  res = f_readdir(&dir, &fno);
 8000c7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c7e:	3a3c      	subs	r2, #60	; 0x3c
 8000c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c84:	3b24      	subs	r3, #36	; 0x24
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f008 f82b 	bl	8008ce4 <f_readdir>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c94:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000c98:	7013      	strb	r3, [r2, #0]
	  if (res != FR_OK || fno.fname[0] == 0) {
 8000c9a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c9e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <main+0x114>
 8000ca8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cac:	f813 3c73 	ldrb.w	r3, [r3, #-115]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d11b      	bne.n	8000cec <main+0x14c>
		  sprintf(buff, "%d no more :(", res);
 8000cb4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000cb8:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4926      	ldr	r1, [pc, #152]	; (8000d5c <main+0x1bc>)
 8000cc2:	4827      	ldr	r0, [pc, #156]	; (8000d60 <main+0x1c0>)
 8000cc4:	f008 f9d4 	bl	8009070 <siprintf>
		  LCD_DrawString(0, 20+20*(lineNum), buff);
 8000cc8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000ccc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <main+0x1c0>)
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fd11 	bl	800070c <LCD_DrawString>
		  break;
 8000cea:	e03c      	b.n	8000d66 <main+0x1c6>
	  }
	  filename = fno.fname;
 8000cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf0:	3b3c      	subs	r3, #60	; 0x3c
 8000cf2:	3309      	adds	r3, #9
 8000cf4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000cf8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000cfc:	6013      	str	r3, [r2, #0]
	  LCD_DrawString(0, 20+20*(lineNum++), filename);
 8000cfe:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d02:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8000d0e:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8000d12:	600a      	str	r2, [r1, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d26:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fcec 	bl	800070c <LCD_DrawString>
	  if (filename[0] == 'M') break;
 8000d34:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d38:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b4d      	cmp	r3, #77	; 0x4d
 8000d42:	d00f      	beq.n	8000d64 <main+0x1c4>
	  res = f_readdir(&dir, &fno);
 8000d44:	e799      	b.n	8000c7a <main+0xda>
 8000d46:	bf00      	nop
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	08009984 	.word	0x08009984
 8000d50:	08009988 	.word	0x08009988
 8000d54:	0800999c 	.word	0x0800999c
 8000d58:	080099a0 	.word	0x080099a0
 8000d5c:	080099b4 	.word	0x080099b4
 8000d60:	20000240 	.word	0x20000240
	  if (filename[0] == 'M') break;
 8000d64:	bf00      	nop
  }


  // Initialize the fileStruct struct
  res = f_open(&(sampleFile.file), filename, FA_READ);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d6c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	488c      	ldr	r0, [pc, #560]	; (8000fa4 <main+0x404>)
 8000d74:	f007 fa36 	bl	80081e4 <f_open>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d7e:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000d82:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot open file");
 8000d84:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d88:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d008      	beq.n	8000da4 <main+0x204>
 8000d92:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d96:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4982      	ldr	r1, [pc, #520]	; (8000fa8 <main+0x408>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fee0 	bl	8000b64 <error_handler>

  HAL_Delay(20);
 8000da4:	2014      	movs	r0, #20
 8000da6:	f000 fe5f 	bl	8001a68 <HAL_Delay>
  initFileStruct(&sampleFile);
 8000daa:	487e      	ldr	r0, [pc, #504]	; (8000fa4 <main+0x404>)
 8000dac:	f7ff fcdd 	bl	800076a <initFileStruct>
  res = initFileHeader(&sampleFile);
 8000db0:	487c      	ldr	r0, [pc, #496]	; (8000fa4 <main+0x404>)
 8000db2:	f7ff fd43 	bl	800083c <initFileHeader>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000dbc:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000dc0:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) error_handler(res, "Cannot read file");
 8000dc2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dc6:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d008      	beq.n	8000de2 <main+0x242>
 8000dd0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dd4:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4974      	ldr	r1, [pc, #464]	; (8000fac <main+0x40c>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fec1 	bl	8000b64 <error_handler>

  HAL_TIM_Base_Start(&htim2);
 8000de2:	4873      	ldr	r0, [pc, #460]	; (8000fb0 <main+0x410>)
 8000de4:	f003 fe7a 	bl	8004adc <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000de8:	4b71      	ldr	r3, [pc, #452]	; (8000fb0 <main+0x410>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	4b70      	ldr	r3, [pc, #448]	; (8000fb0 <main+0x410>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	60da      	str	r2, [r3, #12]

  // Display some information about the header
  	WavHeader *header = &(sampleFile.header);
 8000df8:	4b6e      	ldr	r3, [pc, #440]	; (8000fb4 <main+0x414>)
 8000dfa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000dfe:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000e02:	6013      	str	r3, [r2, #0]
    sprintf(buff, "hertz: %d", header->sampleFreq);
 8000e04:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e08:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4969      	ldr	r1, [pc, #420]	; (8000fb8 <main+0x418>)
 8000e14:	4869      	ldr	r0, [pc, #420]	; (8000fbc <main+0x41c>)
 8000e16:	f008 f92b 	bl	8009070 <siprintf>
    LCD_DrawString(30, 100, buff);
 8000e1a:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <main+0x41c>)
 8000e1c:	2164      	movs	r1, #100	; 0x64
 8000e1e:	201e      	movs	r0, #30
 8000e20:	f7ff fc74 	bl	800070c <LCD_DrawString>
    sprintf(buff, "bits/sample: %d", header->bitsPerSample);
 8000e24:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e28:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000e30:	461a      	mov	r2, r3
 8000e32:	4963      	ldr	r1, [pc, #396]	; (8000fc0 <main+0x420>)
 8000e34:	4861      	ldr	r0, [pc, #388]	; (8000fbc <main+0x41c>)
 8000e36:	f008 f91b 	bl	8009070 <siprintf>
    LCD_DrawString(30, 120, buff);
 8000e3a:	4a60      	ldr	r2, [pc, #384]	; (8000fbc <main+0x41c>)
 8000e3c:	2178      	movs	r1, #120	; 0x78
 8000e3e:	201e      	movs	r0, #30
 8000e40:	f7ff fc64 	bl	800070c <LCD_DrawString>
    sprintf(buff, "channels: %d", header->channels);
 8000e44:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e48:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	8adb      	ldrh	r3, [r3, #22]
 8000e50:	461a      	mov	r2, r3
 8000e52:	495c      	ldr	r1, [pc, #368]	; (8000fc4 <main+0x424>)
 8000e54:	4859      	ldr	r0, [pc, #356]	; (8000fbc <main+0x41c>)
 8000e56:	f008 f90b 	bl	8009070 <siprintf>
    LCD_DrawString(30, 140, buff);
 8000e5a:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <main+0x41c>)
 8000e5c:	218c      	movs	r1, #140	; 0x8c
 8000e5e:	201e      	movs	r0, #30
 8000e60:	f7ff fc54 	bl	800070c <LCD_DrawString>
    sprintf(buff, "data: %d", header->dataChunkLength);
 8000e64:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e68:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	461a      	mov	r2, r3
 8000e72:	4955      	ldr	r1, [pc, #340]	; (8000fc8 <main+0x428>)
 8000e74:	4851      	ldr	r0, [pc, #324]	; (8000fbc <main+0x41c>)
 8000e76:	f008 f8fb 	bl	8009070 <siprintf>
    LCD_DrawString(30, 160, buff);
 8000e7a:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <main+0x41c>)
 8000e7c:	21a0      	movs	r1, #160	; 0xa0
 8000e7e:	201e      	movs	r0, #30
 8000e80:	f7ff fc44 	bl	800070c <LCD_DrawString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int some_tick = HAL_GetTick();
 8000e84:	f000 fde6 	bl	8001a54 <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000e8e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000e92:	6013      	str	r3, [r2, #0]

  while (1)
  {

	  if (HAL_GetTick() - some_tick > 200) {
 8000e94:	f000 fdde 	bl	8001a54 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e9e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2bc8      	cmp	r3, #200	; 0xc8
 8000ea8:	d90b      	bls.n	8000ec2 <main+0x322>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4847      	ldr	r0, [pc, #284]	; (8000fcc <main+0x42c>)
 8000eae:	f001 fd57 	bl	8002960 <HAL_GPIO_TogglePin>
		  some_tick = HAL_GetTick();
 8000eb2:	f000 fdcf 	bl	8001a54 <HAL_GetTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000ebc:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000ec0:	6013      	str	r3, [r2, #0]
//	  	  LCD_DrawString(0, 210, buff);
//	  	  sprintf(buff, "r:%d,w:%d,empty:%d", sampleFile.currReading, sampleFile.currWriting, sampleFile.fileEmpty);
//	  	  LCD_DrawString(0, 230, buff);
//		  sprintf(buff, "sample: %6d     ", sample_sum);
//	      LCD_DrawString(20, 80, buff);
	  if (sampleFile.sampleCount % 3241 == 0) {
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <main+0x404>)
 8000ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ec8:	f8d3 2848 	ldr.w	r2, [r3, #2120]	; 0x848
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <main+0x430>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	1ad1      	subs	r1, r2, r3
 8000ed4:	0849      	lsrs	r1, r1, #1
 8000ed6:	440b      	add	r3, r1
 8000ed8:	0adb      	lsrs	r3, r3, #11
 8000eda:	f640 41a9 	movw	r1, #3241	; 0xca9
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <main+0x366>
		  sprintf(buff, "count: %6d     ", sampleFile.sampleCount);
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <main+0x404>)
 8000eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eee:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4937      	ldr	r1, [pc, #220]	; (8000fd4 <main+0x434>)
 8000ef6:	4831      	ldr	r0, [pc, #196]	; (8000fbc <main+0x41c>)
 8000ef8:	f008 f8ba 	bl	8009070 <siprintf>
	      LCD_DrawString(20, 80, buff);
 8000efc:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <main+0x41c>)
 8000efe:	2150      	movs	r1, #80	; 0x50
 8000f00:	2014      	movs	r0, #20
 8000f02:	f7ff fc03 	bl	800070c <LCD_DrawString>
	  }

		readFile(&sampleFile);
 8000f06:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <main+0x404>)
 8000f08:	f7ff fcab 	bl	8000862 <readFile>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
		__disable_irq();
		if (!sampleFile.inUse) {
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <main+0x404>)
 8000f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d13e      	bne.n	8000f9c <main+0x3fc>
		  res = f_open(&(sampleFile.file), filename, FA_READ);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f24:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <main+0x404>)
 8000f2c:	f007 f95a 	bl	80081e4 <f_open>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000f36:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000f3a:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot open file");
 8000f3c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f40:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <main+0x3bc>
 8000f4a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f4e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <main+0x408>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe04 	bl	8000b64 <error_handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f5c:	b662      	cpsie	i
}
 8000f5e:	bf00      	nop
		  __enable_irq();
		  initFileStruct(&sampleFile);
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <main+0x404>)
 8000f62:	f7ff fc02 	bl	800076a <initFileStruct>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f66:	b672      	cpsid	i
}
 8000f68:	bf00      	nop
		  __disable_irq();
		  res = initFileHeader(&sampleFile);
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <main+0x404>)
 8000f6c:	f7ff fc66 	bl	800083c <initFileHeader>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000f76:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8000f7a:	7013      	strb	r3, [r2, #0]
		  if (res != FR_OK) error_handler(res, "Cannot read file");
 8000f7c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f80:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <main+0x3fc>
 8000f8a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f8e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4905      	ldr	r1, [pc, #20]	; (8000fac <main+0x40c>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fde4 	bl	8000b64 <error_handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9c:	b662      	cpsie	i
}
 8000f9e:	bf00      	nop
	  if (HAL_GetTick() - some_tick > 200) {
 8000fa0:	e778      	b.n	8000e94 <main+0x2f4>
 8000fa2:	bf00      	nop
 8000fa4:	20000260 	.word	0x20000260
 8000fa8:	080099c4 	.word	0x080099c4
 8000fac:	080099d8 	.word	0x080099d8
 8000fb0:	20000168 	.word	0x20000168
 8000fb4:	2000128c 	.word	0x2000128c
 8000fb8:	080099ec 	.word	0x080099ec
 8000fbc:	20000240 	.word	0x20000240
 8000fc0:	080099f8 	.word	0x080099f8
 8000fc4:	08009a08 	.word	0x08009a08
 8000fc8:	08009a18 	.word	0x08009a18
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	4388e2db 	.word	0x4388e2db
 8000fd4:	08009a24 	.word	0x08009a24

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 f83a 	bl	8009060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001016:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fcb7 	bl	8002994 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800102c:	f000 fa6e 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 ff24 	bl	8002e98 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001056:	f000 fa59 	bl	800150c <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_DAC_Init+0x64>)
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <MX_DAC_Init+0x68>)
 8001076:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_DAC_Init+0x64>)
 800107a:	f000 fe26 	bl	8001cca <HAL_DAC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001084:	f000 fa42 	bl	800150c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_DAC_Init+0x64>)
 8001098:	f000 feae 	bl	8001df8 <HAL_DAC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010a2:	f000 fa33 	bl	800150c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010a6:	2324      	movs	r3, #36	; 0x24
 80010a8:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_DAC_Init+0x64>)
 80010b2:	f000 fea1 	bl	8001df8 <HAL_DAC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 fa26 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  /* USER CODE END DAC_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	40007400 	.word	0x40007400

080010d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010d6:	4a0d      	ldr	r2, [pc, #52]	; (800110c <MX_SDIO_SD_Init+0x3c>)
 80010d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <MX_SDIO_SD_Init+0x38>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200000e4 	.word	0x200000e4
 800110c:	40018000 	.word	0x40018000

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 800112e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001142:	f241 1293 	movw	r2, #4499	; 0x1193
 8001146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f003 fc71 	bl	8004a3c <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 f9d4 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f003 fe13 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f9c6 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001180:	2320      	movs	r3, #32
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f003 fffd 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f9b8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000168 	.word	0x20000168

080011a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM3_Init+0x94>)
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <MX_TIM3_Init+0x98>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_TIM3_Init+0x94>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM3_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3264;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM3_Init+0x94>)
 80011d8:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80011dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_TIM3_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM3_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM3_Init+0x94>)
 80011ec:	f003 fc26 	bl	8004a3c <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 f989 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM3_Init+0x94>)
 8001208:	f003 fdc8 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 f97b 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM3_Init+0x94>)
 8001224:	f003 ffb2 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800122e:	f000 f96d 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001b0 	.word	0x200001b0
 8001240:	40000400 	.word	0x40000400

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x38>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x38>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x38>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	203b      	movs	r0, #59	; 0x3b
 8001268:	f000 fcf9 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800126c:	203b      	movs	r0, #59	; 0x3b
 800126e:	f000 fd12 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <MX_GPIO_Init+0x150>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <MX_GPIO_Init+0x150>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a41      	ldr	r2, [pc, #260]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <MX_GPIO_Init+0x150>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2103      	movs	r1, #3
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <MX_GPIO_Init+0x154>)
 8001312:	f001 fb0d 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <MX_GPIO_Init+0x158>)
 800131e:	f001 fb07 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <MX_GPIO_Init+0x15c>)
 800132a:	f001 fb01 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	482b      	ldr	r0, [pc, #172]	; (80013e0 <MX_GPIO_Init+0x160>)
 8001334:	f001 fafc 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4619      	mov	r1, r3
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <MX_GPIO_Init+0x164>)
 800134e:	f001 f95b 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_GPIO_Init+0x154>)
 800136a:	f001 f94d 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_GPIO_Init+0x158>)
 8001388:	f001 f93e 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800138c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	4619      	mov	r1, r3
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_GPIO_Init+0x15c>)
 80013a6:	f001 f92f 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_GPIO_Init+0x160>)
 80013c2:	f001 f921 	bl	8002608 <HAL_GPIO_Init>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40011800 	.word	0x40011800
 80013e4:	40011000 	.word	0x40011000

080013e8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001402:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001406:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <MX_FSMC_Init+0xc0>)
 800140c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001422:	2210      	movs	r2, #16
 8001424:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001448:	2200      	movs	r2, #0
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001454:	2200      	movs	r2, #0
 8001456:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_FSMC_Init+0xbc>)
 800145a:	2200      	movs	r2, #0
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800145e:	230f      	movs	r3, #15
 8001460:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001462:	230f      	movs	r3, #15
 8001464:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800146a:	230f      	movs	r3, #15
 800146c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800146e:	2310      	movs	r3, #16
 8001470:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001472:	2311      	movs	r3, #17
 8001474:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <MX_FSMC_Init+0xbc>)
 8001482:	f003 fa8e 	bl	80049a2 <HAL_SRAM_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800148c:	f000 f83e 	bl	800150c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_FSMC_Init+0xc4>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <MX_FSMC_Init+0xc4>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200001f8 	.word	0x200001f8
 80014a8:	a0000104 	.word	0xa0000104
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d118      	bne.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x44>
//		counter++;
		sample_sum = readSample(&sampleFile);
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014c4:	f7ff fa57 	bl	8000976 <readSample>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014ce:	801a      	strh	r2, [r3, #0]
		dac_out = (sample_sum + 32768);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014e0:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (dac_out) >> 5);
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014f0:	f000 fc5e 	bl	8001db0 <HAL_DAC_SetValue>
	}
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000260 	.word	0x20000260
 8001500:	20001aae 	.word	0x20001aae
 8001504:	20001aac 	.word	0x20001aac
 8001508:	2000008c 	.word	0x2000008c

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_MspInit+0x5c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_MspInit+0x5c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x60>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_MspInit+0x60>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000

0800157c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_DAC_MspInit+0xc0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d14a      	bne.n	8001632 <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 80015a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015a6:	61d3      	str	r3, [r2, #28]
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_DAC_MspInit+0xc4>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015cc:	2330      	movs	r3, #48	; 0x30
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	481a      	ldr	r0, [pc, #104]	; (8001644 <HAL_DAC_MspInit+0xc8>)
 80015dc:	f001 f814 	bl	8002608 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 80015e2:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 80015e8:	2210      	movs	r2, #16
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 800160a:	2220      	movs	r2, #32
 800160c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001614:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 8001618:	f000 fc3c 	bl	8001e94 <HAL_DMA_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8001622:	f7ff ff73 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40007400 	.word	0x40007400
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	200000a0 	.word	0x200000a0
 800164c:	40020444 	.word	0x40020444

08001650 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_SD_MspInit+0xb4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d144      	bne.n	80016fa <HAL_SD_MspInit+0xaa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_SD_MspInit+0xb8>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_SD_MspInit+0xb8>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6153      	str	r3, [r2, #20]
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_SD_MspInit+0xb8>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_SD_MspInit+0xb8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_SD_MspInit+0xb8>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_SD_MspInit+0xb8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_SD_MspInit+0xb8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_SD_MspInit+0xb8>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_SD_MspInit+0xb8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016bc:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <HAL_SD_MspInit+0xbc>)
 80016ce:	f000 ff9b 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d2:	2304      	movs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4619      	mov	r1, r3
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <HAL_SD_MspInit+0xc0>)
 80016e6:	f000 ff8f 	bl	8002608 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2031      	movs	r0, #49	; 0x31
 80016f0:	f000 fab5 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016f4:	2031      	movs	r0, #49	; 0x31
 80016f6:	f000 face 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40018000 	.word	0x40018000
 8001708:	40021000 	.word	0x40021000
 800170c:	40011000 	.word	0x40011000
 8001710:	40011400 	.word	0x40011400

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d114      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	201c      	movs	r0, #28
 8001744:	f000 fa8b 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001748:	201c      	movs	r0, #28
 800174a:	f000 faa4 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174e:	e018      	b.n	8001782 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201d      	movs	r0, #29
 8001778:	f000 fa71 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800177c:	201d      	movs	r0, #29
 800177e:	f000 fa8a 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40000400 	.word	0x40000400

08001794 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_FSMC_MspInit+0x78>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d129      	bne.n	8001804 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_FSMC_MspInit+0x78>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_FSMC_MspInit+0x7c>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_FSMC_MspInit+0x7c>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_FSMC_MspInit+0x7c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017ce:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017d2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4619      	mov	r1, r3
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_FSMC_MspInit+0x80>)
 80017e4:	f000 ff10 	bl	8002608 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017e8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80017ec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_FSMC_MspInit+0x84>)
 80017fe:	f000 ff03 	bl	8002608 <HAL_GPIO_Init>
 8001802:	e000      	b.n	8001806 <HAL_FSMC_MspInit+0x72>
    return;
 8001804:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20001ab0 	.word	0x20001ab0
 8001810:	40021000 	.word	0x40021000
 8001814:	40011800 	.word	0x40011800
 8001818:	40011400 	.word	0x40011400

0800181c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001824:	f7ff ffb6 	bl	8001794 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>
	...

08001838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LCD_DrawString(0, 0, "HardFault!");
 800183c:	4a02      	ldr	r2, [pc, #8]	; (8001848 <HardFault_Handler+0x10>)
 800183e:	2100      	movs	r1, #0
 8001840:	2000      	movs	r0, #0
 8001842:	f7fe ff63 	bl	800070c <LCD_DrawString>
 8001846:	e7f9      	b.n	800183c <HardFault_Handler+0x4>
 8001848:	08009a34 	.word	0x08009a34

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001886:	f000 f8d3 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM2_IRQHandler+0x10>)
 8001896:	f003 f979 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000168 	.word	0x20000168

080018a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM3_IRQHandler+0x10>)
 80018aa:	f003 f96f 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001b0 	.word	0x200001b0

080018b8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <SDIO_IRQHandler+0x10>)
 80018be:	f002 f863 	bl	8003988 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000e4 	.word	0x200000e4

080018cc <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA2_Channel4_5_IRQHandler+0x10>)
 80018d2:	f000 fc5d 	bl	8002190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000a0 	.word	0x200000a0

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f007 fb7c 	bl	800900c <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20010000 	.word	0x20010000
 8001940:	00000400 	.word	0x00000400
 8001944:	20001ab4 	.word	0x20001ab4
 8001948:	20001b00 	.word	0x20001b00

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	; (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197e:	f7ff ffe5 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f007 fb49 	bl	8009018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff f90b 	bl	8000ba0 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001994:	0800a164 	.word	0x0800a164
  ldr r2, =_sbss
 8001998:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800199c:	20001b00 	.word	0x20001b00

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f947 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fdaa 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f95f 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f927 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20001ab8 	.word	0x20001ab8

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20001ab8 	.word	0x20001ab8

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff90 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff2d 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff42 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff35 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e014      	b.n	8001d06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fc45 	bl	800157c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_DAC_Start+0x16>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e040      	b.n	8001da6 <HAL_DAC_Start+0x98>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d58:	2b3c      	cmp	r3, #60	; 0x3c
 8001d5a:	d11d      	bne.n	8001d98 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	e014      	b.n	8001d98 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	213c      	movs	r1, #60	; 0x3c
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0202 	orr.w	r2, r2, #2
 8001d96:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e004      	b.n	8001de4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3314      	adds	r3, #20
 8001de2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	461a      	mov	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	795b      	ldrb	r3, [r3, #5]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_DAC_ConfigChannel+0x18>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e03c      	b.n	8001e8a <HAL_DAC_ConfigChannel+0x92>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4013      	ands	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	22c0      	movs	r2, #192	; 0xc0
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e059      	b.n	8001f5e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_DMA_Init+0xd4>)
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d80f      	bhi.n	8001ed6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_DMA_Init+0xd8>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_DMA_Init+0xdc>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	009a      	lsls	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <HAL_DMA_Init+0xe0>)
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ed4:	e00e      	b.n	8001ef4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_DMA_Init+0xe4>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_DMA_Init+0xdc>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	009a      	lsls	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_DMA_Init+0xe8>)
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40020407 	.word	0x40020407
 8001f6c:	bffdfff8 	.word	0xbffdfff8
 8001f70:	cccccccd 	.word	0xcccccccd
 8001f74:	40020000 	.word	0x40020000
 8001f78:	bffdfbf8 	.word	0xbffdfbf8
 8001f7c:	40020400 	.word	0x40020400

08001f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d005      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e0d6      	b.n	8002150 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 020e 	bic.w	r2, r2, #14
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_DMA_Abort_IT+0x1dc>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d958      	bls.n	8002080 <HAL_DMA_Abort_IT+0x100>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_DMA_Abort_IT+0x1e0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04f      	beq.n	8002078 <HAL_DMA_Abort_IT+0xf8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a61      	ldr	r2, [pc, #388]	; (8002164 <HAL_DMA_Abort_IT+0x1e4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d048      	beq.n	8002074 <HAL_DMA_Abort_IT+0xf4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a60      	ldr	r2, [pc, #384]	; (8002168 <HAL_DMA_Abort_IT+0x1e8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_Abort_IT+0xee>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5e      	ldr	r2, [pc, #376]	; (800216c <HAL_DMA_Abort_IT+0x1ec>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d038      	beq.n	8002068 <HAL_DMA_Abort_IT+0xe8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_DMA_Abort_IT+0x1f0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d030      	beq.n	8002062 <HAL_DMA_Abort_IT+0xe2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5b      	ldr	r2, [pc, #364]	; (8002174 <HAL_DMA_Abort_IT+0x1f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d028      	beq.n	800205c <HAL_DMA_Abort_IT+0xdc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_DMA_Abort_IT+0x1dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d020      	beq.n	8002056 <HAL_DMA_Abort_IT+0xd6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_DMA_Abort_IT+0x1f8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_DMA_Abort_IT+0xd2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_DMA_Abort_IT+0x1fc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d012      	beq.n	800204e <HAL_DMA_Abort_IT+0xce>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_DMA_Abort_IT+0x200>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00a      	beq.n	8002048 <HAL_DMA_Abort_IT+0xc8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a53      	ldr	r2, [pc, #332]	; (8002184 <HAL_DMA_Abort_IT+0x204>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <HAL_DMA_Abort_IT+0xc2>
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	e01b      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002046:	e018      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204c:	e015      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 800204e:	2310      	movs	r3, #16
 8002050:	e013      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002052:	2301      	movs	r3, #1
 8002054:	e011      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205a:	e00e      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 800205c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002060:	e00b      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002066:	e008      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206c:	e005      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 800206e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002072:	e002      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002074:	2310      	movs	r3, #16
 8002076:	e000      	b.n	800207a <HAL_DMA_Abort_IT+0xfa>
 8002078:	2301      	movs	r3, #1
 800207a:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_DMA_Abort_IT+0x208>)
 800207c:	6053      	str	r3, [r2, #4]
 800207e:	e057      	b.n	8002130 <HAL_DMA_Abort_IT+0x1b0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a36      	ldr	r2, [pc, #216]	; (8002160 <HAL_DMA_Abort_IT+0x1e0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04f      	beq.n	800212a <HAL_DMA_Abort_IT+0x1aa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a35      	ldr	r2, [pc, #212]	; (8002164 <HAL_DMA_Abort_IT+0x1e4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d048      	beq.n	8002126 <HAL_DMA_Abort_IT+0x1a6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_DMA_Abort_IT+0x1e8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Abort_IT+0x1a0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_DMA_Abort_IT+0x1ec>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d038      	beq.n	800211a <HAL_DMA_Abort_IT+0x19a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_DMA_Abort_IT+0x1f0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d030      	beq.n	8002114 <HAL_DMA_Abort_IT+0x194>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_DMA_Abort_IT+0x1f4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d028      	beq.n	800210e <HAL_DMA_Abort_IT+0x18e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_DMA_Abort_IT+0x1dc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d020      	beq.n	8002108 <HAL_DMA_Abort_IT+0x188>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_DMA_Abort_IT+0x1f8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d019      	beq.n	8002104 <HAL_DMA_Abort_IT+0x184>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_DMA_Abort_IT+0x1fc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d012      	beq.n	8002100 <HAL_DMA_Abort_IT+0x180>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_DMA_Abort_IT+0x200>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00a      	beq.n	80020fa <HAL_DMA_Abort_IT+0x17a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_DMA_Abort_IT+0x204>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d102      	bne.n	80020f4 <HAL_DMA_Abort_IT+0x174>
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	e01b      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 80020f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f8:	e018      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	e015      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002100:	2310      	movs	r3, #16
 8002102:	e013      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002104:	2301      	movs	r3, #1
 8002106:	e011      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210c:	e00e      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 800210e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002112:	e00b      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002118:	e008      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	e005      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002124:	e002      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 8002126:	2310      	movs	r3, #16
 8002128:	e000      	b.n	800212c <HAL_DMA_Abort_IT+0x1ac>
 800212a:	2301      	movs	r3, #1
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_DMA_Abort_IT+0x20c>)
 800212e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
    } 
  }
  return status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40020080 	.word	0x40020080
 8002160:	40020008 	.word	0x40020008
 8002164:	4002001c 	.word	0x4002001c
 8002168:	40020030 	.word	0x40020030
 800216c:	40020044 	.word	0x40020044
 8002170:	40020058 	.word	0x40020058
 8002174:	4002006c 	.word	0x4002006c
 8002178:	40020408 	.word	0x40020408
 800217c:	4002041c 	.word	0x4002041c
 8002180:	40020430 	.word	0x40020430
 8002184:	40020444 	.word	0x40020444
 8002188:	40020400 	.word	0x40020400
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2204      	movs	r2, #4
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80f1 	beq.w	800239c <HAL_DMA_IRQHandler+0x20c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80eb 	beq.w	800239c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_DMA_IRQHandler+0x1d8>)
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d958      	bls.n	80022a2 <HAL_DMA_IRQHandler+0x112>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5d      	ldr	r2, [pc, #372]	; (800236c <HAL_DMA_IRQHandler+0x1dc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04f      	beq.n	800229a <HAL_DMA_IRQHandler+0x10a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_DMA_IRQHandler+0x1e0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d048      	beq.n	8002296 <HAL_DMA_IRQHandler+0x106>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5a      	ldr	r2, [pc, #360]	; (8002374 <HAL_DMA_IRQHandler+0x1e4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d040      	beq.n	8002290 <HAL_DMA_IRQHandler+0x100>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_DMA_IRQHandler+0x1e8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d038      	beq.n	800228a <HAL_DMA_IRQHandler+0xfa>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_DMA_IRQHandler+0x1ec>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d030      	beq.n	8002284 <HAL_DMA_IRQHandler+0xf4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_DMA_IRQHandler+0x1f0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d028      	beq.n	800227e <HAL_DMA_IRQHandler+0xee>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_DMA_IRQHandler+0x1d8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d020      	beq.n	8002278 <HAL_DMA_IRQHandler+0xe8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_DMA_IRQHandler+0x1f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d019      	beq.n	8002274 <HAL_DMA_IRQHandler+0xe4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_DMA_IRQHandler+0x1f8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d012      	beq.n	8002270 <HAL_DMA_IRQHandler+0xe0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_DMA_IRQHandler+0x1fc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00a      	beq.n	800226a <HAL_DMA_IRQHandler+0xda>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4d      	ldr	r2, [pc, #308]	; (8002390 <HAL_DMA_IRQHandler+0x200>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d102      	bne.n	8002264 <HAL_DMA_IRQHandler+0xd4>
 800225e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002262:	e01b      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002268:	e018      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 800226a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226e:	e015      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002270:	2340      	movs	r3, #64	; 0x40
 8002272:	e013      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002274:	2304      	movs	r3, #4
 8002276:	e011      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002278:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800227c:	e00e      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 800227e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002282:	e00b      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002288:	e008      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 800228a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800228e:	e005      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002294:	e002      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 8002296:	2340      	movs	r3, #64	; 0x40
 8002298:	e000      	b.n	800229c <HAL_DMA_IRQHandler+0x10c>
 800229a:	2304      	movs	r3, #4
 800229c:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <HAL_DMA_IRQHandler+0x204>)
 800229e:	6053      	str	r3, [r2, #4]
 80022a0:	e057      	b.n	8002352 <HAL_DMA_IRQHandler+0x1c2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a31      	ldr	r2, [pc, #196]	; (800236c <HAL_DMA_IRQHandler+0x1dc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04f      	beq.n	800234c <HAL_DMA_IRQHandler+0x1bc>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <HAL_DMA_IRQHandler+0x1e0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d048      	beq.n	8002348 <HAL_DMA_IRQHandler+0x1b8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2e      	ldr	r2, [pc, #184]	; (8002374 <HAL_DMA_IRQHandler+0x1e4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d040      	beq.n	8002342 <HAL_DMA_IRQHandler+0x1b2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <HAL_DMA_IRQHandler+0x1e8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d038      	beq.n	800233c <HAL_DMA_IRQHandler+0x1ac>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2b      	ldr	r2, [pc, #172]	; (800237c <HAL_DMA_IRQHandler+0x1ec>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d030      	beq.n	8002336 <HAL_DMA_IRQHandler+0x1a6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_DMA_IRQHandler+0x1f0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d028      	beq.n	8002330 <HAL_DMA_IRQHandler+0x1a0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_DMA_IRQHandler+0x1d8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d020      	beq.n	800232a <HAL_DMA_IRQHandler+0x19a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_DMA_IRQHandler+0x1f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_DMA_IRQHandler+0x196>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_DMA_IRQHandler+0x1f8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d012      	beq.n	8002322 <HAL_DMA_IRQHandler+0x192>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_DMA_IRQHandler+0x1fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00a      	beq.n	800231c <HAL_DMA_IRQHandler+0x18c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_DMA_IRQHandler+0x200>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d102      	bne.n	8002316 <HAL_DMA_IRQHandler+0x186>
 8002310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002314:	e01b      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002316:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800231a:	e018      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 800231c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002320:	e015      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002322:	2340      	movs	r3, #64	; 0x40
 8002324:	e013      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002326:	2304      	movs	r3, #4
 8002328:	e011      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 800232a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800232e:	e00e      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002330:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002334:	e00b      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002336:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800233a:	e008      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 800233c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002340:	e005      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	e002      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 8002348:	2340      	movs	r3, #64	; 0x40
 800234a:	e000      	b.n	800234e <HAL_DMA_IRQHandler+0x1be>
 800234c:	2304      	movs	r3, #4
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_DMA_IRQHandler+0x208>)
 8002350:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8136 	beq.w	80025c8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002364:	e130      	b.n	80025c8 <HAL_DMA_IRQHandler+0x438>
 8002366:	bf00      	nop
 8002368:	40020080 	.word	0x40020080
 800236c:	40020008 	.word	0x40020008
 8002370:	4002001c 	.word	0x4002001c
 8002374:	40020030 	.word	0x40020030
 8002378:	40020044 	.word	0x40020044
 800237c:	40020058 	.word	0x40020058
 8002380:	4002006c 	.word	0x4002006c
 8002384:	40020408 	.word	0x40020408
 8002388:	4002041c 	.word	0x4002041c
 800238c:	40020430 	.word	0x40020430
 8002390:	40020444 	.word	0x40020444
 8002394:	40020400 	.word	0x40020400
 8002398:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2202      	movs	r2, #2
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80dd 	beq.w	8002568 <HAL_DMA_IRQHandler+0x3d8>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80d7 	beq.w	8002568 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 020a 	bic.w	r2, r2, #10
 80023d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_DMA_IRQHandler+0x444>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d958      	bls.n	800249e <HAL_DMA_IRQHandler+0x30e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <HAL_DMA_IRQHandler+0x448>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d04f      	beq.n	8002496 <HAL_DMA_IRQHandler+0x306>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a78      	ldr	r2, [pc, #480]	; (80025dc <HAL_DMA_IRQHandler+0x44c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d048      	beq.n	8002492 <HAL_DMA_IRQHandler+0x302>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <HAL_DMA_IRQHandler+0x450>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d040      	beq.n	800248c <HAL_DMA_IRQHandler+0x2fc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a75      	ldr	r2, [pc, #468]	; (80025e4 <HAL_DMA_IRQHandler+0x454>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d038      	beq.n	8002486 <HAL_DMA_IRQHandler+0x2f6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a73      	ldr	r2, [pc, #460]	; (80025e8 <HAL_DMA_IRQHandler+0x458>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d030      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a72      	ldr	r2, [pc, #456]	; (80025ec <HAL_DMA_IRQHandler+0x45c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d028      	beq.n	800247a <HAL_DMA_IRQHandler+0x2ea>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a69      	ldr	r2, [pc, #420]	; (80025d4 <HAL_DMA_IRQHandler+0x444>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d020      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2e4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_DMA_IRQHandler+0x460>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d019      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2e0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <HAL_DMA_IRQHandler+0x464>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d012      	beq.n	800246c <HAL_DMA_IRQHandler+0x2dc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6b      	ldr	r2, [pc, #428]	; (80025f8 <HAL_DMA_IRQHandler+0x468>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00a      	beq.n	8002466 <HAL_DMA_IRQHandler+0x2d6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_DMA_IRQHandler+0x46c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d102      	bne.n	8002460 <HAL_DMA_IRQHandler+0x2d0>
 800245a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245e:	e01b      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002464:	e018      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246a:	e015      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 800246c:	2320      	movs	r3, #32
 800246e:	e013      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002470:	2302      	movs	r3, #2
 8002472:	e011      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002478:	e00e      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 800247a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800247e:	e00b      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002484:	e008      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248a:	e005      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 800248c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002490:	e002      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002492:	2320      	movs	r3, #32
 8002494:	e000      	b.n	8002498 <HAL_DMA_IRQHandler+0x308>
 8002496:	2302      	movs	r3, #2
 8002498:	4a59      	ldr	r2, [pc, #356]	; (8002600 <HAL_DMA_IRQHandler+0x470>)
 800249a:	6053      	str	r3, [r2, #4]
 800249c:	e057      	b.n	800254e <HAL_DMA_IRQHandler+0x3be>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_DMA_IRQHandler+0x448>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04f      	beq.n	8002548 <HAL_DMA_IRQHandler+0x3b8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_DMA_IRQHandler+0x44c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d048      	beq.n	8002544 <HAL_DMA_IRQHandler+0x3b4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_DMA_IRQHandler+0x450>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_DMA_IRQHandler+0x3ae>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <HAL_DMA_IRQHandler+0x454>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d038      	beq.n	8002538 <HAL_DMA_IRQHandler+0x3a8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a47      	ldr	r2, [pc, #284]	; (80025e8 <HAL_DMA_IRQHandler+0x458>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d030      	beq.n	8002532 <HAL_DMA_IRQHandler+0x3a2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a45      	ldr	r2, [pc, #276]	; (80025ec <HAL_DMA_IRQHandler+0x45c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d028      	beq.n	800252c <HAL_DMA_IRQHandler+0x39c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a3d      	ldr	r2, [pc, #244]	; (80025d4 <HAL_DMA_IRQHandler+0x444>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d020      	beq.n	8002526 <HAL_DMA_IRQHandler+0x396>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_DMA_IRQHandler+0x460>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_DMA_IRQHandler+0x392>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <HAL_DMA_IRQHandler+0x464>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_DMA_IRQHandler+0x38e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3e      	ldr	r2, [pc, #248]	; (80025f8 <HAL_DMA_IRQHandler+0x468>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00a      	beq.n	8002518 <HAL_DMA_IRQHandler+0x388>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <HAL_DMA_IRQHandler+0x46c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <HAL_DMA_IRQHandler+0x382>
 800250c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002510:	e01b      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	e018      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251c:	e015      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 800251e:	2320      	movs	r3, #32
 8002520:	e013      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002522:	2302      	movs	r3, #2
 8002524:	e011      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	e00e      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 800252c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002530:	e00b      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002536:	e008      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253c:	e005      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002542:	e002      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002544:	2320      	movs	r3, #32
 8002546:	e000      	b.n	800254a <HAL_DMA_IRQHandler+0x3ba>
 8002548:	2302      	movs	r3, #2
 800254a:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_DMA_IRQHandler+0x474>)
 800254c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d034      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002566:	e02f      	b.n	80025c8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2208      	movs	r2, #8
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_DMA_IRQHandler+0x43a>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d023      	beq.n	80025ca <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 020e 	bic.w	r2, r2, #14
 8002590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
    }
  }
  return;
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
}
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020080 	.word	0x40020080
 80025d8:	40020008 	.word	0x40020008
 80025dc:	4002001c 	.word	0x4002001c
 80025e0:	40020030 	.word	0x40020030
 80025e4:	40020044 	.word	0x40020044
 80025e8:	40020058 	.word	0x40020058
 80025ec:	4002006c 	.word	0x4002006c
 80025f0:	40020408 	.word	0x40020408
 80025f4:	4002041c 	.word	0x4002041c
 80025f8:	40020430 	.word	0x40020430
 80025fc:	40020444 	.word	0x40020444
 8002600:	40020400 	.word	0x40020400
 8002604:	40020000 	.word	0x40020000

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e179      	b.n	8002910 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800261c:	2201      	movs	r2, #1
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8168 	bne.w	800290a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a96      	ldr	r2, [pc, #600]	; (8002898 <HAL_GPIO_Init+0x290>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d05e      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002644:	4a94      	ldr	r2, [pc, #592]	; (8002898 <HAL_GPIO_Init+0x290>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d875      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800264a:	4a94      	ldr	r2, [pc, #592]	; (800289c <HAL_GPIO_Init+0x294>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d058      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002650:	4a92      	ldr	r2, [pc, #584]	; (800289c <HAL_GPIO_Init+0x294>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d86f      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002656:	4a92      	ldr	r2, [pc, #584]	; (80028a0 <HAL_GPIO_Init+0x298>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d052      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 800265c:	4a90      	ldr	r2, [pc, #576]	; (80028a0 <HAL_GPIO_Init+0x298>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d869      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002662:	4a90      	ldr	r2, [pc, #576]	; (80028a4 <HAL_GPIO_Init+0x29c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04c      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002668:	4a8e      	ldr	r2, [pc, #568]	; (80028a4 <HAL_GPIO_Init+0x29c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d863      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800266e:	4a8e      	ldr	r2, [pc, #568]	; (80028a8 <HAL_GPIO_Init+0x2a0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d046      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
 8002674:	4a8c      	ldr	r2, [pc, #560]	; (80028a8 <HAL_GPIO_Init+0x2a0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d85d      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 800267a:	2b12      	cmp	r3, #18
 800267c:	d82a      	bhi.n	80026d4 <HAL_GPIO_Init+0xcc>
 800267e:	2b12      	cmp	r3, #18
 8002680:	d859      	bhi.n	8002736 <HAL_GPIO_Init+0x12e>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <HAL_GPIO_Init+0x80>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002703 	.word	0x08002703
 800268c:	080026dd 	.word	0x080026dd
 8002690:	080026ef 	.word	0x080026ef
 8002694:	08002731 	.word	0x08002731
 8002698:	08002737 	.word	0x08002737
 800269c:	08002737 	.word	0x08002737
 80026a0:	08002737 	.word	0x08002737
 80026a4:	08002737 	.word	0x08002737
 80026a8:	08002737 	.word	0x08002737
 80026ac:	08002737 	.word	0x08002737
 80026b0:	08002737 	.word	0x08002737
 80026b4:	08002737 	.word	0x08002737
 80026b8:	08002737 	.word	0x08002737
 80026bc:	08002737 	.word	0x08002737
 80026c0:	08002737 	.word	0x08002737
 80026c4:	08002737 	.word	0x08002737
 80026c8:	08002737 	.word	0x08002737
 80026cc:	080026e5 	.word	0x080026e5
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	4a75      	ldr	r2, [pc, #468]	; (80028ac <HAL_GPIO_Init+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026da:	e02c      	b.n	8002736 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e029      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	623b      	str	r3, [r7, #32]
          break;
 80026ec:	e024      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	3308      	adds	r3, #8
 80026f4:	623b      	str	r3, [r7, #32]
          break;
 80026f6:	e01f      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	330c      	adds	r3, #12
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e01a      	b.n	8002738 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800270a:	2304      	movs	r3, #4
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e013      	b.n	8002738 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002718:	2308      	movs	r3, #8
 800271a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	611a      	str	r2, [r3, #16]
          break;
 8002722:	e009      	b.n	8002738 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002724:	2308      	movs	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	615a      	str	r2, [r3, #20]
          break;
 800272e:	e003      	b.n	8002738 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
          break;
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x130>
          break;
 8002736:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d801      	bhi.n	8002742 <HAL_GPIO_Init+0x13a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_Init+0x13e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d802      	bhi.n	8002754 <HAL_GPIO_Init+0x14c>
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	e002      	b.n	800275a <HAL_GPIO_Init+0x152>
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3b08      	subs	r3, #8
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	210f      	movs	r1, #15
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80c1 	beq.w	800290a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002788:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_GPIO_Init+0x2a8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a48      	ldr	r2, [pc, #288]	; (80028b0 <HAL_GPIO_Init+0x2a8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_GPIO_Init+0x2a8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a0:	4a44      	ldr	r2, [pc, #272]	; (80028b4 <HAL_GPIO_Init+0x2ac>)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_GPIO_Init+0x2b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d01f      	beq.n	800280c <HAL_GPIO_Init+0x204>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <HAL_GPIO_Init+0x2b4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d019      	beq.n	8002808 <HAL_GPIO_Init+0x200>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_GPIO_Init+0x2b8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <HAL_GPIO_Init+0x1fc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a39      	ldr	r2, [pc, #228]	; (80028c4 <HAL_GPIO_Init+0x2bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00d      	beq.n	8002800 <HAL_GPIO_Init+0x1f8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_GPIO_Init+0x2c0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d007      	beq.n	80027fc <HAL_GPIO_Init+0x1f4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a37      	ldr	r2, [pc, #220]	; (80028cc <HAL_GPIO_Init+0x2c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_GPIO_Init+0x1f0>
 80027f4:	2305      	movs	r3, #5
 80027f6:	e00a      	b.n	800280e <HAL_GPIO_Init+0x206>
 80027f8:	2306      	movs	r3, #6
 80027fa:	e008      	b.n	800280e <HAL_GPIO_Init+0x206>
 80027fc:	2304      	movs	r3, #4
 80027fe:	e006      	b.n	800280e <HAL_GPIO_Init+0x206>
 8002800:	2303      	movs	r3, #3
 8002802:	e004      	b.n	800280e <HAL_GPIO_Init+0x206>
 8002804:	2302      	movs	r3, #2
 8002806:	e002      	b.n	800280e <HAL_GPIO_Init+0x206>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_GPIO_Init+0x206>
 800280c:	2300      	movs	r3, #0
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	f002 0203 	and.w	r2, r2, #3
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4093      	lsls	r3, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800281e:	4925      	ldr	r1, [pc, #148]	; (80028b4 <HAL_GPIO_Init+0x2ac>)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4924      	ldr	r1, [pc, #144]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4920      	ldr	r1, [pc, #128]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002850:	4013      	ands	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	491a      	ldr	r1, [pc, #104]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 8002878:	4013      	ands	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d025      	beq.n	80028d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4910      	ldr	r1, [pc, #64]	; (80028d0 <HAL_GPIO_Init+0x2c8>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
 8002894:	e025      	b.n	80028e2 <HAL_GPIO_Init+0x2da>
 8002896:	bf00      	nop
 8002898:	10320000 	.word	0x10320000
 800289c:	10310000 	.word	0x10310000
 80028a0:	10220000 	.word	0x10220000
 80028a4:	10210000 	.word	0x10210000
 80028a8:	10120000 	.word	0x10120000
 80028ac:	10110000 	.word	0x10110000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40011800 	.word	0x40011800
 80028cc:	40011c00 	.word	0x40011c00
 80028d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_GPIO_Init+0x324>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4913      	ldr	r1, [pc, #76]	; (800292c <HAL_GPIO_Init+0x324>)
 80028de:	4013      	ands	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_GPIO_Init+0x324>)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_GPIO_Init+0x324>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60cb      	str	r3, [r1, #12]
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_GPIO_Init+0x324>)
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	43db      	mvns	r3, r3
 8002904:	4909      	ldr	r1, [pc, #36]	; (800292c <HAL_GPIO_Init+0x324>)
 8002906:	4013      	ands	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f ae7e 	bne.w	800261c <HAL_GPIO_Init+0x14>
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	372c      	adds	r7, #44	; 0x2c
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40010400 	.word	0x40010400

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43d9      	mvns	r1, r3
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	400b      	ands	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	611a      	str	r2, [r3, #16]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
	...

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e272      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24c      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fff0 	bl	8001a54 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe ffec 	bl	8001a54 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e200      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ffdc 	bl	8001a54 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ffd8 	bl	8001a54 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ec      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ff91 	bl	8001a54 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe ff8d 	bl	8001a54 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe ff70 	bl	8001a54 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe ff6c 	bl	8001a54 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e180      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe ff50 	bl	8001a54 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe ff4c 	bl	8001a54 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e160      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 faa6 	bl	8003128 <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe ff36 	bl	8001a54 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe ff32 	bl	8001a54 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e146      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b82      	ldr	r3, [pc, #520]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fef3 	bl	8001a54 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe feef 	bl	8001a54 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e103      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fea3 	bl	8001a54 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fe9f 	bl	8001a54 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fe8d 	bl	8001a54 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fe89 	bl	8001a54 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e09b      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fe5d 	bl	8001a54 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe fe59 	bl	8001a54 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e06d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4921      	ldr	r1, [pc, #132]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fe2d 	bl	8001a54 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fe29 	bl	8001a54 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fe16 	bl	8001a54 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fe12 	bl	8001a54 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e01e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e019      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x500>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4965      	ldr	r1, [pc, #404]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e073      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4936      	ldr	r1, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fd64 	bl	8001a54 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fd60 	bl	8001a54 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e053      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4922      	ldr	r1, [pc, #136]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fcc2 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	0800a084 	.word	0x0800a084
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b490      	push	{r4, r7}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_GetSysClockFreq+0xac>)
 8003074:	1d3c      	adds	r4, r7, #4
 8003076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800307c:	f240 2301 	movw	r3, #513	; 0x201
 8003080:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x40>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x46>
 80030aa:	e02b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ae:	623b      	str	r3, [r7, #32]
      break;
 80030b0:	e02b      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3328      	adds	r3, #40	; 0x28
 80030bc:	443b      	add	r3, r7
 80030be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0c5b      	lsrs	r3, r3, #17
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	3328      	adds	r3, #40	; 0x28
 80030da:	443b      	add	r3, r7
 80030dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030e6:	fb03 f202 	mul.w	r2, r3, r2
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	623b      	str	r3, [r7, #32]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003106:	623b      	str	r3, [r7, #32]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6a3b      	ldr	r3, [r7, #32]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc90      	pop	{r4, r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	08009a40 	.word	0x08009a40
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	003d0900 	.word	0x003d0900

08003128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <RCC_Delay+0x34>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <RCC_Delay+0x38>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a5b      	lsrs	r3, r3, #9
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003144:	bf00      	nop
  }
  while (Delay --);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	60fa      	str	r2, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f9      	bne.n	8003144 <RCC_Delay+0x1c>
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	20000000 	.word	0x20000000
 8003160:	10624dd3 	.word	0x10624dd3

08003164 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e022      	b.n	80031bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fe fa61 	bl	8001650 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2203      	movs	r2, #3
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f814 	bl	80031c4 <HAL_SD_InitCard>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00a      	b.n	80031bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af04      	add	r7, sp, #16
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80031e0:	2376      	movs	r3, #118	; 0x76
 80031e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681d      	ldr	r5, [r3, #0]
 80031e8:	466c      	mov	r4, sp
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fc:	4628      	mov	r0, r5
 80031fe:	f002 f919 	bl	8005434 <SDIO_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e04c      	b.n	80032ae <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_SD_InitCard+0xf4>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f002 f94e 	bl	80054c0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_SD_InitCard+0xf4>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 f8f4 	bl	8004418 <SD_PowerON>
 8003230:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e02e      	b.n	80032ae <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f001 f813 	bl	800427c <SD_InitCard>
 8003256:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e01b      	b.n	80032ae <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800327e:	4618      	mov	r0, r3
 8003280:	f002 f9ac 	bl	80055dc <SDMMC_CmdBlockLength>
 8003284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <HAL_SD_InitCard+0xf8>)
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bdb0      	pop	{r4, r5, r7, pc}
 80032b6:	bf00      	nop
 80032b8:	423000a0 	.word	0x423000a0
 80032bc:	004005ff 	.word	0x004005ff

080032c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b092      	sub	sp, #72	; 0x48
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80032ce:	f7fe fbc1 	bl	8001a54 <HAL_GetTick>
 80032d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1bd      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 81b0 	bne.w	8003660 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	429a      	cmp	r2, r3
 8003312:	d907      	bls.n	8003324 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e1a4      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	2b01      	cmp	r3, #1
 800333a:	d002      	beq.n	8003342 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800334e:	2390      	movs	r3, #144	; 0x90
 8003350:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003352:	2302      	movs	r3, #2
 8003354:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800335a:	2301      	movs	r3, #1
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f107 0214 	add.w	r2, r7, #20
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f002 f90c 	bl	8005586 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d90a      	bls.n	800338a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003380:	4618      	mov	r0, r3
 8003382:	f002 f96f 	bl	8005664 <SDMMC_CmdReadMultiBlock>
 8003386:	6478      	str	r0, [r7, #68]	; 0x44
 8003388:	e009      	b.n	800339e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003396:	4618      	mov	r0, r3
 8003398:	f002 f942 	bl	8005620 <SDMMC_CmdReadSingleBlock>
 800339c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7a      	ldr	r2, [pc, #488]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e151      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033ce:	e061      	b.n	8003494 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d03c      	beq.n	8003458 <HAL_SD_ReadBlocks+0x198>
 80033de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d039      	beq.n	8003458 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
 80033e8:	e033      	b.n	8003452 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 f84a 	bl	8005488 <SDIO_ReadFIFO>
 80033f4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	3301      	adds	r3, #1
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003406:	3b01      	subs	r3, #1
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	b2da      	uxtb	r2, r3
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	3301      	adds	r3, #1
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	3b01      	subs	r3, #1
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	b2da      	uxtb	r2, r3
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	3301      	adds	r3, #1
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	3b01      	subs	r3, #1
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	0e1b      	lsrs	r3, r3, #24
 800343a:	b2da      	uxtb	r2, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	3301      	adds	r3, #1
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003448:	3b01      	subs	r3, #1
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	3301      	adds	r3, #1
 8003450:	643b      	str	r3, [r7, #64]	; 0x40
 8003452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003454:	2b07      	cmp	r3, #7
 8003456:	d9c8      	bls.n	80033ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003458:	f7fe fafc 	bl	8001a54 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003464:	429a      	cmp	r2, r3
 8003466:	d902      	bls.n	800346e <HAL_SD_ReadBlocks+0x1ae>
 8003468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d112      	bne.n	8003494 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0ec      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349a:	f240 332a 	movw	r3, #810	; 0x32a
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d095      	beq.n	80033d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d022      	beq.n	80034f8 <HAL_SD_ReadBlocks+0x238>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d91f      	bls.n	80034f8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d01b      	beq.n	80034f8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 f933 	bl	8005730 <SDMMC_CmdStopTransfer>
 80034ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80034cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d012      	beq.n	80034f8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0ba      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d012      	beq.n	800352c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0a0      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e086      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d063      	beq.n	8003636 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_SD_ReadBlocks+0x2d4>)
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e06c      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
 8003594:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f001 ff73 	bl	8005488 <SDIO_ReadFIFO>
 80035a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	3301      	adds	r3, #1
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	3b01      	subs	r3, #1
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	3301      	adds	r3, #1
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	3b01      	subs	r3, #1
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	3301      	adds	r3, #1
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e0:	3b01      	subs	r3, #1
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	3301      	adds	r3, #1
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80035f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f6:	3b01      	subs	r3, #1
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035fa:	f7fe fa2b 	bl	8001a54 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003606:	429a      	cmp	r2, r3
 8003608:	d902      	bls.n	8003610 <HAL_SD_ReadBlocks+0x350>
 800360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360c:	2b00      	cmp	r3, #0
 800360e:	d112      	bne.n	8003636 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_SD_ReadBlocks+0x3b8>)
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e01b      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SD_ReadBlocks+0x38a>
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1a6      	bne.n	8003598 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003652:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e006      	b.n	800366e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3748      	adds	r7, #72	; 0x48
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	004005ff 	.word	0x004005ff

0800367c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b092      	sub	sp, #72	; 0x48
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800368a:	f7fe f9e3 	bl	8001a54 <HAL_GetTick>
 800368e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d107      	bne.n	80036ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e166      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	f040 8159 	bne.w	800396e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d907      	bls.n	80036e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e14d      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2203      	movs	r2, #3
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	025b      	lsls	r3, r3, #9
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	025b      	lsls	r3, r3, #9
 8003708:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800370a:	2390      	movs	r3, #144	; 0x90
 800370c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003712:	2300      	movs	r3, #0
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003716:	2301      	movs	r3, #1
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f107 0218 	add.w	r2, r7, #24
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f001 ff2e 	bl	8005586 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d90a      	bls.n	8003746 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800373c:	4618      	mov	r0, r3
 800373e:	f001 ffd5 	bl	80056ec <SDMMC_CmdWriteMultiBlock>
 8003742:	6478      	str	r0, [r7, #68]	; 0x44
 8003744:	e009      	b.n	800375a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2210      	movs	r2, #16
 800374a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003752:	4618      	mov	r0, r3
 8003754:	f001 ffa8 	bl	80056a8 <SDMMC_CmdWriteSingleBlock>
 8003758:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a87      	ldr	r2, [pc, #540]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0fa      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800378a:	e065      	b.n	8003858 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_SD_WriteBlocks+0x1a0>
 800379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03d      	beq.n	800381c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	643b      	str	r3, [r7, #64]	; 0x40
 80037a4:	e037      	b.n	8003816 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	3301      	adds	r3, #1
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b4:	3b01      	subs	r3, #1
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	3301      	adds	r3, #1
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037cc:	3b01      	subs	r3, #1
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	3301      	adds	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	3b01      	subs	r3, #1
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	061a      	lsls	r2, r3, #24
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	3301      	adds	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	3b01      	subs	r3, #1
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f107 0214 	add.w	r2, r7, #20
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fe48 	bl	80054a0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003812:	3301      	adds	r3, #1
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
 8003816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003818:	2b07      	cmp	r3, #7
 800381a:	d9c4      	bls.n	80037a6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800381c:	f7fe f91a 	bl	8001a54 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003828:	429a      	cmp	r2, r3
 800382a:	d902      	bls.n	8003832 <HAL_SD_WriteBlocks+0x1b6>
 800382c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d112      	bne.n	8003858 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a53      	ldr	r2, [pc, #332]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e091      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	f240 331a 	movw	r3, #794	; 0x31a
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d091      	beq.n	800378c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_SD_WriteBlocks+0x240>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d91f      	bls.n	80038bc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	2b03      	cmp	r3, #3
 8003882:	d01b      	beq.n	80038bc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f001 ff51 	bl	8005730 <SDMMC_CmdStopTransfer>
 800388e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2b00      	cmp	r3, #0
 8003894:	d012      	beq.n	80038bc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e05f      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2d      	ldr	r2, [pc, #180]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e045      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e02b      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d012      	beq.n	8003958 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a13      	ldr	r2, [pc, #76]	; (8003984 <HAL_SD_WriteBlocks+0x308>)
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e011      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003960:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e006      	b.n	800397c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3748      	adds	r7, #72	; 0x48
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	004005ff 	.word	0x004005ff

08003988 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_SD_IRQHandler+0x2e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 ff51 	bl	8004856 <SD_Read_IT>
 80039b4:	e157      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 808f 	beq.w	8003ae4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80039de:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80039e2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d039      	beq.n	8003a72 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_SD_IRQHandler+0x8a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d011      	beq.n	8003a36 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fe8a 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003a1c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f921 	bl	8003c78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_SD_IRQHandler+0xda>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f002 fafc 	bl	8006060 <HAL_SD_RxCpltCallback>
 8003a68:	e0fd      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f002 faee 	bl	800604c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a70:	e0f9      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80f4 	beq.w	8003c66 <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fe4f 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003a92:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8e6 	bl	8003c78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80d7 	bne.w	8003c66 <HAL_SD_IRQHandler+0x2de>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 80d1 	bne.w	8003c66 <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0208 	bic.w	r2, r2, #8
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f002 fab5 	bl	800604c <HAL_SD_TxCpltCallback>
}
 8003ae2:	e0c0      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_SD_IRQHandler+0x17c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fefb 	bl	80048f8 <SD_Write_IT>
 8003b02:	e0b0      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a9 	beq.w	8003c66 <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	f043 0208 	orr.w	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	f043 0210 	orr.w	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f240 723a 	movw	r2, #1850	; 0x73a
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003b94:	f023 0302 	bic.w	r3, r3, #2
 8003b98:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fdc6 	bl	8005730 <SDMMC_CmdStopTransfer>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f855 	bl	8003c78 <HAL_SD_ErrorCallback>
}
 8003bce:	e04a      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d045      	beq.n	8003c66 <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_SD_IRQHandler+0x266>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_SD_IRQHandler+0x2e8>)
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f9c0 	bl	8001f80 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d02f      	beq.n	8003c66 <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fac8 	bl	80041a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c10:	e029      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <HAL_SD_IRQHandler+0x29e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <HAL_SD_IRQHandler+0x2ec>)
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f9a4 	bl	8001f80 <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fae3 	bl	800420e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c48:	e00d      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f002 f9ea 	bl	8006038 <HAL_SD_AbortCallback>
}
 8003c64:	e7ff      	b.n	8003c66 <HAL_SD_IRQHandler+0x2de>
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	080041a1 	.word	0x080041a1
 8003c74:	0800420f 	.word	0x0800420f

08003c78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	0f9b      	lsrs	r3, r3, #30
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	0e9b      	lsrs	r3, r3, #26
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb8:	0e1b      	lsrs	r3, r3, #24
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	0d1b      	lsrs	r3, r3, #20
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0a:	0bdb      	lsrs	r3, r3, #15
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1c:	0b9b      	lsrs	r3, r3, #14
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2e:	0b5b      	lsrs	r3, r3, #13
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d40:	0b1b      	lsrs	r3, r3, #12
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d163      	bne.n	8003e24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d60:	009a      	lsls	r2, r3, #2
 8003d62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d6c:	0f92      	lsrs	r2, r2, #30
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d78:	0edb      	lsrs	r3, r3, #27
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8a:	0e1b      	lsrs	r3, r3, #24
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9c:	0d5b      	lsrs	r3, r3, #21
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	0c9b      	lsrs	r3, r3, #18
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc0:	0bdb      	lsrs	r3, r3, #15
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	7e1b      	ldrb	r3, [r3, #24]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	3302      	adds	r3, #2
 8003de4:	2201      	movs	r2, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e10:	0a52      	lsrs	r2, r2, #9
 8003e12:	fb03 f202 	mul.w	r2, r3, r2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
 8003e22:	e031      	b.n	8003e88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d11d      	bne.n	8003e68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	3301      	adds	r3, #1
 8003e48:	029a      	lsls	r2, r3, #10
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
 8003e66:	e00f      	b.n	8003e88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_SD_GetCardCSD+0x344>)
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e09d      	b.n	8003fc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8c:	0b9b      	lsrs	r3, r3, #14
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9e:	09db      	lsrs	r3, r3, #7
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	0fdb      	lsrs	r3, r3, #31
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	0f5b      	lsrs	r3, r3, #29
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	0e9b      	lsrs	r3, r3, #26
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	0d9b      	lsrs	r3, r3, #22
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	0d5b      	lsrs	r3, r3, #21
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	0bdb      	lsrs	r3, r3, #15
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	0b9b      	lsrs	r3, r3, #14
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	0b1b      	lsrs	r3, r3, #12
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	0a9b      	lsrs	r3, r3, #10
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	004005ff 	.word	0x004005ff

08003fd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
	...

0800402c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af04      	add	r7, sp, #16
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2203      	movs	r2, #3
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	2b03      	cmp	r3, #3
 800404a:	d02e      	beq.n	80040aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d106      	bne.n	8004062 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
 8004060:	e029      	b.n	80040b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	d10a      	bne.n	8004080 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa8a 	bl	8004584 <SD_WideBus_Enable>
 8004070:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
 800407e:	e01a      	b.n	80040b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fac7 	bl	800461a <SD_WideBus_Disable>
 800408c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
 800409a:	e00c      	b.n	80040b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
 80040a8:	e005      	b.n	80040b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_SD_ConfigWideBusOperation+0x130>)
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040d4:	e01f      	b.n	8004116 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681d      	ldr	r5, [r3, #0]
 80040fc:	466c      	mov	r4, sp
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004110:	4628      	mov	r0, r5
 8004112:	f001 f98f 	bl	8005434 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fa5c 	bl	80055dc <SDMMC_CmdBlockLength>
 8004124:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800414e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004152:	4618      	mov	r0, r3
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bdb0      	pop	{r4, r5, r7, pc}
 800415a:	bf00      	nop
 800415c:	004005ff 	.word	0x004005ff

08004160 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9de 	bl	8004534 <SD_SendStatus>
 8004178:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0a5b      	lsrs	r3, r3, #9
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004196:	693b      	ldr	r3, [r7, #16]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff ffd1 	bl	8004160 <HAL_SD_GetCardState>
 80041be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d002      	beq.n	80041da <SD_DMATxAbort+0x3a>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d10a      	bne.n	80041f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 faa6 	bl	8005730 <SDMMC_CmdStopTransfer>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f001 ff1d 	bl	8006038 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041fe:	e002      	b.n	8004206 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fd39 	bl	8003c78 <HAL_SD_ErrorCallback>
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f240 523a 	movw	r2, #1338	; 0x53a
 8004224:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff ff9a 	bl	8004160 <HAL_SD_GetCardState>
 800422c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b06      	cmp	r3, #6
 8004240:	d002      	beq.n	8004248 <SD_DMARxAbort+0x3a>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d10a      	bne.n	800425e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fa6f 	bl	8005730 <SDMMC_CmdStopTransfer>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f001 fee6 	bl	8006038 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800426c:	e002      	b.n	8004274 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fd02 	bl	8003c78 <HAL_SD_ErrorCallback>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	b094      	sub	sp, #80	; 0x50
 8004280:	af04      	add	r7, sp, #16
 8004282:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004284:	2301      	movs	r3, #1
 8004286:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f926 	bl	80054de <SDIO_GetPowerState>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004298:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800429c:	e0b8      	b.n	8004410 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d02f      	beq.n	8004306 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 fb4a 	bl	8005944 <SDMMC_CmdSendCID>
 80042b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <SD_InitCard+0x40>
    {
      return errorstate;
 80042b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ba:	e0a9      	b.n	8004410 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f94d 	bl	8005562 <SDIO_GetResponse>
 80042c8:	4602      	mov	r2, r0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2104      	movs	r1, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 f944 	bl	8005562 <SDIO_GetResponse>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2108      	movs	r1, #8
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f93b 	bl	8005562 <SDIO_GetResponse>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	210c      	movs	r1, #12
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 f932 	bl	8005562 <SDIO_GetResponse>
 80042fe:	4602      	mov	r2, r0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	2b03      	cmp	r3, #3
 800430c:	d00d      	beq.n	800432a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f107 020e 	add.w	r2, r7, #14
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fb50 	bl	80059be <SDMMC_CmdSetRelAdd>
 800431e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <SD_InitCard+0xae>
    {
      return errorstate;
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	e072      	b.n	8004410 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	2b03      	cmp	r3, #3
 8004330:	d036      	beq.n	80043a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f001 fb1a 	bl	8005980 <SDMMC_CmdSendCSD>
 800434c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004356:	e05b      	b.n	8004410 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f001 f8ff 	bl	8005562 <SDIO_GetResponse>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2104      	movs	r1, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f001 f8f6 	bl	8005562 <SDIO_GetResponse>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2108      	movs	r1, #8
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f8ed 	bl	8005562 <SDIO_GetResponse>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	210c      	movs	r1, #12
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f8e4 	bl	8005562 <SDIO_GetResponse>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2104      	movs	r1, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 f8db 	bl	8005562 <SDIO_GetResponse>
 80043ac:	4603      	mov	r3, r0
 80043ae:	0d1a      	lsrs	r2, r3, #20
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fc66 	bl	8003c8c <HAL_SD_GetCardCSD>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ca:	e021      	b.n	8004410 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	2200      	movs	r2, #0
 80043d8:	461c      	mov	r4, r3
 80043da:	4615      	mov	r5, r2
 80043dc:	4622      	mov	r2, r4
 80043de:	462b      	mov	r3, r5
 80043e0:	4608      	mov	r0, r1
 80043e2:	f001 f9c7 	bl	8005774 <SDMMC_CmdSelDesel>
 80043e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80043ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f0:	e00e      	b.n	8004410 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681d      	ldr	r5, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	466c      	mov	r4, sp
 80043fa:	f103 0210 	add.w	r2, r3, #16
 80043fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004404:	3304      	adds	r3, #4
 8004406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004408:	4628      	mov	r0, r5
 800440a:	f001 f813 	bl	8005434 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3740      	adds	r7, #64	; 0x40
 8004414:	46bd      	mov	sp, r7
 8004416:	bdb0      	pop	{r4, r5, r7, pc}

08004418 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f001 f9c2 	bl	80057ba <SDMMC_CmdGoIdleState>
 8004436:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <SD_PowerON+0x2a>
  {
    return errorstate;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	e072      	b.n	8004528 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f9d5 	bl	80057f6 <SDMMC_CmdOperCond>
 800444c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f9ab 	bl	80057ba <SDMMC_CmdGoIdleState>
 8004464:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <SD_PowerON+0x5e>
    {
      return errorstate;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	e05b      	b.n	8004528 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	2b01      	cmp	r3, #1
 800447c:	d137      	bne.n	80044ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f9d5 	bl	8005834 <SDMMC_CmdAppCommand>
 800448a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02d      	beq.n	80044ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004492:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004496:	e047      	b.n	8004528 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f9c8 	bl	8005834 <SDMMC_CmdAppCommand>
 80044a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	e03b      	b.n	8004528 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	491e      	ldr	r1, [pc, #120]	; (8004530 <SD_PowerON+0x118>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 f9de 	bl	8005878 <SDMMC_CmdAppOperCommand>
 80044bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044c8:	e02e      	b.n	8004528 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f846 	bl	8005562 <SDIO_GetResponse>
 80044d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	0fdb      	lsrs	r3, r3, #31
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <SD_PowerON+0xcc>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <SD_PowerON+0xce>
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]

    count++;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d802      	bhi.n	80044fe <SD_PowerON+0xe6>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0cc      	beq.n	8004498 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004504:	4293      	cmp	r3, r2
 8004506:	d902      	bls.n	800450e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800450c:	e00c      	b.n	8004528 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
 800451e:	e002      	b.n	8004526 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	c1100000 	.word	0xc1100000

08004534 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004548:	e018      	b.n	800457c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f001 fa52 	bl	8005a00 <SDMMC_CmdSendStatus>
 800455c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e009      	b.n	800457c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fff7 	bl	8005562 <SDIO_GetResponse>
 8004574:	4602      	mov	r2, r0
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ffe1 	bl	8005562 <SDIO_GetResponse>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045aa:	d102      	bne.n	80045b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b0:	e02f      	b.n	8004612 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f879 	bl	80046b0 <SD_FindSCR>
 80045be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	e023      	b.n	8004612 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f001 f927 	bl	8005834 <SDMMC_CmdAppCommand>
 80045e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	e00f      	b.n	8004612 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2102      	movs	r1, #2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 f960 	bl	80058be <SDMMC_CmdBusWidth>
 80045fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e003      	b.n	8004612 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800460a:	2300      	movs	r3, #0
 800460c:	e001      	b.n	8004612 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800460e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 ff96 	bl	8005562 <SDIO_GetResponse>
 8004636:	4603      	mov	r3, r0
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004640:	d102      	bne.n	8004648 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004646:	e02f      	b.n	80046a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f82e 	bl	80046b0 <SD_FindSCR>
 8004654:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	e023      	b.n	80046a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01c      	beq.n	80046a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f001 f8dc 	bl	8005834 <SDMMC_CmdAppCommand>
 800467c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	e00f      	b.n	80046a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 f915 	bl	80058be <SDMMC_CmdBusWidth>
 8004694:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e003      	b.n	80046a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e001      	b.n	80046a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08f      	sub	sp, #60	; 0x3c
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80046ba:	f7fd f9cb 	bl	8001a54 <HAL_GetTick>
 80046be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2108      	movs	r1, #8
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ff80 	bl	80055dc <SDMMC_CmdBlockLength>
 80046dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	e0b2      	b.n	800484e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f001 f89d 	bl	8005834 <SDMMC_CmdAppCommand>
 80046fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	e0a3      	b.n	800484e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800470c:	2308      	movs	r3, #8
 800470e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004710:	2330      	movs	r3, #48	; 0x30
 8004712:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004714:	2302      	movs	r3, #2
 8004716:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800471c:	2301      	movs	r3, #1
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f107 0210 	add.w	r2, r7, #16
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ff2b 	bl	8005586 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f8e4 	bl	8005902 <SDMMC_CmdSendSCR>
 800473a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02a      	beq.n	8004798 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	e083      	b.n	800484e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	f107 0208 	add.w	r2, r7, #8
 8004760:	18d4      	adds	r4, r2, r3
 8004762:	4608      	mov	r0, r1
 8004764:	f000 fe90 	bl	8005488 <SDIO_ReadFIFO>
 8004768:	4603      	mov	r3, r0
 800476a:	6023      	str	r3, [r4, #0]
      index++;
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	3301      	adds	r3, #1
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
 8004772:	e006      	b.n	8004782 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004782:	f7fd f967 	bl	8001a54 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d102      	bne.n	8004798 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004796:	e05a      	b.n	800484e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0cf      	beq.n	8004746 <SD_FindSCR+0x96>
 80047a6:	e000      	b.n	80047aa <SD_FindSCR+0xfa>
      break;
 80047a8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80047c0:	2308      	movs	r3, #8
 80047c2:	e044      	b.n	800484e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2202      	movs	r2, #2
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80047da:	2302      	movs	r3, #2
 80047dc:	e037      	b.n	800484e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80047f4:	2320      	movs	r3, #32
 80047f6:	e02a      	b.n	800484e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8004800:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	061a      	lsls	r2, r3, #24
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800480e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004818:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	601a      	str	r2, [r3, #0]
    scr++;
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	3304      	adds	r3, #4
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	061a      	lsls	r2, r3, #24
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004836:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004840:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	373c      	adds	r7, #60	; 0x3c
 8004852:	46bd      	mov	sp, r7
 8004854:	bd90      	pop	{r4, r7, pc}

08004856 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03f      	beq.n	80048f0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e033      	b.n	80048de <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fe04 	bl	8005488 <SDIO_ReadFIFO>
 8004880:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	701a      	strb	r2, [r3, #0]
      tmp++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3b01      	subs	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0a1b      	lsrs	r3, r3, #8
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3b01      	subs	r3, #1
 80048c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	0e1b      	lsrs	r3, r3, #24
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b07      	cmp	r3, #7
 80048e2:	d9c8      	bls.n	8004876 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80048f0:	bf00      	nop
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d043      	beq.n	800499a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e037      	b.n	8004988 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	3b01      	subs	r3, #1
 8004928:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	021a      	lsls	r2, r3, #8
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3b01      	subs	r3, #1
 8004940:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	041a      	lsls	r2, r3, #16
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3b01      	subs	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	061a      	lsls	r2, r3, #24
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3b01      	subs	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f107 0208 	add.w	r2, r7, #8
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fd8f 	bl	80054a0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	3301      	adds	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b07      	cmp	r3, #7
 800498c:	d9c4      	bls.n	8004918 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <HAL_SRAM_Init+0x1c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049bc:	d101      	bne.n	80049c2 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e038      	b.n	8004a34 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7fc ff20 	bl	800181c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fc4e 	bl	8005288 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	461a      	mov	r2, r3
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	f000 fcb0 	bl	800535c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6858      	ldr	r0, [r3, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	f000 fcdb 	bl	80053c4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6892      	ldr	r2, [r2, #8]
 8004a22:	f041 0101 	orr.w	r1, r1, #1
 8004a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e041      	b.n	8004ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fe56 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f000 fa76 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d001      	beq.n	8004af4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e03c      	b.n	8004b6e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_TIM_Base_Start+0x9c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_TIM_Base_Start+0x5c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_TIM_Base_Start+0xa0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_TIM_Base_Start+0x5c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d00e      	beq.n	8004b38 <HAL_TIM_Base_Start+0x5c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_TIM_Base_Start+0xa4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_TIM_Base_Start+0x5c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <HAL_TIM_Base_Start+0xa8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_TIM_Base_Start+0x5c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <HAL_TIM_Base_Start+0xac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d111      	bne.n	8004b5c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d010      	beq.n	8004b6c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	e007      	b.n	8004b6c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00

08004b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9b1 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9a4 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f9b3 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f987 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f97a 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f989 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0208 	mvn.w	r2, #8
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f95d 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f950 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f95f 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0210 	mvn.w	r2, #16
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f933 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f926 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f935 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fbd0 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa9d 	bl	8005276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8f9 	bl	8004f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0220 	mvn.w	r2, #32
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa68 	bl	8005264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b3      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x180>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d03e      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xd0>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df2:	f200 8087 	bhi.w	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	f000 8085 	beq.w	8004f08 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d87f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d01a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xa2>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d87b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d050      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x116>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d877      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d03c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xf6>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d873      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d058      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x136>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d86f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d064      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d86b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d060      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d867      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d05a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e3c:	e062      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 f97e 	bl	800514e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e04e      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f000 f967 	bl	800514e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8e:	609a      	str	r2, [r3, #8]
      break;
 8004e90:	e03b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 f8de 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2150      	movs	r1, #80	; 0x50
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f935 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e02b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 f8fc 	bl	80050bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2160      	movs	r1, #96	; 0x60
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f925 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e01b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 f8be 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f915 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e00b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 f90c 	bl	800511a <TIM_ITRx_SetConfig>
        break;
 8004f02:	e002      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a33      	ldr	r2, [pc, #204]	; (800504c <TIM_Base_SetConfig+0xe0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a32      	ldr	r2, [pc, #200]	; (8005050 <TIM_Base_SetConfig+0xe4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	; (8005054 <TIM_Base_SetConfig+0xe8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <TIM_Base_SetConfig+0xec>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2d      	ldr	r2, [pc, #180]	; (800505c <TIM_Base_SetConfig+0xf0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	; (800504c <TIM_Base_SetConfig+0xe0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_Base_SetConfig+0x82>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <TIM_Base_SetConfig+0xe4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_Base_SetConfig+0x82>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0x82>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <TIM_Base_SetConfig+0xe8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <TIM_Base_SetConfig+0xec>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1c      	ldr	r2, [pc, #112]	; (800505c <TIM_Base_SetConfig+0xf0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <TIM_Base_SetConfig+0xe0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0xc8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <TIM_Base_SetConfig+0xe4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00

08005060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 030a 	bic.w	r3, r3, #10
 800509c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f023 0210 	bic.w	r2, r3, #16
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	031b      	lsls	r3, r3, #12
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	f043 0307 	orr.w	r3, r3, #7
 800513c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514e:	b480      	push	{r7}
 8005150:	b087      	sub	sp, #28
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	021a      	lsls	r2, r3, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	431a      	orrs	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	609a      	str	r2, [r3, #8]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e050      	b.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d00e      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a14      	ldr	r2, [pc, #80]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a12      	ldr	r2, [pc, #72]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10c      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4313      	orrs	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00

08005264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	f023 0101 	bic.w	r1, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d102      	bne.n	80052b8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e001      	b.n	80052bc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80052c8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80052ce:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80052d4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80052da:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80052e0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80052e6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80052ec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80052f2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80052f8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <FSMC_NORSRAM_Init+0xd0>)
 8005318:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005320:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005328:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	43db      	mvns	r3, r3
 8005338:	ea02 0103 	and.w	r1, r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4319      	orrs	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	0008fb7f 	.word	0x0008fb7f

0800535c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005372:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	431a      	orrs	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	431a      	orrs	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	431a      	orrs	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	3b01      	subs	r3, #1
 8005398:	051b      	lsls	r3, r3, #20
 800539a:	431a      	orrs	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	3b02      	subs	r3, #2
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	3201      	adds	r2, #1
 80053b0:	4319      	orrs	r1, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d8:	d11d      	bne.n	8005416 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	6811      	ldr	r1, [r2, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	6852      	ldr	r2, [r2, #4]
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	4311      	orrs	r1, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	6892      	ldr	r2, [r2, #8]
 80053f6:	0212      	lsls	r2, r2, #8
 80053f8:	4311      	orrs	r1, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	6992      	ldr	r2, [r2, #24]
 80053fe:	4311      	orrs	r1, r2
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	68d2      	ldr	r2, [r2, #12]
 8005404:	0412      	lsls	r2, r2, #16
 8005406:	430a      	orrs	r2, r1
 8005408:	ea43 0102 	orr.w	r1, r3, r2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005414:	e005      	b.n	8005422 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800541e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	cff00000 	.word	0xcff00000

08005434 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005434:	b084      	sub	sp, #16
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	f107 001c 	add.w	r0, r7, #28
 8005442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800544a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800544c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800544e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005452:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005456:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800545a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800545e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800546e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	b004      	add	sp, #16
 8005486:	4770      	bx	lr

08005488 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2203      	movs	r2, #3
 80054cc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80054ce:	2002      	movs	r0, #2
 80054d0:	f7fc faca 	bl	8001a68 <HAL_Delay>
  
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0303 	and.w	r3, r3, #3
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005516:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800551c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005522:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005532:	f023 030f 	bic.w	r3, r3, #15
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3314      	adds	r3, #20
 8005570:	461a      	mov	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4413      	add	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
}  
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055ac:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80055b2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80055b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0

}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80055ea:	2310      	movs	r3, #16
 80055ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055fc:	f107 0308 	add.w	r3, r7, #8
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff78 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	2110      	movs	r1, #16
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa42 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005616:	69fb      	ldr	r3, [r7, #28]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800562e:	2311      	movs	r3, #17
 8005630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800563a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005640:	f107 0308 	add.w	r3, r7, #8
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ff56 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	2111      	movs	r1, #17
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa20 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800565a:	69fb      	ldr	r3, [r7, #28]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005672:	2312      	movs	r3, #18
 8005674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff34 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	2112      	movs	r1, #18
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9fe 	bl	8005a98 <SDMMC_GetCmdResp1>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80056b6:	2318      	movs	r3, #24
 80056b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ba:	2340      	movs	r3, #64	; 0x40
 80056bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff12 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	2118      	movs	r1, #24
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9dc 	bl	8005a98 <SDMMC_GetCmdResp1>
 80056e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80056fa:	2319      	movs	r3, #25
 80056fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056fe:	2340      	movs	r3, #64	; 0x40
 8005700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fef0 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	2119      	movs	r1, #25
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9ba 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005726:	69fb      	ldr	r3, [r7, #28]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800573c:	230c      	movs	r3, #12
 800573e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fecf 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800575a:	4a05      	ldr	r2, [pc, #20]	; (8005770 <SDMMC_CmdStopTransfer+0x40>)
 800575c:	210c      	movs	r1, #12
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f99a 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	05f5e100 	.word	0x05f5e100

08005774 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005784:	2307      	movs	r3, #7
 8005786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff feab 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	2107      	movs	r1, #7
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f975 	bl	8005a98 <SDMMC_GetCmdResp1>
 80057ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b088      	sub	sp, #32
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fe8a 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f92d 	bl	8005a44 <SDMMC_GetCmdError>
 80057ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80057fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005804:	2308      	movs	r3, #8
 8005806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fe6b 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fb20 	bl	8005e68 <SDMMC_GetCmdResp7>
 8005828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582a:	69fb      	ldr	r3, [r7, #28]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005842:	2337      	movs	r3, #55	; 0x37
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fe4c 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	2137      	movs	r1, #55	; 0x37
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f916 	bl	8005a98 <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800588c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800588e:	2329      	movs	r3, #41	; 0x29
 8005890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800589a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fe26 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa29 	bl	8005d04 <SDMMC_GetCmdResp3>
 80058b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058b4:	69fb      	ldr	r3, [r7, #28]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b088      	sub	sp, #32
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80058cc:	2306      	movs	r3, #6
 80058ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fe07 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80058ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ee:	2106      	movs	r1, #6
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8d1 	bl	8005a98 <SDMMC_GetCmdResp1>
 80058f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058f8:	69fb      	ldr	r3, [r7, #28]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b088      	sub	sp, #32
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800590e:	2333      	movs	r3, #51	; 0x33
 8005910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005912:	2340      	movs	r3, #64	; 0x40
 8005914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800591a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800591e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fde6 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800592c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005930:	2133      	movs	r1, #51	; 0x33
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8b0 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800593a:	69fb      	ldr	r3, [r7, #28]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005950:	2302      	movs	r3, #2
 8005952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005954:	23c0      	movs	r3, #192	; 0xc0
 8005956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800595c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fdc5 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f980 	bl	8005c74 <SDMMC_GetCmdResp2>
 8005974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005976:	69fb      	ldr	r3, [r7, #28]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800598e:	2309      	movs	r3, #9
 8005990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005992:	23c0      	movs	r3, #192	; 0xc0
 8005994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800599a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fda6 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f961 	bl	8005c74 <SDMMC_GetCmdResp2>
 80059b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059b4:	69fb      	ldr	r3, [r7, #28]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b088      	sub	sp, #32
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80059cc:	2303      	movs	r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fd87 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	2103      	movs	r1, #3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9c4 	bl	8005d7c <SDMMC_GetCmdResp6>
 80059f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059f6:	69fb      	ldr	r3, [r7, #28]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005a0e:	230d      	movs	r3, #13
 8005a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a20:	f107 0308 	add.w	r3, r7, #8
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fd66 	bl	80054f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	210d      	movs	r1, #13
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f830 	bl	8005a98 <SDMMC_GetCmdResp1>
 8005a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <SDMMC_GetCmdError+0x4c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <SDMMC_GetCmdError+0x50>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	0a5b      	lsrs	r3, r3, #9
 8005a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	60fa      	str	r2, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a70:	e009      	b.n	8005a86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f1      	beq.n	8005a62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	22c5      	movs	r2, #197	; 0xc5
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	20000000 	.word	0x20000000
 8005a94:	10624dd3 	.word	0x10624dd3

08005a98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005aa6:	4b70      	ldr	r3, [pc, #448]	; (8005c68 <SDMMC_GetCmdResp1+0x1d0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a70      	ldr	r2, [pc, #448]	; (8005c6c <SDMMC_GetCmdResp1+0x1d4>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	0a5a      	lsrs	r2, r3, #9
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	61fa      	str	r2, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac8:	e0c9      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ef      	beq.n	8005aba <SDMMC_GetCmdResp1+0x22>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ea      	bne.n	8005aba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2204      	movs	r2, #4
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005af6:	2304      	movs	r3, #4
 8005af8:	e0b1      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0a6      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	22c5      	movs	r2, #197	; 0xc5
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fd17 	bl	800554a <SDIO_GetCommandResponse>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d001      	beq.n	8005b2a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e099      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fd18 	bl	8005562 <SDIO_GetResponse>
 8005b32:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <SDMMC_GetCmdResp1+0x1d8>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e08d      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da02      	bge.n	8005b4e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4c:	e087      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	e080      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	e079      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b78:	e071      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b88:	e069      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b98:	e061      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ba8:	e059      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb8:	e051      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bc8:	e049      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bd8:	e041      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be8:	e039      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bf8:	e031      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c08:	e029      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c18:	e021      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c28:	e019      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c38:	e011      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c48:	e009      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005c54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c58:	e001      	b.n	8005c5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	10624dd3 	.word	0x10624dd3
 8005c70:	fdffe008 	.word	0xfdffe008

08005c74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <SDMMC_GetCmdResp2+0x88>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <SDMMC_GetCmdResp2+0x8c>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0a5b      	lsrs	r3, r3, #9
 8005c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ca0:	e026      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ef      	beq.n	8005c92 <SDMMC_GetCmdResp2+0x1e>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ea      	bne.n	8005c92 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cce:	2304      	movs	r3, #4
 8005cd0:	e00e      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e003      	b.n	8005cf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	22c5      	movs	r2, #197	; 0xc5
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000000 	.word	0x20000000
 8005d00:	10624dd3 	.word	0x10624dd3

08005d04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <SDMMC_GetCmdResp3+0x70>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <SDMMC_GetCmdResp3+0x74>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
 8005d20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1e5a      	subs	r2, r3, #1
 8005d26:	60fa      	str	r2, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d30:	e01b      	b.n	8005d6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ef      	beq.n	8005d22 <SDMMC_GetCmdResp3+0x1e>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ea      	bne.n	8005d22 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d5e:	2304      	movs	r3, #4
 8005d60:	e003      	b.n	8005d6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	22c5      	movs	r2, #197	; 0xc5
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	20000000 	.word	0x20000000
 8005d78:	10624dd3 	.word	0x10624dd3

08005d7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	460b      	mov	r3, r1
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d8a:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <SDMMC_GetCmdResp6+0xe4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a35      	ldr	r2, [pc, #212]	; (8005e64 <SDMMC_GetCmdResp6+0xe8>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	61fa      	str	r2, [r7, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005daa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dae:	e052      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ef      	beq.n	8005da0 <SDMMC_GetCmdResp6+0x24>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ea      	bne.n	8005da0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ddc:	2304      	movs	r3, #4
 8005dde:	e03a      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e02f      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fba7 	bl	800554a <SDIO_GetCommandResponse>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d001      	beq.n	8005e0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e025      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22c5      	movs	r2, #197	; 0xc5
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e10:	2100      	movs	r1, #0
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff fba5 	bl	8005562 <SDIO_GetResponse>
 8005e18:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e011      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e40:	e009      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e50:	e001      	b.n	8005e56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000000 	.word	0x20000000
 8005e64:	10624dd3 	.word	0x10624dd3

08005e68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <SDMMC_GetCmdResp7+0x94>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <SDMMC_GetCmdResp7+0x98>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0a5b      	lsrs	r3, r3, #9
 8005e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	60fa      	str	r2, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e94:	e02c      	b.n	8005ef0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ef      	beq.n	8005e86 <SDMMC_GetCmdResp7+0x1e>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ea      	bne.n	8005e86 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	e014      	b.n	8005ef0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e009      	b.n	8005ef0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005eee:	2300      	movs	r3, #0
  
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000000 	.word	0x20000000
 8005f00:	10624dd3 	.word	0x10624dd3

08005f04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005f08:	4904      	ldr	r1, [pc, #16]	; (8005f1c <MX_FATFS_Init+0x18>)
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_FATFS_Init+0x1c>)
 8005f0c:	f002 ff80 	bl	8008e10 <FATFS_LinkDriver>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <MX_FATFS_Init+0x20>)
 8005f16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f18:	bf00      	nop
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20001ac0 	.word	0x20001ac0
 8005f20:	0800a114 	.word	0x0800a114
 8005f24:	20001abc 	.word	0x20001abc

08005f28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
	...

08005f38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f42:	f000 f8a9 	bl	8006098 <BSP_SD_IsDetected>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d001      	beq.n	8005f50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e012      	b.n	8005f76 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005f50:	480b      	ldr	r0, [pc, #44]	; (8005f80 <BSP_SD_Init+0x48>)
 8005f52:	f7fd f907 	bl	8003164 <HAL_SD_Init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f64:	4806      	ldr	r0, [pc, #24]	; (8005f80 <BSP_SD_Init+0x48>)
 8005f66:	f7fe f861 	bl	800402c <HAL_SD_ConfigWideBusOperation>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005f74:	79fb      	ldrb	r3, [r7, #7]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200000e4 	.word	0x200000e4

08005f84 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	4806      	ldr	r0, [pc, #24]	; (8005fbc <BSP_SD_ReadBlocks+0x38>)
 8005fa2:	f7fd f98d 	bl	80032c0 <HAL_SD_ReadBlocks>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200000e4 	.word	0x200000e4

08005fc0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	4806      	ldr	r0, [pc, #24]	; (8005ff8 <BSP_SD_WriteBlocks+0x38>)
 8005fde:	f7fd fb4d 	bl	800367c <HAL_SD_WriteBlocks>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200000e4 	.word	0x200000e4

08005ffc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006000:	4805      	ldr	r0, [pc, #20]	; (8006018 <BSP_SD_GetCardState+0x1c>)
 8006002:	f7fe f8ad 	bl	8004160 <HAL_SD_GetCardState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b04      	cmp	r3, #4
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
}
 8006012:	4618      	mov	r0, r3
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200000e4 	.word	0x200000e4

0800601c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4803      	ldr	r0, [pc, #12]	; (8006034 <BSP_SD_GetCardInfo+0x18>)
 8006028:	f7fd ffd4 	bl	8003fd4 <HAL_SD_GetCardInfo>
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200000e4 	.word	0x200000e4

08006038 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006040:	f000 f818 	bl	8006074 <BSP_SD_AbortCallback>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006054:	f000 f814 	bl	8006080 <BSP_SD_WriteCpltCallback>
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006068:	f000 f810 	bl	800608c <BSP_SD_ReadCpltCallback>
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0

}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr

08006080 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0

}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0

}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800609e:	2301      	movs	r3, #1
 80060a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	b2db      	uxtb	r3, r3
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <disk_status+0x30>)
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	4905      	ldr	r1, [pc, #20]	; (80060e0 <disk_status+0x30>)
 80060ca:	440a      	add	r2, r1
 80060cc:	7a12      	ldrb	r2, [r2, #8]
 80060ce:	4610      	mov	r0, r2
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20001ae4 	.word	0x20001ae4

080060e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <disk_initialize+0x48>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d111      	bne.n	8006120 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	4a0b      	ldr	r2, [pc, #44]	; (800612c <disk_initialize+0x48>)
 8006100:	2101      	movs	r1, #1
 8006102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <disk_initialize+0x48>)
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	79fa      	ldrb	r2, [r7, #7]
 8006112:	4906      	ldr	r1, [pc, #24]	; (800612c <disk_initialize+0x48>)
 8006114:	440a      	add	r2, r1
 8006116:	7a12      	ldrb	r2, [r2, #8]
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20001ae4 	.word	0x20001ae4

08006130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8006140:	b672      	cpsid	i
}
 8006142:	bf00      	nop
  DRESULT res;
  __disable_irq();
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4a0b      	ldr	r2, [pc, #44]	; (8006174 <disk_read+0x44>)
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	689c      	ldr	r4, [r3, #8]
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4a08      	ldr	r2, [pc, #32]	; (8006174 <disk_read+0x44>)
 8006154:	4413      	add	r3, r2
 8006156:	7a18      	ldrb	r0, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	47a0      	blx	r4
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8006164:	b662      	cpsie	i
}
 8006166:	bf00      	nop
  __enable_irq();
  return res;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}
 8006172:	bf00      	nop
 8006174:	20001ae4 	.word	0x20001ae4

08006178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <disk_write+0x3c>)
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	68dc      	ldr	r4, [r3, #12]
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <disk_write+0x3c>)
 8006198:	4413      	add	r3, r2
 800619a:	7a18      	ldrb	r0, [r3, #8]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	47a0      	blx	r4
 80061a4:	4603      	mov	r3, r0
 80061a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd90      	pop	{r4, r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20001ae4 	.word	0x20001ae4

080061b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	603a      	str	r2, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
 80061c4:	460b      	mov	r3, r1
 80061c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <disk_ioctl+0x38>)
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	4906      	ldr	r1, [pc, #24]	; (80061f0 <disk_ioctl+0x38>)
 80061d8:	440a      	add	r2, r1
 80061da:	7a10      	ldrb	r0, [r2, #8]
 80061dc:	79b9      	ldrb	r1, [r7, #6]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4798      	blx	r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20001ae4 	.word	0x20001ae4

080061f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006208:	e007      	b.n	800621a <mem_cpy+0x26>
		*d++ = *s++;
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	1c53      	adds	r3, r2, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	6179      	str	r1, [r7, #20]
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f2      	bne.n	800620a <mem_cpy+0x16>
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006240:	e005      	b.n	800624e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	617a      	str	r2, [r7, #20]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f4      	bne.n	8006242 <mem_set+0x12>
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800627c:	bf00      	nop
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	1e5a      	subs	r2, r3, #1
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <mem_cmp+0x40>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	61fa      	str	r2, [r7, #28]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	61ba      	str	r2, [r7, #24]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	1acb      	subs	r3, r1, r3
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ec      	beq.n	800627e <mem_cmp+0x1a>
	return r;
 80062a4:	697b      	ldr	r3, [r7, #20]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr

080062b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80062ba:	e002      	b.n	80062c2 <chk_chr+0x12>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3301      	adds	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <chk_chr+0x26>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d1f2      	bne.n	80062bc <chk_chr+0xc>
	return *str;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	781b      	ldrb	r3, [r3, #0]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e03b      	b.n	8006370 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80062f8:	4931      	ldr	r1, [pc, #196]	; (80063c0 <chk_lock+0xdc>)
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d02c      	beq.n	8006366 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800630c:	492c      	ldr	r1, [pc, #176]	; (80063c0 <chk_lock+0xdc>)
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d120      	bne.n	800636a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006328:	4925      	ldr	r1, [pc, #148]	; (80063c0 <chk_lock+0xdc>)
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4613      	mov	r3, r2
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	3304      	adds	r3, #4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006340:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006342:	429a      	cmp	r2, r3
 8006344:	d111      	bne.n	800636a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006346:	491e      	ldr	r1, [pc, #120]	; (80063c0 <chk_lock+0xdc>)
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3308      	adds	r3, #8
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006360:	429a      	cmp	r2, r3
 8006362:	d102      	bne.n	800636a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006364:	e007      	b.n	8006376 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006366:	2301      	movs	r3, #1
 8006368:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d9c0      	bls.n	80062f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d109      	bne.n	8006390 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <chk_lock+0xa4>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d101      	bne.n	800638c <chk_lock+0xa8>
 8006388:	2300      	movs	r3, #0
 800638a:	e013      	b.n	80063b4 <chk_lock+0xd0>
 800638c:	2312      	movs	r3, #18
 800638e:	e011      	b.n	80063b4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <chk_lock+0xca>
 8006396:	490a      	ldr	r1, [pc, #40]	; (80063c0 <chk_lock+0xdc>)
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	330a      	adds	r3, #10
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ac:	d101      	bne.n	80063b2 <chk_lock+0xce>
 80063ae:	2310      	movs	r3, #16
 80063b0:	e000      	b.n	80063b4 <chk_lock+0xd0>
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20001acc 	.word	0x20001acc

080063c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	e002      	b.n	80063d6 <enq_lock+0x12>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d809      	bhi.n	80063f0 <enq_lock+0x2c>
 80063dc:	490a      	ldr	r1, [pc, #40]	; (8006408 <enq_lock+0x44>)
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ef      	bne.n	80063d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20001acc 	.word	0x20001acc

0800640c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e02e      	b.n	800647a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800641c:	4958      	ldr	r1, [pc, #352]	; (8006580 <inc_lock+0x174>)
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4613      	mov	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d11d      	bne.n	8006474 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006438:	4951      	ldr	r1, [pc, #324]	; (8006580 <inc_lock+0x174>)
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	3304      	adds	r3, #4
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006450:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006452:	429a      	cmp	r2, r3
 8006454:	d10e      	bne.n	8006474 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006456:	494a      	ldr	r1, [pc, #296]	; (8006580 <inc_lock+0x174>)
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	3308      	adds	r3, #8
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006470:	429a      	cmp	r2, r3
 8006472:	d006      	beq.n	8006482 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d9cd      	bls.n	800641c <inc_lock+0x10>
 8006480:	e000      	b.n	8006484 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006482:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d148      	bne.n	800651c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e002      	b.n	8006496 <inc_lock+0x8a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d809      	bhi.n	80064b0 <inc_lock+0xa4>
 800649c:	4938      	ldr	r1, [pc, #224]	; (8006580 <inc_lock+0x174>)
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4613      	mov	r3, r2
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1ef      	bne.n	8006490 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d101      	bne.n	80064ba <inc_lock+0xae>
 80064b6:	2300      	movs	r3, #0
 80064b8:	e05d      	b.n	8006576 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	482f      	ldr	r0, [pc, #188]	; (8006580 <inc_lock+0x174>)
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4403      	add	r3, r0
 80064d0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	6899      	ldr	r1, [r3, #8]
 80064da:	4829      	ldr	r0, [pc, #164]	; (8006580 <inc_lock+0x174>)
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4613      	mov	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4403      	add	r3, r0
 80064e8:	3304      	adds	r3, #4
 80064ea:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f2:	88d8      	ldrh	r0, [r3, #6]
 80064f4:	4922      	ldr	r1, [pc, #136]	; (8006580 <inc_lock+0x174>)
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4613      	mov	r3, r2
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	3308      	adds	r3, #8
 8006504:	4602      	mov	r2, r0
 8006506:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006508:	491d      	ldr	r1, [pc, #116]	; (8006580 <inc_lock+0x174>)
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4613      	mov	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	330a      	adds	r3, #10
 8006518:	2200      	movs	r2, #0
 800651a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <inc_lock+0x130>
 8006522:	4917      	ldr	r1, [pc, #92]	; (8006580 <inc_lock+0x174>)
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	330a      	adds	r3, #10
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <inc_lock+0x130>
 8006538:	2300      	movs	r3, #0
 800653a:	e01c      	b.n	8006576 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <inc_lock+0x14e>
 8006542:	490f      	ldr	r1, [pc, #60]	; (8006580 <inc_lock+0x174>)
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	330a      	adds	r3, #10
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	b299      	uxth	r1, r3
 8006558:	e001      	b.n	800655e <inc_lock+0x152>
 800655a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800655e:	4808      	ldr	r0, [pc, #32]	; (8006580 <inc_lock+0x174>)
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4403      	add	r3, r0
 800656c:	330a      	adds	r3, #10
 800656e:	460a      	mov	r2, r1
 8006570:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr
 8006580:	20001acc 	.word	0x20001acc

08006584 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e016      	b.n	80065c0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006592:	4910      	ldr	r1, [pc, #64]	; (80065d4 <clear_lock+0x50>)
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d108      	bne.n	80065ba <clear_lock+0x36>
 80065a8:	490a      	ldr	r1, [pc, #40]	; (80065d4 <clear_lock+0x50>)
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d9e5      	bls.n	8006592 <clear_lock+0xe>
	}
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20001acc 	.word	0x20001acc

080065d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d040      	beq.n	8006672 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006600:	7858      	ldrb	r0, [r3, #1]
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	2301      	movs	r3, #1
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	f7ff fdb6 	bl	8006178 <disk_write>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <sync_window+0x40>
			res = FR_DISK_ERR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	e02c      	b.n	8006672 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661e:	2200      	movs	r2, #0
 8006620:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	429a      	cmp	r2, r3
 8006638:	d21b      	bcs.n	8006672 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e012      	b.n	800666c <sync_window+0x94>
					wsect += fs->fsize;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665a:	7858      	ldrb	r0, [r3, #1]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	2301      	movs	r3, #1
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	f7ff fd89 	bl	8006178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d8e9      	bhi.n	8006646 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d01e      	beq.n	80066d6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff ff9d 	bl	80065d8 <sync_window>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d116      	bne.n	80066d6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ae:	7858      	ldrb	r0, [r3, #1]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	2301      	movs	r3, #1
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	f7ff fd3b 	bl	8006130 <disk_read>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295
 80066c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	461a      	mov	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	3b02      	subs	r3, #2
 80066ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	3b02      	subs	r3, #2
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d301      	bcc.n	8006704 <clust2sect+0x24>
 8006700:	2300      	movs	r3, #0
 8006702:	e00c      	b.n	800671e <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670a:	789b      	ldrb	r3, [r3, #2]
 800670c:	461a      	mov	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	fb03 f202 	mul.w	r2, r3, r2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	4413      	add	r3, r2
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d906      	bls.n	8006746 <get_fat+0x1e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <get_fat+0x24>
		val = 1;	/* Internal error */
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e0e4      	b.n	8006916 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b03      	cmp	r3, #3
 800675c:	f000 8098 	beq.w	8006890 <get_fat+0x168>
 8006760:	2b03      	cmp	r3, #3
 8006762:	f300 80ce 	bgt.w	8006902 <get_fat+0x1da>
 8006766:	2b01      	cmp	r3, #1
 8006768:	d002      	beq.n	8006770 <get_fat+0x48>
 800676a:	2b02      	cmp	r3, #2
 800676c:	d05f      	beq.n	800682e <get_fat+0x106>
 800676e:	e0c8      	b.n	8006902 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678c:	895b      	ldrh	r3, [r3, #10]
 800678e:	4619      	mov	r1, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	fbb3 f3f1 	udiv	r3, r3, r1
 8006796:	4413      	add	r3, r2
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ff6e 	bl	800667c <move_window>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80b0 	bne.w	8006908 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	60fa      	str	r2, [r7, #12]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067b4:	8952      	ldrh	r2, [r2, #10]
 80067b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ba:	fb01 f202 	mul.w	r2, r1, r2
 80067be:	1a9b      	subs	r3, r3, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	5cd3      	ldrb	r3, [r2, r3]
 80067c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067cc:	6a1a      	ldr	r2, [r3, #32]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d4:	895b      	ldrh	r3, [r3, #10]
 80067d6:	4619      	mov	r1, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	fbb3 f3f1 	udiv	r3, r3, r1
 80067de:	4413      	add	r3, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ff4a 	bl	800667c <move_window>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f040 808e 	bne.w	800690c <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	895b      	ldrh	r3, [r3, #10]
 80067f8:	461a      	mov	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006800:	fb01 f202 	mul.w	r2, r1, r2
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	5cd3      	ldrb	r3, [r2, r3]
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	461a      	mov	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4313      	orrs	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <get_fat+0xfc>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	e002      	b.n	800682a <get_fat+0x102>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800682a:	617b      	str	r3, [r7, #20]
			break;
 800682c:	e073      	b.n	8006916 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006834:	6a1a      	ldr	r2, [r3, #32]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	fbb3 f3f1 	udiv	r3, r3, r1
 800684a:	4413      	add	r3, r2
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff14 	bl	800667c <move_window>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d15a      	bne.n	8006910 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006864:	8952      	ldrh	r2, [r2, #10]
 8006866:	fbb3 f1f2 	udiv	r1, r3, r2
 800686a:	fb01 f202 	mul.w	r2, r1, r2
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3301      	adds	r3, #1
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	b21a      	sxth	r2, r3
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b21b      	sxth	r3, r3
 8006886:	4313      	orrs	r3, r2
 8006888:	b21b      	sxth	r3, r3
 800688a:	b29b      	uxth	r3, r3
 800688c:	617b      	str	r3, [r7, #20]
			break;
 800688e:	e042      	b.n	8006916 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689e:	895b      	ldrh	r3, [r3, #10]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ac:	4413      	add	r3, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fee3 	bl	800667c <move_window>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d12b      	bne.n	8006914 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068c6:	8952      	ldrh	r2, [r2, #10]
 80068c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068cc:	fb01 f202 	mul.w	r2, r1, r2
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3303      	adds	r3, #3
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	061a      	lsls	r2, r3, #24
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3302      	adds	r3, #2
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	4313      	orrs	r3, r2
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	3201      	adds	r2, #1
 80068ee:	7812      	ldrb	r2, [r2, #0]
 80068f0:	0212      	lsls	r2, r2, #8
 80068f2:	4313      	orrs	r3, r2
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068fe:	617b      	str	r3, [r7, #20]
			break;
 8006900:	e009      	b.n	8006916 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006902:	2301      	movs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e006      	b.n	8006916 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006908:	bf00      	nop
 800690a:	e004      	b.n	8006916 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006914:	bf00      	nop
		}
	}

	return val;
 8006916:	697b      	ldr	r3, [r7, #20]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d906      	bls.n	8006940 <put_fat+0x20>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <put_fat+0x26>
		res = FR_INT_ERR;
 8006940:	2302      	movs	r3, #2
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e13a      	b.n	8006bbc <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b03      	cmp	r3, #3
 8006950:	f000 80d0 	beq.w	8006af4 <put_fat+0x1d4>
 8006954:	2b03      	cmp	r3, #3
 8006956:	f300 8127 	bgt.w	8006ba8 <put_fat+0x288>
 800695a:	2b01      	cmp	r3, #1
 800695c:	d003      	beq.n	8006966 <put_fat+0x46>
 800695e:	2b02      	cmp	r3, #2
 8006960:	f000 808f 	beq.w	8006a82 <put_fat+0x162>
 8006964:	e120      	b.n	8006ba8 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	895b      	ldrh	r3, [r3, #10]
 8006984:	4619      	mov	r1, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	fbb3 f3f1 	udiv	r3, r3, r1
 800698c:	4413      	add	r3, r2
 800698e:	4619      	mov	r1, r3
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fe73 	bl	800667c <move_window>
 8006996:	4603      	mov	r3, r0
 8006998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800699a:	7ffb      	ldrb	r3, [r7, #31]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8106 	bne.w	8006bae <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	617a      	str	r2, [r7, #20]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069ae:	8952      	ldrh	r2, [r2, #10]
 80069b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069b4:	fb01 f202 	mul.w	r2, r1, r2
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <put_fat+0xc6>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b25a      	sxtb	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	e001      	b.n	80069ea <put_fat+0xca>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f4:	2201      	movs	r2, #1
 80069f6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a06:	895b      	ldrh	r3, [r3, #10]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a10:	4413      	add	r3, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7ff fe31 	bl	800667c <move_window>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a1e:	7ffb      	ldrb	r3, [r7, #31]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 80c6 	bne.w	8006bb2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	895b      	ldrh	r3, [r3, #10]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a36:	fb01 f202 	mul.w	r2, r1, r2
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <put_fat+0x134>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	e00e      	b.n	8006a72 <put_fat+0x152>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b25b      	sxtb	r3, r3
 8006a5a:	f023 030f 	bic.w	r3, r3, #15
 8006a5e:	b25a      	sxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	711a      	strb	r2, [r3, #4]
			break;
 8006a80:	e09c      	b.n	8006bbc <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	895b      	ldrh	r3, [r3, #10]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4619      	mov	r1, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fdea 	bl	800667c <move_window>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aac:	7ffb      	ldrb	r3, [r7, #31]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 8081 	bne.w	8006bb6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006abe:	8952      	ldrh	r2, [r2, #10]
 8006ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ac4:	fb01 f202 	mul.w	r2, r1, r2
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aee:	2201      	movs	r2, #1
 8006af0:	711a      	strb	r2, [r3, #4]
			break;
 8006af2:	e063      	b.n	8006bbc <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	895b      	ldrh	r3, [r3, #10]
 8006b04:	089b      	lsrs	r3, r3, #2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b10:	4413      	add	r3, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fdb1 	bl	800667c <move_window>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b1e:	7ffb      	ldrb	r3, [r7, #31]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d14a      	bne.n	8006bba <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b2e:	8952      	ldrh	r2, [r2, #10]
 8006b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b34:	fb01 f202 	mul.w	r2, r1, r2
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	3303      	adds	r3, #3
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	061a      	lsls	r2, r3, #24
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	4313      	orrs	r3, r2
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	3201      	adds	r2, #1
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	0212      	lsls	r2, r2, #8
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0c1a      	lsrs	r2, r3, #16
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0e1a      	lsrs	r2, r3, #24
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	3303      	adds	r3, #3
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	711a      	strb	r2, [r3, #4]
			break;
 8006ba6:	e009      	b.n	8006bbc <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e006      	b.n	8006bbc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bae:	bf00      	nop
 8006bb0:	e004      	b.n	8006bbc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bb2:	bf00      	nop
 8006bb4:	e002      	b.n	8006bbc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bb6:	bf00      	nop
 8006bb8:	e000      	b.n	8006bbc <put_fat+0x29c>
			if (res != FR_OK) break;
 8006bba:	bf00      	nop
		}
	}

	return res;
 8006bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d906      	bls.n	8006be4 <remove_chain+0x1e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <remove_chain+0x24>
		res = FR_INT_ERR;
 8006be4:	2302      	movs	r3, #2
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	e049      	b.n	8006c7e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006bee:	e03b      	b.n	8006c68 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fd98 	bl	8006728 <get_fat>
 8006bf8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d03b      	beq.n	8006c78 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <remove_chain+0x46>
 8006c06:	2302      	movs	r3, #2
 8006c08:	73fb      	strb	r3, [r7, #15]
 8006c0a:	e038      	b.n	8006c7e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c12:	d102      	bne.n	8006c1a <remove_chain+0x54>
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e031      	b.n	8006c7e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fe7e 	bl	8006920 <put_fat>
 8006c24:	4603      	mov	r3, r0
 8006c26:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d126      	bne.n	8006c7c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d013      	beq.n	8006c64 <remove_chain+0x9e>
				fs->free_clust++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	3301      	adds	r3, #1
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c4c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c54:	795b      	ldrb	r3, [r3, #5]
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3bc      	bcc.n	8006bf0 <remove_chain+0x2a>
 8006c76:	e002      	b.n	8006c7e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006c7c:	bf00      	nop
		}
	}

	return res;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d111      	bne.n	8006cbc <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <create_chain+0x2e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d31d      	bcc.n	8006cf2 <create_chain+0x6a>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	e01a      	b.n	8006cf2 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fd32 	bl	8006728 <get_fat>
 8006cc4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d801      	bhi.n	8006cd0 <create_chain+0x48>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e07f      	b.n	8006dd0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d101      	bne.n	8006cdc <create_chain+0x54>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	e079      	b.n	8006dd0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d201      	bcs.n	8006cee <create_chain+0x66>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	e070      	b.n	8006dd0 <create_chain+0x148>
		scl = clst;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d307      	bcc.n	8006d1a <create_chain+0x92>
			ncl = 2;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d901      	bls.n	8006d1a <create_chain+0x92>
 8006d16:	2300      	movs	r3, #0
 8006d18:	e05a      	b.n	8006dd0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006d1a:	6979      	ldr	r1, [r7, #20]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fd03 	bl	8006728 <get_fat>
 8006d22:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00e      	beq.n	8006d48 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d002      	beq.n	8006d38 <create_chain+0xb0>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <create_chain+0xb4>
			return cs;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	e049      	b.n	8006dd0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1d8      	bne.n	8006cf6 <create_chain+0x6e>
 8006d44:	2300      	movs	r3, #0
 8006d46:	e043      	b.n	8006dd0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006d48:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006d4a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff fde5 	bl	8006920 <put_fat>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <create_chain+0xec>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fdd8 	bl	8006920 <put_fat>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d121      	bne.n	8006dbe <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d80:	461a      	mov	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d01c      	beq.n	8006dce <create_chain+0x146>
			fs->free_clust--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006da4:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	715a      	strb	r2, [r3, #5]
 8006dbc:	e007      	b.n	8006dce <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <create_chain+0x142>
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	e000      	b.n	8006dcc <create_chain+0x144>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006dce:	697b      	ldr	r3, [r7, #20]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	3304      	adds	r3, #4
 8006dec:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfa:	895b      	ldrh	r3, [r3, #10]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e10:	7892      	ldrb	r2, [r2, #2]
 8006e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	613a      	str	r2, [r7, #16]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <clmt_clust+0x54>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e010      	b.n	8006e4e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d307      	bcc.n	8006e44 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e42:	e7e9      	b.n	8006e18 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006e44:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4413      	add	r3, r2
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d009      	beq.n	8006e92 <dir_sdi+0x3a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d301      	bcc.n	8006e96 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006e92:	2302      	movs	r3, #2
 8006e94:	e0aa      	b.n	8006fec <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d110      	bne.n	8006ebe <dir_sdi+0x66>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d107      	bne.n	8006ebe <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d115      	bne.n	8006ef0 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	891b      	ldrh	r3, [r3, #8]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d301      	bcc.n	8006ede <dir_sdi+0x86>
			return FR_INT_ERR;
 8006eda:	2302      	movs	r3, #2
 8006edc:	e086      	b.n	8006fec <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e043      	b.n	8006f78 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efc:	895b      	ldrh	r3, [r3, #10]
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f10:	789b      	ldrb	r3, [r3, #2]
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f18:	e021      	b.n	8006f5e <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fbff 	bl	8006728 <get_fat>
 8006f2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d101      	bne.n	8006f38 <dir_sdi+0xe0>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e059      	b.n	8006fec <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d909      	bls.n	8006f52 <dir_sdi+0xfa>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d301      	bcc.n	8006f56 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006f52:	2302      	movs	r3, #2
 8006f54:	e04a      	b.n	8006fec <dir_sdi+0x194>
			idx -= ic;
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d2d9      	bcs.n	8006f1a <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fbb5 	bl	80066e0 <clust2sect>
 8006f76:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7e:	461a      	mov	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <dir_sdi+0x136>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e02e      	b.n	8006fec <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9a:	895b      	ldrh	r3, [r3, #10]
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4413      	add	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fb2:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fca:	895b      	ldrh	r3, [r3, #10]
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fd8:	fb01 f202 	mul.w	r2, r1, r2
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	015b      	lsls	r3, r3, #5
 8006fe0:	4403      	add	r3, r0
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fe8:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ff4:	b590      	push	{r4, r7, lr}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <dir_next+0x2a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <dir_next+0x2e>
		return FR_NO_FILE;
 800701e:	2304      	movs	r3, #4
 8007020:	e12e      	b.n	8007280 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702e:	895b      	ldrh	r3, [r3, #10]
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	fbb3 f1f2 	udiv	r1, r3, r2
 800703c:	fb01 f202 	mul.w	r2, r1, r2
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 80fa 	bne.w	800723c <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007058:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	891b      	ldrh	r3, [r3, #8]
 8007074:	461a      	mov	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4293      	cmp	r3, r2
 800707a:	f0c0 80df 	bcc.w	800723c <dir_next+0x248>
				return FR_NO_FILE;
 800707e:	2304      	movs	r3, #4
 8007080:	e0fe      	b.n	8007280 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708e:	895b      	ldrh	r3, [r3, #10]
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	fbb3 f3f2 	udiv	r3, r3, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070a8:	7892      	ldrb	r2, [r2, #2]
 80070aa:	3a01      	subs	r2, #1
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 80c4 	bne.w	800723c <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7ff fb2e 	bl	8006728 <get_fat>
 80070cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d801      	bhi.n	80070d8 <dir_next+0xe4>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e0d3      	b.n	8007280 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d101      	bne.n	80070e4 <dir_next+0xf0>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0cd      	b.n	8007280 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	f0c0 808e 	bcc.w	8007216 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <dir_next+0x110>
 8007100:	2304      	movs	r3, #4
 8007102:	e0bd      	b.n	8007280 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7ff fdb6 	bl	8006c88 <create_chain>
 800711c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <dir_next+0x134>
 8007124:	2307      	movs	r3, #7
 8007126:	e0ab      	b.n	8007280 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <dir_next+0x13e>
 800712e:	2302      	movs	r3, #2
 8007130:	e0a6      	b.n	8007280 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d101      	bne.n	800713e <dir_next+0x14a>
 800713a:	2301      	movs	r3, #1
 800713c:	e0a0      	b.n	8007280 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff fa46 	bl	80065d8 <sync_window>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <dir_next+0x162>
 8007152:	2301      	movs	r3, #1
 8007154:	e094      	b.n	8007280 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716c:	895b      	ldrh	r3, [r3, #10]
 800716e:	461a      	mov	r2, r3
 8007170:	2100      	movs	r1, #0
 8007172:	f7ff f85d 	bl	8006230 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	681c      	ldr	r4, [r3, #0]
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	4610      	mov	r0, r2
 800718a:	f7ff faa9 	bl	80066e0 <clust2sect>
 800718e:	4603      	mov	r3, r0
 8007190:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007196:	2300      	movs	r3, #0
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e021      	b.n	80071e0 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	2201      	movs	r2, #1
 80071aa:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fa0f 	bl	80065d8 <sync_window>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <dir_next+0x1d0>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e05d      	b.n	8007280 <dir_next+0x28c>
						dp->fs->winsect++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80071d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071d2:	3201      	adds	r2, #1
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3301      	adds	r3, #1
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ec:	789b      	ldrb	r3, [r3, #2]
 80071ee:	461a      	mov	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d3d2      	bcc.n	800719c <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1acb      	subs	r3, r1, r3
 8007210:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007214:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721c:	461a      	mov	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6979      	ldr	r1, [r7, #20]
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fa57 	bl	80066e0 <clust2sect>
 8007232:	4602      	mov	r2, r0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007246:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	895b      	ldrh	r3, [r3, #10]
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	fbb3 f1f2 	udiv	r1, r3, r2
 800726c:	fb01 f202 	mul.w	r2, r1, r2
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	015b      	lsls	r3, r3, #5
 8007274:	4403      	add	r3, r0
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800727c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	bd90      	pop	{r4, r7, pc}

08007288 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007292:	2100      	movs	r1, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fddf 	bl	8006e58 <dir_sdi>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d135      	bne.n	8007310 <dir_alloc+0x88>
		n = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7ff f9de 	bl	800667c <move_window>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d121      	bne.n	800730e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2be5      	cmp	r3, #229	; 0xe5
 80072d6:	d006      	beq.n	80072e6 <dir_alloc+0x5e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60bb      	str	r3, [r7, #8]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d102      	bne.n	80072fa <dir_alloc+0x72>
 80072f4:	e00c      	b.n	8007310 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fe79 	bl	8006ff4 <dir_next>
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0cd      	beq.n	80072a8 <dir_alloc+0x20>
 800730c:	e000      	b.n	8007310 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800730e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b04      	cmp	r3, #4
 8007314:	d101      	bne.n	800731a <dir_alloc+0x92>
 8007316:	2307      	movs	r3, #7
 8007318:	73fb      	strb	r3, [r7, #15]
	return res;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	331b      	adds	r3, #27
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	b21a      	sxth	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	331a      	adds	r3, #26
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b21b      	sxth	r3, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	b21b      	sxth	r3, r3
 8007344:	b29b      	uxth	r3, r3
 8007346:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d10f      	bne.n	8007374 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	3315      	adds	r3, #21
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b21a      	sxth	r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b21b      	sxth	r3, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	b21b      	sxth	r3, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

	return cl;
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	331a      	adds	r3, #26
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	331b      	adds	r3, #27
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	0c1a      	lsrs	r2, r3, #16
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3314      	adds	r3, #20
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3315      	adds	r3, #21
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fd3e 	bl	8006e58 <dir_sdi>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <dir_find+0x1e>
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	e03f      	b.n	800746a <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7ff f93d 	bl	800667c <move_window>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d12a      	bne.n	8007462 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <dir_find+0x5c>
 8007422:	2304      	movs	r3, #4
 8007424:	75fb      	strb	r3, [r7, #23]
 8007426:	e01f      	b.n	8007468 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	330b      	adds	r3, #11
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <dir_find+0x82>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	220b      	movs	r2, #11
 8007440:	4619      	mov	r1, r3
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f7fe ff0e 	bl	8006264 <mem_cmp>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fdcf 	bl	8006ff4 <dir_next>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0c4      	beq.n	80073ea <dir_find+0x1e>
 8007460:	e002      	b.n	8007468 <dir_find+0x9c>
		if (res != FR_OK) break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <dir_find+0x9c>
			break;
 8007466:	bf00      	nop

	return res;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800747c:	2304      	movs	r3, #4
 800747e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8007480:	e042      	b.n	8007508 <dir_read+0x96>
		res = move_window(dp->fs, dp->sect);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f7ff f8f1 	bl	800667c <move_window>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d138      	bne.n	8007516 <dir_read+0xa4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <dir_read+0x4e>
 80074ba:	2304      	movs	r3, #4
 80074bc:	75fb      	strb	r3, [r7, #23]
 80074be:	e02f      	b.n	8007520 <dir_read+0xae>
		a = dir[DIR_Attr] & AM_MASK;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	330b      	adds	r3, #11
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074ca:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2be5      	cmp	r3, #229	; 0xe5
 80074d0:	d011      	beq.n	80074f6 <dir_read+0x84>
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b2e      	cmp	r3, #46	; 0x2e
 80074d6:	d00e      	beq.n	80074f6 <dir_read+0x84>
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d00b      	beq.n	80074f6 <dir_read+0x84>
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	f023 0320 	bic.w	r3, r3, #32
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d011      	beq.n	800751a <dir_read+0xa8>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80074f6:	2100      	movs	r1, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff fd7b 	bl	8006ff4 <dir_next>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <dir_read+0xac>
	while (dp->sect) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1b6      	bne.n	8007482 <dir_read+0x10>
 8007514:	e004      	b.n	8007520 <dir_read+0xae>
		if (res != FR_OK) break;
 8007516:	bf00      	nop
 8007518:	e002      	b.n	8007520 <dir_read+0xae>
			break;
 800751a:	bf00      	nop
 800751c:	e000      	b.n	8007520 <dir_read+0xae>
		if (res != FR_OK) break;
 800751e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <dir_read+0xc0>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6113      	str	r3, [r2, #16]

	return res;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007544:	2101      	movs	r1, #1
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fe9e 	bl	8007288 <dir_alloc>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d12d      	bne.n	80075b2 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f7ff f887 	bl	800667c <move_window>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11c      	bne.n	80075b2 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	2220      	movs	r2, #32
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fe53 	bl	8006230 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	6958      	ldr	r0, [r3, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	220b      	movs	r2, #11
 800759c:	4619      	mov	r1, r3
 800759e:	f7fe fe29 	bl	80061f4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	2201      	movs	r2, #1
 80075b0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3309      	adds	r3, #9
 80075ca:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d05b      	beq.n	8007690 <get_fileinfo+0xd4>
		dir = dp->dir;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	60bb      	str	r3, [r7, #8]
		i = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 80075e6:	e01c      	b.n	8007622 <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	617a      	str	r2, [r7, #20]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d100      	bne.n	80075fe <get_fileinfo+0x42>
 80075fc:	e011      	b.n	8007622 <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b05      	cmp	r3, #5
 8007602:	d101      	bne.n	8007608 <get_fileinfo+0x4c>
 8007604:	23e5      	movs	r3, #229	; 0xe5
 8007606:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b09      	cmp	r3, #9
 800760c:	d104      	bne.n	8007618 <get_fileinfo+0x5c>
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	613a      	str	r2, [r7, #16]
 8007614:	222e      	movs	r2, #46	; 0x2e
 8007616:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	613a      	str	r2, [r7, #16]
 800761e:	7bfa      	ldrb	r2, [r7, #15]
 8007620:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d9df      	bls.n	80075e8 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	7ada      	ldrb	r2, [r3, #11]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	331f      	adds	r3, #31
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	061a      	lsls	r2, r3, #24
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	331e      	adds	r3, #30
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	4313      	orrs	r3, r2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	321d      	adds	r2, #29
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	0212      	lsls	r2, r2, #8
 800764a:	4313      	orrs	r3, r2
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	321c      	adds	r2, #28
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	431a      	orrs	r2, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3319      	adds	r3, #25
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	b21a      	sxth	r2, r3
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	3318      	adds	r3, #24
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b21b      	sxth	r3, r3
 800766a:	4313      	orrs	r3, r2
 800766c:	b21b      	sxth	r3, r3
 800766e:	b29a      	uxth	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	3317      	adds	r3, #23
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	b21a      	sxth	r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	3316      	adds	r3, #22
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b21b      	sxth	r3, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	b21b      	sxth	r3, r3
 800768a:	b29a      	uxth	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e002      	b.n	80076b8 <create_name+0x18>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b2f      	cmp	r3, #47	; 0x2f
 80076be:	d0f8      	beq.n	80076b2 <create_name+0x12>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b5c      	cmp	r3, #92	; 0x5c
 80076c6:	d0f4      	beq.n	80076b2 <create_name+0x12>
	sfn = dp->fn;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80076d2:	220b      	movs	r2, #11
 80076d4:	2120      	movs	r1, #32
 80076d6:	68b8      	ldr	r0, [r7, #8]
 80076d8:	f7fe fdaa 	bl	8006230 <mem_set>
	si = i = b = 0; ni = 8;
 80076dc:	2300      	movs	r3, #0
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	2308      	movs	r3, #8
 80076ea:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	617a      	str	r2, [r7, #20]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80076fa:	7fbb      	ldrb	r3, [r7, #30]
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d953      	bls.n	80077a8 <create_name+0x108>
 8007700:	7fbb      	ldrb	r3, [r7, #30]
 8007702:	2b2f      	cmp	r3, #47	; 0x2f
 8007704:	d050      	beq.n	80077a8 <create_name+0x108>
 8007706:	7fbb      	ldrb	r3, [r7, #30]
 8007708:	2b5c      	cmp	r3, #92	; 0x5c
 800770a:	d04d      	beq.n	80077a8 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800770c:	7fbb      	ldrb	r3, [r7, #30]
 800770e:	2b2e      	cmp	r3, #46	; 0x2e
 8007710:	d003      	beq.n	800771a <create_name+0x7a>
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	429a      	cmp	r2, r3
 8007718:	d30f      	bcc.n	800773a <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d102      	bne.n	8007726 <create_name+0x86>
 8007720:	7fbb      	ldrb	r3, [r7, #30]
 8007722:	2b2e      	cmp	r3, #46	; 0x2e
 8007724:	d001      	beq.n	800772a <create_name+0x8a>
 8007726:	2306      	movs	r3, #6
 8007728:	e073      	b.n	8007812 <create_name+0x172>
			i = 8; ni = 11;
 800772a:	2308      	movs	r3, #8
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	230b      	movs	r3, #11
 8007730:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007732:	7ffb      	ldrb	r3, [r7, #31]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	e035      	b.n	80077a6 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800773a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800773e:	2b00      	cmp	r3, #0
 8007740:	da08      	bge.n	8007754 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8007742:	7ffb      	ldrb	r3, [r7, #31]
 8007744:	f043 0303 	orr.w	r3, r3, #3
 8007748:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800774a:	7fbb      	ldrb	r3, [r7, #30]
 800774c:	3b80      	subs	r3, #128	; 0x80
 800774e:	4a33      	ldr	r2, [pc, #204]	; (800781c <create_name+0x17c>)
 8007750:	5cd3      	ldrb	r3, [r2, r3]
 8007752:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007754:	7fbb      	ldrb	r3, [r7, #30]
 8007756:	4619      	mov	r1, r3
 8007758:	4831      	ldr	r0, [pc, #196]	; (8007820 <create_name+0x180>)
 800775a:	f7fe fda9 	bl	80062b0 <chk_chr>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <create_name+0xc8>
				return FR_INVALID_NAME;
 8007764:	2306      	movs	r3, #6
 8007766:	e054      	b.n	8007812 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007768:	7fbb      	ldrb	r3, [r7, #30]
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d907      	bls.n	800777e <create_name+0xde>
 800776e:	7fbb      	ldrb	r3, [r7, #30]
 8007770:	2b5a      	cmp	r3, #90	; 0x5a
 8007772:	d804      	bhi.n	800777e <create_name+0xde>
				b |= 2;
 8007774:	7ffb      	ldrb	r3, [r7, #31]
 8007776:	f043 0302 	orr.w	r3, r3, #2
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e00c      	b.n	8007798 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800777e:	7fbb      	ldrb	r3, [r7, #30]
 8007780:	2b60      	cmp	r3, #96	; 0x60
 8007782:	d909      	bls.n	8007798 <create_name+0xf8>
 8007784:	7fbb      	ldrb	r3, [r7, #30]
 8007786:	2b7a      	cmp	r3, #122	; 0x7a
 8007788:	d806      	bhi.n	8007798 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800778a:	7ffb      	ldrb	r3, [r7, #31]
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	77fb      	strb	r3, [r7, #31]
 8007792:	7fbb      	ldrb	r3, [r7, #30]
 8007794:	3b20      	subs	r3, #32
 8007796:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	613a      	str	r2, [r7, #16]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	7fba      	ldrb	r2, [r7, #30]
 80077a4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80077a6:	e7a1      	b.n	80076ec <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	441a      	add	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80077b2:	7fbb      	ldrb	r3, [r7, #30]
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d801      	bhi.n	80077bc <create_name+0x11c>
 80077b8:	2304      	movs	r3, #4
 80077ba:	e000      	b.n	80077be <create_name+0x11e>
 80077bc:	2300      	movs	r3, #0
 80077be:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <create_name+0x12a>
 80077c6:	2306      	movs	r3, #6
 80077c8:	e023      	b.n	8007812 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2be5      	cmp	r3, #229	; 0xe5
 80077d0:	d102      	bne.n	80077d8 <create_name+0x138>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2205      	movs	r2, #5
 80077d6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d102      	bne.n	80077e4 <create_name+0x144>
 80077de:	7ffb      	ldrb	r3, [r7, #31]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80077e4:	7ffb      	ldrb	r3, [r7, #31]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d103      	bne.n	80077f6 <create_name+0x156>
 80077ee:	7fbb      	ldrb	r3, [r7, #30]
 80077f0:	f043 0310 	orr.w	r3, r3, #16
 80077f4:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80077f6:	7ffb      	ldrb	r3, [r7, #31]
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d103      	bne.n	8007808 <create_name+0x168>
 8007800:	7fbb      	ldrb	r3, [r7, #30]
 8007802:	f043 0308 	orr.w	r3, r3, #8
 8007806:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	330b      	adds	r3, #11
 800780c:	7fba      	ldrb	r2, [r7, #30]
 800780e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007810:	2300      	movs	r3, #0
#endif
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	0800a094 	.word	0x0800a094
 8007820:	08009a50 	.word	0x08009a50

08007824 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b2f      	cmp	r3, #47	; 0x2f
 8007834:	d003      	beq.n	800783e <follow_path+0x1a>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b5c      	cmp	r3, #92	; 0x5c
 800783c:	d102      	bne.n	8007844 <follow_path+0x20>
		path++;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b1f      	cmp	r3, #31
 8007856:	d80c      	bhi.n	8007872 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fafc 	bl	8006e58 <dir_sdi>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786a:	461a      	mov	r2, r3
 800786c:	2300      	movs	r3, #0
 800786e:	6153      	str	r3, [r2, #20]
 8007870:	e049      	b.n	8007906 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007872:	463b      	mov	r3, r7
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ff12 	bl	80076a0 <create_name>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d13a      	bne.n	80078fc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff fda0 	bl	80073cc <dir_find>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	7adb      	ldrb	r3, [r3, #11]
 800789a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d12b      	bne.n	8007900 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d126      	bne.n	8007900 <follow_path+0xdc>
 80078b2:	2305      	movs	r3, #5
 80078b4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80078b6:	e023      	b.n	8007900 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d120      	bne.n	8007904 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	330b      	adds	r3, #11
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80078da:	2305      	movs	r3, #5
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	e012      	b.n	8007906 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff fd1a 	bl	8007324 <ld_clust>
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078fa:	e7ba      	b.n	8007872 <follow_path+0x4e>
			if (res != FR_OK) break;
 80078fc:	bf00      	nop
 80078fe:	e002      	b.n	8007906 <follow_path+0xe2>
				break;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007904:	bf00      	nop
		}
	}

	return res;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d031      	beq.n	800798a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	e002      	b.n	8007934 <get_ldnumber+0x24>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	3301      	adds	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b20      	cmp	r3, #32
 800793a:	d903      	bls.n	8007944 <get_ldnumber+0x34>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b3a      	cmp	r3, #58	; 0x3a
 8007942:	d1f4      	bne.n	800792e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b3a      	cmp	r3, #58	; 0x3a
 800794a:	d11c      	bne.n	8007986 <get_ldnumber+0x76>
			tp = *path;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	60fa      	str	r2, [r7, #12]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	3b30      	subs	r3, #48	; 0x30
 800795c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b09      	cmp	r3, #9
 8007962:	d80e      	bhi.n	8007982 <get_ldnumber+0x72>
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	429a      	cmp	r2, r3
 800796a:	d10a      	bne.n	8007982 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <get_ldnumber+0x72>
					vol = (int)i;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3301      	adds	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	e002      	b.n	800798c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800798a:	693b      	ldr	r3, [r7, #16]
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr
	...

08007998 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a8:	2200      	movs	r2, #0
 80079aa:	711a      	strb	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b2:	461a      	mov	r2, r3
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fe fe5d 	bl	800667c <move_window>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <check_fs+0x34>
		return 3;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e04a      	b.n	8007a62 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079d2:	3301      	adds	r3, #1
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	b21a      	sxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80079e0:	b21b      	sxth	r3, r3
 80079e2:	4313      	orrs	r3, r2
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	4a21      	ldr	r2, [pc, #132]	; (8007a6c <check_fs+0xd4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d001      	beq.n	80079f0 <check_fs+0x58>
		return 2;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e038      	b.n	8007a62 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3336      	adds	r3, #54	; 0x36
 80079f4:	3303      	adds	r3, #3
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	061a      	lsls	r2, r3, #24
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3336      	adds	r3, #54	; 0x36
 80079fe:	3302      	adds	r3, #2
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	4313      	orrs	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	3236      	adds	r2, #54	; 0x36
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	0212      	lsls	r2, r2, #8
 8007a10:	4313      	orrs	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <check_fs+0xd8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d101      	bne.n	8007a28 <check_fs+0x90>
		return 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e01c      	b.n	8007a62 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3352      	adds	r3, #82	; 0x52
 8007a2c:	3303      	adds	r3, #3
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	061a      	lsls	r2, r3, #24
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3352      	adds	r3, #82	; 0x52
 8007a36:	3302      	adds	r3, #2
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	3252      	adds	r2, #82	; 0x52
 8007a42:	3201      	adds	r2, #1
 8007a44:	7812      	ldrb	r2, [r2, #0]
 8007a46:	0212      	lsls	r2, r2, #8
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a56:	4a06      	ldr	r2, [pc, #24]	; (8007a70 <check_fs+0xd8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d101      	bne.n	8007a60 <check_fs+0xc8>
		return 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <check_fs+0xca>

	return 1;
 8007a60:	2301      	movs	r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	ffffaa55 	.word	0xffffaa55
 8007a70:	00544146 	.word	0x00544146

08007a74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b096      	sub	sp, #88	; 0x58
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f7ff ff41 	bl	8007910 <get_ldnumber>
 8007a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	da01      	bge.n	8007a9a <find_volume+0x26>
 8007a96:	230b      	movs	r3, #11
 8007a98:	e311      	b.n	80080be <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a9a:	4a98      	ldr	r2, [pc, #608]	; (8007cfc <find_volume+0x288>)
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <find_volume+0x3a>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	e307      	b.n	80080be <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01c      	beq.n	8007afa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe faf1 	bl	80060b0 <disk_status>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10c      	bne.n	8007afa <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <find_volume+0x82>
 8007ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007af2:	230a      	movs	r3, #10
 8007af4:	e2e3      	b.n	80080be <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007af6:	2300      	movs	r3, #0
 8007af8:	e2e1      	b.n	80080be <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fae3 	bl	80060e4 <disk_initialize>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b30:	2303      	movs	r3, #3
 8007b32:	e2c4      	b.n	80080be <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <find_volume+0xd6>
 8007b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007b46:	230a      	movs	r3, #10
 8007b48:	e2b9      	b.n	80080be <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b50:	7858      	ldrb	r0, [r3, #1]
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b58:	330a      	adds	r3, #10
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	f7fe fb2b 	bl	80061b8 <disk_ioctl>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10d      	bne.n	8007b84 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6e:	895b      	ldrh	r3, [r3, #10]
 8007b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b74:	d306      	bcc.n	8007b84 <find_volume+0x110>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	895b      	ldrh	r3, [r3, #10]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b82:	d901      	bls.n	8007b88 <find_volume+0x114>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e29a      	b.n	80080be <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007b8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b90:	f7ff ff02 	bl	8007998 <check_fs>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d153      	bne.n	8007c4a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba6:	e028      	b.n	8007bfa <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bb2:	4413      	add	r3, r2
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	3304      	adds	r3, #4
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d012      	beq.n	8007be6 <find_volume+0x172>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	330b      	adds	r3, #11
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	061a      	lsls	r2, r3, #24
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	330a      	adds	r3, #10
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd4:	3209      	adds	r2, #9
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	0212      	lsls	r2, r2, #8
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bde:	3208      	adds	r2, #8
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	e000      	b.n	8007be8 <find_volume+0x174>
 8007be6:	2200      	movs	r2, #0
 8007be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	3358      	adds	r3, #88	; 0x58
 8007bee:	443b      	add	r3, r7
 8007bf0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d9d3      	bls.n	8007ba8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007c00:	2300      	movs	r3, #0
 8007c02:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <find_volume+0x19c>
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	3358      	adds	r3, #88	; 0x58
 8007c16:	443b      	add	r3, r7
 8007c18:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c1c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <find_volume+0x1bc>
 8007c24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c28:	f7ff feb6 	bl	8007998 <check_fs>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	e000      	b.n	8007c32 <find_volume+0x1be>
 8007c30:	2302      	movs	r3, #2
 8007c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <find_volume+0x1d6>
 8007c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c40:	3301      	adds	r3, #1
 8007c42:	643b      	str	r3, [r7, #64]	; 0x40
 8007c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d9e2      	bls.n	8007c10 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d101      	bne.n	8007c56 <find_volume+0x1e2>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e233      	b.n	80080be <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007c56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <find_volume+0x1ee>
 8007c5e:	230d      	movs	r3, #13
 8007c60:	e22d      	b.n	80080be <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	7b1b      	ldrb	r3, [r3, #12]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	b21a      	sxth	r2, r3
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	7adb      	ldrb	r3, [r3, #11]
 8007c6e:	b21b      	sxth	r3, r3
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b21a      	sxth	r2, r3
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	895b      	ldrh	r3, [r3, #10]
 8007c7c:	b21b      	sxth	r3, r3
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007c82:	230d      	movs	r3, #13
 8007c84:	e21b      	b.n	80080be <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	7ddb      	ldrb	r3, [r3, #23]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	b21a      	sxth	r2, r3
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	7d9b      	ldrb	r3, [r3, #22]
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	4313      	orrs	r3, r2
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d112      	bne.n	8007cc8 <find_volume+0x254>
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ca8:	061a      	lsls	r2, r3, #24
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007cb0:	041b      	lsls	r3, r3, #16
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007cba:	0212      	lsls	r2, r2, #8
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	7c1a      	ldrb	r2, [r3, #16]
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cde:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce6:	78db      	ldrb	r3, [r3, #3]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d009      	beq.n	8007d00 <find_volume+0x28c>
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf2:	78db      	ldrb	r3, [r3, #3]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d003      	beq.n	8007d00 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007cf8:	230d      	movs	r3, #13
 8007cfa:	e1e0      	b.n	80080be <find_volume+0x64a>
 8007cfc:	20001ac4 	.word	0x20001ac4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	7b5a      	ldrb	r2, [r3, #13]
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d24:	789b      	ldrb	r3, [r3, #2]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <find_volume+0x2d0>
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d30:	789b      	ldrb	r3, [r3, #2]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3a:	789b      	ldrb	r3, [r3, #2]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007d44:	230d      	movs	r3, #13
 8007d46:	e1ba      	b.n	80080be <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	7c9b      	ldrb	r3, [r3, #18]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	b21a      	sxth	r2, r3
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	7c5b      	ldrb	r3, [r3, #17]
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b21b      	sxth	r3, r3
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d62:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6a:	891b      	ldrh	r3, [r3, #8]
 8007d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d72:	8952      	ldrh	r2, [r2, #10]
 8007d74:	0952      	lsrs	r2, r2, #5
 8007d76:	b292      	uxth	r2, r2
 8007d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d7c:	fb01 f202 	mul.w	r2, r1, r2
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007d88:	230d      	movs	r3, #13
 8007d8a:	e198      	b.n	80080be <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	7d1b      	ldrb	r3, [r3, #20]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b21a      	sxth	r2, r3
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	7cdb      	ldrb	r3, [r3, #19]
 8007d98:	b21b      	sxth	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d112      	bne.n	8007dce <find_volume+0x35a>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007dae:	061a      	lsls	r2, r3, #24
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007db6:	041b      	lsls	r3, r3, #16
 8007db8:	4313      	orrs	r3, r2
 8007dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dbc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007dc0:	0212      	lsls	r2, r2, #8
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	7bdb      	ldrb	r3, [r3, #15]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	b21a      	sxth	r2, r3
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	7b9b      	ldrb	r3, [r3, #14]
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	b21b      	sxth	r3, r3
 8007de0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007de2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <find_volume+0x378>
 8007de8:	230d      	movs	r3, #13
 8007dea:	e168      	b.n	80080be <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007dec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df0:	4413      	add	r3, r2
 8007df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007df8:	8911      	ldrh	r1, [r2, #8]
 8007dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e00:	8952      	ldrh	r2, [r2, #10]
 8007e02:	0952      	lsrs	r2, r2, #5
 8007e04:	b292      	uxth	r2, r2
 8007e06:	fbb1 f2f2 	udiv	r2, r1, r2
 8007e0a:	b292      	uxth	r2, r2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d201      	bcs.n	8007e1c <find_volume+0x3a8>
 8007e18:	230d      	movs	r3, #13
 8007e1a:	e150      	b.n	80080be <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e28:	7892      	ldrb	r2, [r2, #2]
 8007e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <find_volume+0x3c6>
 8007e36:	230d      	movs	r3, #13
 8007e38:	e141      	b.n	80080be <find_volume+0x64a>
	fmt = FS_FAT12;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d902      	bls.n	8007e50 <find_volume+0x3dc>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d902      	bls.n	8007e60 <find_volume+0x3ec>
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	3302      	adds	r3, #2
 8007e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e6a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e72:	461a      	mov	r2, r3
 8007e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e76:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007e78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7c:	4413      	add	r3, r2
 8007e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e84:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007e86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	4413      	add	r3, r2
 8007e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e92:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d124      	bne.n	8007ee6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <find_volume+0x438>
 8007ea8:	230d      	movs	r3, #13
 8007eaa:	e108      	b.n	80080be <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007eb2:	061a      	lsls	r2, r3, #24
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007ec4:	0212      	lsls	r2, r2, #8
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eca:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ed6:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee4:	e02b      	b.n	8007f3e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eec:	891b      	ldrh	r3, [r3, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <find_volume+0x482>
 8007ef2:	230d      	movs	r3, #13
 8007ef4:	e0e3      	b.n	80080be <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efc:	6a1a      	ldr	r2, [r3, #32]
 8007efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f00:	4413      	add	r3, r2
 8007f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f08:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d105      	bne.n	8007f1e <find_volume+0x4aa>
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	e00e      	b.n	8007f3c <find_volume+0x4c8>
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f24:	695a      	ldr	r2, [r3, #20]
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	085a      	lsrs	r2, r3, #1
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007f3c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4c:	895b      	ldrh	r3, [r3, #10]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f52:	440b      	add	r3, r1
 8007f54:	3b01      	subs	r3, #1
 8007f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f58:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007f5c:	8949      	ldrh	r1, [r1, #10]
 8007f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d201      	bcs.n	8007f6a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007f66:	230d      	movs	r3, #13
 8007f68:	e0a9      	b.n	80080be <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f70:	461a      	mov	r2, r3
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295
 8007f76:	6113      	str	r3, [r2, #16]
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f86:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007f92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d17a      	bne.n	8008090 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007faa:	b21b      	sxth	r3, r3
 8007fac:	4313      	orrs	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d16d      	bne.n	8008090 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fbc:	f7fe fb5e 	bl	800667c <move_window>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d164      	bne.n	8008090 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fcc:	2200      	movs	r2, #0
 8007fce:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	b21a      	sxth	r2, r3
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007fe0:	b21b      	sxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b21b      	sxth	r3, r3
 8007fe6:	4a38      	ldr	r2, [pc, #224]	; (80080c8 <find_volume+0x654>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d151      	bne.n	8008090 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	78db      	ldrb	r3, [r3, #3]
 8007ff0:	061a      	lsls	r2, r3, #24
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	789b      	ldrb	r3, [r3, #2]
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffc:	7852      	ldrb	r2, [r2, #1]
 8007ffe:	0212      	lsls	r2, r2, #8
 8008000:	4313      	orrs	r3, r2
 8008002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	4313      	orrs	r3, r2
 8008008:	4a30      	ldr	r2, [pc, #192]	; (80080cc <find_volume+0x658>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d140      	bne.n	8008090 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008014:	061a      	lsls	r2, r3, #24
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	4313      	orrs	r3, r2
 8008020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008022:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008026:	0212      	lsls	r2, r2, #8
 8008028:	4313      	orrs	r3, r2
 800802a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008030:	4313      	orrs	r3, r2
 8008032:	4a27      	ldr	r2, [pc, #156]	; (80080d0 <find_volume+0x65c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d12b      	bne.n	8008090 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800803e:	061a      	lsls	r2, r3, #24
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	4313      	orrs	r3, r2
 800804a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800804c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008050:	0212      	lsls	r2, r2, #8
 8008052:	4313      	orrs	r3, r2
 8008054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008056:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800805a:	4313      	orrs	r3, r2
 800805c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008062:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800806a:	061a      	lsls	r2, r3, #24
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	4313      	orrs	r3, r2
 8008076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008078:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800807c:	0212      	lsls	r2, r2, #8
 800807e:	4313      	orrs	r3, r2
 8008080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008082:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008086:	4313      	orrs	r3, r2
 8008088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800808e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008096:	461a      	mov	r2, r3
 8008098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800809c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800809e:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <find_volume+0x660>)
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <find_volume+0x660>)
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <find_volume+0x660>)
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80080b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080b8:	f7fe fa64 	bl	8006584 <clear_lock>
#endif

	return FR_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3758      	adds	r7, #88	; 0x58
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	ffffaa55 	.word	0xffffaa55
 80080cc:	41615252 	.word	0x41615252
 80080d0:	61417272 	.word	0x61417272
 80080d4:	20001ac8 	.word	0x20001ac8

080080d8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d02a      	beq.n	8008140 <validate+0x68>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d024      	beq.n	8008140 <validate+0x68>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <validate+0x68>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008114:	88da      	ldrh	r2, [r3, #6]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811c:	889b      	ldrh	r3, [r3, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d10e      	bne.n	8008140 <validate+0x68>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	4618      	mov	r0, r3
 8008132:	f7fd ffbd 	bl	80060b0 <disk_status>
 8008136:	4603      	mov	r3, r0
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008140:	2309      	movs	r3, #9
 8008142:	e000      	b.n	8008146 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008162:	f107 0310 	add.w	r3, r7, #16
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fbd2 	bl	8007910 <get_ldnumber>
 800816c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da01      	bge.n	8008178 <f_mount+0x28>
 8008174:	230b      	movs	r3, #11
 8008176:	e02f      	b.n	80081d8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008178:	4a19      	ldr	r2, [pc, #100]	; (80081e0 <f_mount+0x90>)
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008180:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008188:	69b8      	ldr	r0, [r7, #24]
 800818a:	f7fe f9fb 	bl	8006584 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	490d      	ldr	r1, [pc, #52]	; (80081e0 <f_mount+0x90>)
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <f_mount+0x6e>
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <f_mount+0x72>
 80081be:	2300      	movs	r3, #0
 80081c0:	e00a      	b.n	80081d8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80081c2:	f107 0108 	add.w	r1, r7, #8
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	2200      	movs	r2, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fc51 	bl	8007a74 <find_volume>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20001ac4 	.word	0x20001ac4

080081e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081f2:	f843 0c44 	str.w	r0, [r3, #-68]
 80081f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081fa:	f843 1c48 	str.w	r1, [r3, #-72]
 80081fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008202:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008206:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800820a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <f_open+0x32>
 8008212:	2309      	movs	r3, #9
 8008214:	e2e6      	b.n	80087e4 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 8008216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800821a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800821e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008222:	461a      	mov	r2, r3
 8008224:	2300      	movs	r3, #0
 8008226:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800822c:	461a      	mov	r2, r3
 800822e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008232:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800823e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008242:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	f107 0110 	add.w	r1, r7, #16
 8008250:	3908      	subs	r1, #8
 8008252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008256:	3b10      	subs	r3, #16
 8008258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fc09 	bl	8007a74 <find_volume>
 8008262:	4603      	mov	r3, r0
 8008264:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008268:	f102 020f 	add.w	r2, r2, #15
 800826c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800826e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008272:	f103 030f 	add.w	r3, r3, #15
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 82ae 	bne.w	80087da <f_open+0x5f6>
		INIT_BUF(dj);
 800827e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008282:	461a      	mov	r2, r3
 8008284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008288:	3b1c      	subs	r3, #28
 800828a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800828e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008292:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8008296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800829a:	3b10      	subs	r3, #16
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fac0 	bl	8007824 <follow_path>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082aa:	f102 020f 	add.w	r2, r2, #15
 80082ae:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80082b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082b4:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80082b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082bc:	f102 0208 	add.w	r2, r2, #8
 80082c0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082c6:	f103 030f 	add.w	r3, r3, #15
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d126      	bne.n	800831e <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 80082d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082d4:	f103 0308 	add.w	r3, r3, #8
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <f_open+0x108>
				res = FR_INVALID_NAME;
 80082de:	2306      	movs	r3, #6
 80082e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082e4:	f102 020f 	add.w	r2, r2, #15
 80082e8:	7013      	strb	r3, [r2, #0]
 80082ea:	e018      	b.n	800831e <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082f0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bf14      	ite	ne
 80082fc:	2301      	movne	r3, #1
 80082fe:	2300      	moveq	r3, #0
 8008300:	b2db      	uxtb	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008308:	3b10      	subs	r3, #16
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd ffe9 	bl	80062e4 <chk_lock>
 8008312:	4603      	mov	r3, r0
 8008314:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008318:	f102 020f 	add.w	r2, r2, #15
 800831c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800831e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008322:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008326:	f003 031c 	and.w	r3, r3, #28
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 8134 	beq.w	8008598 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8008330:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008334:	f103 030f 	add.w	r3, r3, #15
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d02e      	beq.n	800839c <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800833e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008342:	f103 030f 	add.w	r3, r3, #15
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d112      	bne.n	8008372 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800834c:	f7fe f83a 	bl	80063c4 <enq_lock>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <f_open+0x182>
 8008356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800835a:	3b10      	subs	r3, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff f8ed 	bl	800753c <dir_register>
 8008362:	4603      	mov	r3, r0
 8008364:	e000      	b.n	8008368 <f_open+0x184>
 8008366:	2312      	movs	r3, #18
 8008368:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800836c:	f102 020f 	add.w	r2, r2, #15
 8008370:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008376:	461a      	mov	r2, r3
 8008378:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800837c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008380:	f043 0308 	orr.w	r3, r3, #8
 8008384:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8008388:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800838c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008390:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008394:	f102 0208 	add.w	r2, r2, #8
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e01f      	b.n	80083dc <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800839c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083a0:	f103 0308 	add.w	r3, r3, #8
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330b      	adds	r3, #11
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 0311 	and.w	r3, r3, #17
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d006      	beq.n	80083c0 <f_open+0x1dc>
					res = FR_DENIED;
 80083b2:	2307      	movs	r3, #7
 80083b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083b8:	f102 020f 	add.w	r2, r2, #15
 80083bc:	7013      	strb	r3, [r2, #0]
 80083be:	e00d      	b.n	80083dc <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80083c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083c4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <f_open+0x1f8>
						res = FR_EXIST;
 80083d0:	2308      	movs	r3, #8
 80083d2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083d6:	f102 020f 	add.w	r2, r2, #15
 80083da:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80083dc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083e0:	f103 030f 	add.w	r3, r3, #15
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 8108 	bne.w	80085fc <f_open+0x418>
 80083ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083f0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80ff 	beq.w	80085fc <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 80083fe:	f7fd fd93 	bl	8005f28 <get_fattime>
 8008402:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008406:	f103 0304 	add.w	r3, r3, #4
 800840a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800840c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008410:	f103 0308 	add.w	r3, r3, #8
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330e      	adds	r3, #14
 8008418:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800841c:	f102 0204 	add.w	r2, r2, #4
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800842a:	f103 0304 	add.w	r3, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	b29a      	uxth	r2, r3
 8008436:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800843a:	f103 0308 	add.w	r3, r3, #8
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	330f      	adds	r3, #15
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800844a:	f103 0304 	add.w	r3, r3, #4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	0c1a      	lsrs	r2, r3, #16
 8008452:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008456:	f103 0308 	add.w	r3, r3, #8
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3310      	adds	r3, #16
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008466:	f103 0304 	add.w	r3, r3, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	0e1a      	lsrs	r2, r3, #24
 800846e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008472:	f103 0308 	add.w	r3, r3, #8
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3311      	adds	r3, #17
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800847e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008482:	f103 0308 	add.w	r3, r3, #8
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	330b      	adds	r3, #11
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800848e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008492:	f103 0308 	add.w	r3, r3, #8
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	331c      	adds	r3, #28
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084a2:	f103 0308 	add.w	r3, r3, #8
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	331d      	adds	r3, #29
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084b2:	f103 0308 	add.w	r3, r3, #8
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	331e      	adds	r3, #30
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c2:	f103 0308 	add.w	r3, r3, #8
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	331f      	adds	r3, #31
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80084ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084d2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80084d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084da:	f102 0208 	add.w	r2, r2, #8
 80084de:	6811      	ldr	r1, [r2, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe ff1f 	bl	8007324 <ld_clust>
 80084e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084ea:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80084ec:	2100      	movs	r1, #0
 80084ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084f2:	f103 0308 	add.w	r3, r3, #8
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	f7fe ff42 	bl	8007380 <st_clust>
				dj.fs->wflag = 1;
 80084fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008500:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008508:	2201      	movs	r2, #1
 800850a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800850c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d072      	beq.n	80085fc <f_open+0x418>
					dw = dj.fs->winsect;
 8008516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800851a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800851e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008528:	f102 0204 	add.w	r2, r2, #4
 800852c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800852e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008532:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008536:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800853a:	6811      	ldr	r1, [r2, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fb42 	bl	8006bc6 <remove_chain>
 8008542:	4603      	mov	r3, r0
 8008544:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008548:	f102 020f 	add.w	r2, r2, #15
 800854c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800854e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008552:	f103 030f 	add.w	r3, r3, #15
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d14f      	bne.n	80085fc <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800855c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008560:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8008564:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3b01      	subs	r3, #1
 800856c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008570:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8008572:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008576:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800857a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800857e:	f102 0204 	add.w	r2, r2, #4
 8008582:	6811      	ldr	r1, [r2, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe f879 	bl	800667c <move_window>
 800858a:	4603      	mov	r3, r0
 800858c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008590:	f102 020f 	add.w	r2, r2, #15
 8008594:	7013      	strb	r3, [r2, #0]
 8008596:	e031      	b.n	80085fc <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008598:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800859c:	f103 030f 	add.w	r3, r3, #15
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d12a      	bne.n	80085fc <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80085a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085aa:	f103 0308 	add.w	r3, r3, #8
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	330b      	adds	r3, #11
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <f_open+0x3e6>
					res = FR_NO_FILE;
 80085bc:	2304      	movs	r3, #4
 80085be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085c2:	f102 020f 	add.w	r2, r2, #15
 80085c6:	7013      	strb	r3, [r2, #0]
 80085c8:	e018      	b.n	80085fc <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80085ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085ce:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <f_open+0x418>
 80085da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085de:	f103 0308 	add.w	r3, r3, #8
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330b      	adds	r3, #11
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <f_open+0x418>
						res = FR_DENIED;
 80085f0:	2307      	movs	r3, #7
 80085f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085f6:	f102 020f 	add.w	r2, r2, #15
 80085fa:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80085fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008600:	f103 030f 	add.w	r3, r3, #15
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d157      	bne.n	80086ba <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800860a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800860e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <f_open+0x44c>
				mode |= FA__WRITTEN;
 800861a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800861e:	461a      	mov	r2, r3
 8008620:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008624:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008628:	f043 0320 	orr.w	r3, r3, #32
 800862c:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008630:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008634:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008642:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800864a:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800864c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008650:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008658:	461a      	mov	r2, r3
 800865a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800865e:	f103 0308 	add.w	r3, r3, #8
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800866a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800866e:	f023 0301 	bic.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	bf14      	ite	ne
 8008676:	2301      	movne	r3, #1
 8008678:	2300      	moveq	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008682:	3b10      	subs	r3, #16
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7fd fec0 	bl	800640c <inc_lock>
 800868c:	4602      	mov	r2, r0
 800868e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008692:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869a:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800869c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <f_open+0x4d6>
 80086ae:	2302      	movs	r3, #2
 80086b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086b4:	f102 020f 	add.w	r2, r2, #15
 80086b8:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80086ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086be:	f103 030f 	add.w	r3, r3, #15
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 8088 	bne.w	80087da <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 80086ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	461a      	mov	r2, r3
 80086d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086dc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80086e0:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80086e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ee:	2200      	movs	r2, #0
 80086f0:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80086f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086f6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80086fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086fe:	f102 0208 	add.w	r2, r2, #8
 8008702:	6811      	ldr	r1, [r2, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fe0d 	bl	8007324 <ld_clust>
 800870a:	4602      	mov	r2, r0
 800870c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008710:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008718:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800871a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800871e:	f103 0308 	add.w	r3, r3, #8
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	331f      	adds	r3, #31
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	061a      	lsls	r2, r3, #24
 800872a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800872e:	f103 0308 	add.w	r3, r3, #8
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	331e      	adds	r3, #30
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	4313      	orrs	r3, r2
 800873c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008740:	f102 0208 	add.w	r2, r2, #8
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	321d      	adds	r2, #29
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	0212      	lsls	r2, r2, #8
 800874c:	4313      	orrs	r3, r2
 800874e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008752:	f102 0208 	add.w	r2, r2, #8
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	321c      	adds	r2, #28
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	4313      	orrs	r3, r2
 800875e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008762:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800876a:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800876c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008770:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008778:	461a      	mov	r2, r3
 800877a:	2300      	movs	r3, #0
 800877c:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800877e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008782:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800878a:	461a      	mov	r2, r3
 800878c:	2300      	movs	r3, #0
 800878e:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008790:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008794:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879c:	461a      	mov	r2, r3
 800879e:	2300      	movs	r3, #0
 80087a0:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80087a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087a6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80087aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80087ae:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80087b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087b6:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80087b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087bc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ca:	88da      	ldrh	r2, [r3, #6]
 80087cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087d0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d8:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80087da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80087de:	f103 030f 	add.w	r3, r3, #15
 80087e2:	781b      	ldrb	r3, [r3, #0]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	; 0x30
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff fc65 	bl	80080d8 <validate>
 800880e:	4603      	mov	r3, r0
 8008810:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008812:	7ffb      	ldrb	r3, [r7, #31]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <f_read+0x2c>
 8008818:	7ffb      	ldrb	r3, [r7, #31]
 800881a:	e1cd      	b.n	8008bb8 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008822:	79db      	ldrb	r3, [r3, #7]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882e:	79db      	ldrb	r3, [r3, #7]
 8008830:	e1c2      	b.n	8008bb8 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	799b      	ldrb	r3, [r3, #6]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008842:	2307      	movs	r3, #7
 8008844:	e1b8      	b.n	8008bb8 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	429a      	cmp	r2, r3
 8008860:	f240 81a5 	bls.w	8008bae <f_read+0x3be>
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008868:	e1a1      	b.n	8008bae <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008878:	6812      	ldr	r2, [r2, #0]
 800887a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800887e:	8952      	ldrh	r2, [r2, #10]
 8008880:	fbb3 f1f2 	udiv	r1, r3, r2
 8008884:	fb01 f202 	mul.w	r2, r1, r2
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 8140 	bne.w	8008b10 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088a4:	8952      	ldrh	r2, [r2, #10]
 80088a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b8:	789b      	ldrb	r3, [r3, #2]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	4013      	ands	r3, r2
 80088c0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d143      	bne.n	8008950 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088de:	e01c      	b.n	800891a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4619      	mov	r1, r3
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7fe fa6e 	bl	8006dd8 <clmt_clust>
 80088fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088fe:	e00c      	b.n	800891a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fd ff08 	bl	8006728 <get_fat>
 8008918:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d806      	bhi.n	800892e <f_read+0x13e>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008926:	2202      	movs	r2, #2
 8008928:	71da      	strb	r2, [r3, #7]
 800892a:	2302      	movs	r3, #2
 800892c:	e144      	b.n	8008bb8 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d106      	bne.n	8008944 <f_read+0x154>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800893c:	2201      	movs	r2, #1
 800893e:	71da      	strb	r2, [r3, #7]
 8008940:	2301      	movs	r3, #1
 8008942:	e139      	b.n	8008bb8 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894a:	461a      	mov	r2, r3
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	4619      	mov	r1, r3
 8008962:	4610      	mov	r0, r2
 8008964:	f7fd febc 	bl	80066e0 <clust2sect>
 8008968:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <f_read+0x18e>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008976:	2202      	movs	r2, #2
 8008978:	71da      	strb	r2, [r3, #7]
 800897a:	2302      	movs	r3, #2
 800897c:	e11c      	b.n	8008bb8 <f_read+0x3c8>
			sect += csect;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	4413      	add	r3, r2
 8008984:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008992:	895b      	ldrh	r3, [r3, #10]
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	fbb3 f3f2 	udiv	r3, r3, r2
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d066      	beq.n	8008a72 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80089a4:	7dfa      	ldrb	r2, [r7, #23]
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	4413      	add	r3, r2
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089b6:	7892      	ldrb	r2, [r2, #2]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d90a      	bls.n	80089d2 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	789b      	ldrb	r3, [r3, #2]
 80089ca:	461a      	mov	r2, r3
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089de:	7858      	ldrb	r0, [r3, #1]
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	6a39      	ldr	r1, [r7, #32]
 80089e6:	f7fd fba3 	bl	8006130 <disk_read>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f6:	2201      	movs	r2, #1
 80089f8:	71da      	strb	r2, [r3, #7]
 80089fa:	2301      	movs	r3, #1
 80089fc:	e0dc      	b.n	8008bb8 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a04:	799b      	ldrb	r3, [r3, #6]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d024      	beq.n	8008a58 <f_read+0x268>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d91b      	bls.n	8008a58 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a32:	6812      	ldr	r2, [r2, #0]
 8008a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a38:	8952      	ldrh	r2, [r2, #10]
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	18d0      	adds	r0, r2, r3
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	895b      	ldrh	r3, [r3, #10]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f7fd fbce 	bl	80061f4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a64:	895b      	ldrh	r3, [r3, #10]
 8008a66:	461a      	mov	r2, r3
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8008a70:	e085      	b.n	8008b7e <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d041      	beq.n	8008b04 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a86:	799b      	ldrb	r3, [r3, #6]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d023      	beq.n	8008ad8 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9c:	7858      	ldrb	r0, [r3, #1]
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f7fd fb65 	bl	8006178 <disk_write>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	2201      	movs	r2, #1
 8008abc:	71da      	strb	r2, [r3, #7]
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e07a      	b.n	8008bb8 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac8:	799b      	ldrb	r3, [r3, #6]
 8008aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad6:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae4:	7858      	ldrb	r0, [r3, #1]
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	2301      	movs	r3, #1
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	f7fd fb20 	bl	8006130 <disk_read>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d006      	beq.n	8008b04 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afc:	2201      	movs	r2, #1
 8008afe:	71da      	strb	r2, [r3, #7]
 8008b00:	2301      	movs	r3, #1
 8008b02:	e059      	b.n	8008bb8 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1c:	895b      	ldrh	r3, [r3, #10]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b34:	8952      	ldrh	r2, [r2, #10]
 8008b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3a:	fb01 f202 	mul.w	r2, r1, r2
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	1ac3      	subs	r3, r0, r3
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d901      	bls.n	8008b50 <f_read+0x360>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b64:	8952      	ldrh	r2, [r2, #10]
 8008b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b6a:	fb01 f202 	mul.w	r2, r1, r2
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b76:	4619      	mov	r1, r3
 8008b78:	6a38      	ldr	r0, [r7, #32]
 8008b7a:	f7fd fb3b 	bl	80061f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b7e:	6a3a      	ldr	r2, [r7, #32]
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	4413      	add	r3, r2
 8008b84:	623b      	str	r3, [r7, #32]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	4413      	add	r3, r2
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b98:	6093      	str	r3, [r2, #8]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	441a      	add	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f47f ae5a 	bne.w	800886a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3730      	adds	r7, #48	; 0x30
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <f_opendir+0x14>
 8008bd0:	2309      	movs	r3, #9
 8008bd2:	e083      	b.n	8008cdc <f_opendir+0x11c>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f107 0318 	add.w	r3, r7, #24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe ff49 	bl	8007a74 <find_volume>
 8008be2:	4603      	mov	r3, r0
 8008be4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8008be6:	7ffb      	ldrb	r3, [r7, #31]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d16d      	bne.n	8008cc8 <f_opendir+0x108>
		dp->fs = fs;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bf4:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f107 030c 	add.w	r3, r7, #12
 8008c02:	6193      	str	r3, [r2, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7fe fe0b 	bl	8007824 <follow_path>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8008c12:	7ffb      	ldrb	r3, [r7, #31]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d152      	bne.n	8008cbe <f_opendir+0xfe>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <f_opendir+0x9a>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	330b      	adds	r3, #11
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00e      	beq.n	8008c56 <f_opendir+0x96>
					dp->sclust = ld_clust(fs, dp->dir);
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe fb6d 	bl	8007324 <ld_clust>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	609a      	str	r2, [r3, #8]
 8008c54:	e001      	b.n	8008c5a <f_opendir+0x9a>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8008c56:	2305      	movs	r3, #5
 8008c58:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8008c5a:	7ffb      	ldrb	r3, [r7, #31]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d12e      	bne.n	8008cbe <f_opendir+0xfe>
				dp->id = fs->id;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c66:	88da      	ldrh	r2, [r3, #6]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008c70:	2100      	movs	r1, #0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fe f8f0 	bl	8006e58 <dir_sdi>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8008c7c:	7ffb      	ldrb	r3, [r7, #31]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d11d      	bne.n	8008cbe <f_opendir+0xfe>
					if (dp->sclust) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <f_opendir+0xf2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008c8e:	2100      	movs	r1, #0
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fd fbbb 	bl	800640c <inc_lock>
 8008c96:	4602      	mov	r2, r0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9e:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d108      	bne.n	8008cbe <f_opendir+0xfe>
							res = FR_TOO_MANY_OPEN_FILES;
 8008cac:	2312      	movs	r3, #18
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	e005      	b.n	8008cbe <f_opendir+0xfe>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	461a      	mov	r2, r3
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008cbe:	7ffb      	ldrb	r3, [r7, #31]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d101      	bne.n	8008cc8 <f_opendir+0x108>
 8008cc4:	2305      	movs	r3, #5
 8008cc6:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8008cc8:	7ffb      	ldrb	r3, [r7, #31]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <f_opendir+0x11a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 8008cda:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f9f2 	bl	80080d8 <validate>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d139      	bne.n	8008d72 <f_readdir+0x8e>
		if (!fno) {
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008d04:	2100      	movs	r1, #0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe f8a6 	bl	8006e58 <dir_sdi>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75fb      	strb	r3, [r7, #23]
 8008d10:	e02f      	b.n	8008d72 <f_readdir+0x8e>
		} else {
			INIT_BUF(*dp);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	6193      	str	r3, [r2, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fe fba5 	bl	8007472 <dir_read>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d107      	bne.n	8008d42 <f_readdir+0x5e>
				dp->sect = 0;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d38:	461a      	mov	r2, r3
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d114      	bne.n	8008d72 <f_readdir+0x8e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fe fc36 	bl	80075bc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008d50:	2100      	movs	r1, #0
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fe f94e 	bl	8006ff4 <dir_next>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d107      	bne.n	8008d72 <f_readdir+0x8e>
					dp->sect = 0;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d68:	461a      	mov	r2, r3
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008d92:	4b1e      	ldr	r3, [pc, #120]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008d94:	7a5b      	ldrb	r3, [r3, #9]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d831      	bhi.n	8008e00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d9c:	4b1b      	ldr	r3, [pc, #108]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008d9e:	7a5b      	ldrb	r3, [r3, #9]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b19      	ldr	r3, [pc, #100]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008da6:	2100      	movs	r1, #0
 8008da8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008daa:	4b18      	ldr	r3, [pc, #96]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008dac:	7a5b      	ldrb	r3, [r3, #9]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	4a16      	ldr	r2, [pc, #88]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008dba:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008dbc:	7a5b      	ldrb	r3, [r3, #9]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008dc4:	4413      	add	r3, r2
 8008dc6:	79fa      	ldrb	r2, [r7, #7]
 8008dc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008dcc:	7a5b      	ldrb	r3, [r3, #9]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	b2d1      	uxtb	r1, r2
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <FATFS_LinkDriverEx+0x90>)
 8008dd6:	7251      	strb	r1, [r2, #9]
 8008dd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dda:	7dbb      	ldrb	r3, [r7, #22]
 8008ddc:	3330      	adds	r3, #48	; 0x30
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	3301      	adds	r3, #1
 8008de8:	223a      	movs	r2, #58	; 0x3a
 8008dea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3302      	adds	r3, #2
 8008df0:	222f      	movs	r2, #47	; 0x2f
 8008df2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3303      	adds	r3, #3
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bc80      	pop	{r7}
 8008e0a:	4770      	bx	lr
 8008e0c:	20001ae4 	.word	0x20001ae4

08008e10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff ffac 	bl	8008d7c <FATFS_LinkDriverEx>
 8008e24:	4603      	mov	r3, r0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <SD_initialize+0x38>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008e40:	f7fd f87a 	bl	8005f38 <BSP_SD_Init>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d107      	bne.n	8008e5a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <SD_initialize+0x38>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <SD_initialize+0x38>)
 8008e58:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <SD_initialize+0x38>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2db      	uxtb	r3, r3
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000009 	.word	0x20000009

08008e6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <SD_status+0x38>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008e7c:	f7fd f8be 	bl	8005ffc <BSP_SD_GetCardState>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d107      	bne.n	8008e96 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e86:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <SD_status+0x38>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <SD_status+0x38>)
 8008e94:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8008e96:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <SD_status+0x38>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000009 	.word	0x20000009

08008ea8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <SD_read+0x54>)
 8008ebe:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <SD_read+0x58>)
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	68b8      	ldr	r0, [r7, #8]
 8008ec8:	f7fd f85c 	bl	8005f84 <BSP_SD_ReadBlocks>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10e      	bne.n	8008ef0 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ed2:	e006      	b.n	8008ee2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	1e5a      	subs	r2, r3, #1
 8008ed8:	613a      	str	r2, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <SD_read+0x3a>
      {
        return RES_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e007      	b.n	8008ef2 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ee2:	f7fd f88b 	bl	8005ffc <BSP_SD_GetCardState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1f3      	bne.n	8008ed4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	000186a0 	.word	0x000186a0
 8008f00:	05f5e100 	.word	0x05f5e100

08008f04 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <SD_write+0x54>)
 8008f1a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <SD_write+0x58>)
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	68b8      	ldr	r0, [r7, #8]
 8008f24:	f7fd f84c 	bl	8005fc0 <BSP_SD_WriteBlocks>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10e      	bne.n	8008f4c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f2e:	e006      	b.n	8008f3e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	1e5a      	subs	r2, r3, #1
 8008f34:	613a      	str	r2, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <SD_write+0x3a>
      {
        return RES_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e007      	b.n	8008f4e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f3e:	f7fd f85d 	bl	8005ffc <BSP_SD_GetCardState>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1f3      	bne.n	8008f30 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	000186a0 	.word	0x000186a0
 8008f5c:	05f5e100 	.word	0x05f5e100

08008f60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08c      	sub	sp, #48	; 0x30
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	603a      	str	r2, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <SD_ioctl+0xa8>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <SD_ioctl+0x28>
 8008f84:	2303      	movs	r3, #3
 8008f86:	e03b      	b.n	8009000 <SD_ioctl+0xa0>
  
  switch (cmd)
 8008f88:	79bb      	ldrb	r3, [r7, #6]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d833      	bhi.n	8008ff6 <SD_ioctl+0x96>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <SD_ioctl+0x34>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fa5 	.word	0x08008fa5
 8008f98:	08008fad 	.word	0x08008fad
 8008f9c:	08008fc5 	.word	0x08008fc5
 8008fa0:	08008fdf 	.word	0x08008fdf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008faa:	e027      	b.n	8008ffc <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fd f833 	bl	800601c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fc2:	e01b      	b.n	8008ffc <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fc4:	f107 030c 	add.w	r3, r7, #12
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fd f827 	bl	800601c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fdc:	e00e      	b.n	8008ffc <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fde:	f107 030c 	add.w	r3, r7, #12
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fd f81a 	bl	800601c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8008fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ff4:	e002      	b.n	8008ffc <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8008ff6:	2304      	movs	r3, #4
 8008ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8008ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009000:	4618      	mov	r0, r3
 8009002:	3730      	adds	r7, #48	; 0x30
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000009 	.word	0x20000009

0800900c <__errno>:
 800900c:	4b01      	ldr	r3, [pc, #4]	; (8009014 <__errno+0x8>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	2000000c 	.word	0x2000000c

08009018 <__libc_init_array>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	2600      	movs	r6, #0
 800901c:	4d0c      	ldr	r5, [pc, #48]	; (8009050 <__libc_init_array+0x38>)
 800901e:	4c0d      	ldr	r4, [pc, #52]	; (8009054 <__libc_init_array+0x3c>)
 8009020:	1b64      	subs	r4, r4, r5
 8009022:	10a4      	asrs	r4, r4, #2
 8009024:	42a6      	cmp	r6, r4
 8009026:	d109      	bne.n	800903c <__libc_init_array+0x24>
 8009028:	f000 fc9c 	bl	8009964 <_init>
 800902c:	2600      	movs	r6, #0
 800902e:	4d0a      	ldr	r5, [pc, #40]	; (8009058 <__libc_init_array+0x40>)
 8009030:	4c0a      	ldr	r4, [pc, #40]	; (800905c <__libc_init_array+0x44>)
 8009032:	1b64      	subs	r4, r4, r5
 8009034:	10a4      	asrs	r4, r4, #2
 8009036:	42a6      	cmp	r6, r4
 8009038:	d105      	bne.n	8009046 <__libc_init_array+0x2e>
 800903a:	bd70      	pop	{r4, r5, r6, pc}
 800903c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009040:	4798      	blx	r3
 8009042:	3601      	adds	r6, #1
 8009044:	e7ee      	b.n	8009024 <__libc_init_array+0xc>
 8009046:	f855 3b04 	ldr.w	r3, [r5], #4
 800904a:	4798      	blx	r3
 800904c:	3601      	adds	r6, #1
 800904e:	e7f2      	b.n	8009036 <__libc_init_array+0x1e>
 8009050:	0800a15c 	.word	0x0800a15c
 8009054:	0800a15c 	.word	0x0800a15c
 8009058:	0800a15c 	.word	0x0800a15c
 800905c:	0800a160 	.word	0x0800a160

08009060 <memset>:
 8009060:	4603      	mov	r3, r0
 8009062:	4402      	add	r2, r0
 8009064:	4293      	cmp	r3, r2
 8009066:	d100      	bne.n	800906a <memset+0xa>
 8009068:	4770      	bx	lr
 800906a:	f803 1b01 	strb.w	r1, [r3], #1
 800906e:	e7f9      	b.n	8009064 <memset+0x4>

08009070 <siprintf>:
 8009070:	b40e      	push	{r1, r2, r3}
 8009072:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009076:	b500      	push	{lr}
 8009078:	b09c      	sub	sp, #112	; 0x70
 800907a:	ab1d      	add	r3, sp, #116	; 0x74
 800907c:	9002      	str	r0, [sp, #8]
 800907e:	9006      	str	r0, [sp, #24]
 8009080:	9107      	str	r1, [sp, #28]
 8009082:	9104      	str	r1, [sp, #16]
 8009084:	4808      	ldr	r0, [pc, #32]	; (80090a8 <siprintf+0x38>)
 8009086:	4909      	ldr	r1, [pc, #36]	; (80090ac <siprintf+0x3c>)
 8009088:	f853 2b04 	ldr.w	r2, [r3], #4
 800908c:	9105      	str	r1, [sp, #20]
 800908e:	6800      	ldr	r0, [r0, #0]
 8009090:	a902      	add	r1, sp, #8
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	f000 f868 	bl	8009168 <_svfiprintf_r>
 8009098:	2200      	movs	r2, #0
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	701a      	strb	r2, [r3, #0]
 800909e:	b01c      	add	sp, #112	; 0x70
 80090a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090a4:	b003      	add	sp, #12
 80090a6:	4770      	bx	lr
 80090a8:	2000000c 	.word	0x2000000c
 80090ac:	ffff0208 	.word	0xffff0208

080090b0 <__ssputs_r>:
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	688e      	ldr	r6, [r1, #8]
 80090b6:	4682      	mov	sl, r0
 80090b8:	429e      	cmp	r6, r3
 80090ba:	460c      	mov	r4, r1
 80090bc:	4690      	mov	r8, r2
 80090be:	461f      	mov	r7, r3
 80090c0:	d838      	bhi.n	8009134 <__ssputs_r+0x84>
 80090c2:	898a      	ldrh	r2, [r1, #12]
 80090c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090c8:	d032      	beq.n	8009130 <__ssputs_r+0x80>
 80090ca:	6825      	ldr	r5, [r4, #0]
 80090cc:	6909      	ldr	r1, [r1, #16]
 80090ce:	3301      	adds	r3, #1
 80090d0:	eba5 0901 	sub.w	r9, r5, r1
 80090d4:	6965      	ldr	r5, [r4, #20]
 80090d6:	444b      	add	r3, r9
 80090d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090e0:	106d      	asrs	r5, r5, #1
 80090e2:	429d      	cmp	r5, r3
 80090e4:	bf38      	it	cc
 80090e6:	461d      	movcc	r5, r3
 80090e8:	0553      	lsls	r3, r2, #21
 80090ea:	d531      	bpl.n	8009150 <__ssputs_r+0xa0>
 80090ec:	4629      	mov	r1, r5
 80090ee:	f000 fb6f 	bl	80097d0 <_malloc_r>
 80090f2:	4606      	mov	r6, r0
 80090f4:	b950      	cbnz	r0, 800910c <__ssputs_r+0x5c>
 80090f6:	230c      	movs	r3, #12
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	f8ca 3000 	str.w	r3, [sl]
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910c:	464a      	mov	r2, r9
 800910e:	6921      	ldr	r1, [r4, #16]
 8009110:	f000 face 	bl	80096b0 <memcpy>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	6126      	str	r6, [r4, #16]
 8009122:	444e      	add	r6, r9
 8009124:	6026      	str	r6, [r4, #0]
 8009126:	463e      	mov	r6, r7
 8009128:	6165      	str	r5, [r4, #20]
 800912a:	eba5 0509 	sub.w	r5, r5, r9
 800912e:	60a5      	str	r5, [r4, #8]
 8009130:	42be      	cmp	r6, r7
 8009132:	d900      	bls.n	8009136 <__ssputs_r+0x86>
 8009134:	463e      	mov	r6, r7
 8009136:	4632      	mov	r2, r6
 8009138:	4641      	mov	r1, r8
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	f000 fac6 	bl	80096cc <memmove>
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	2000      	movs	r0, #0
 8009144:	1b9b      	subs	r3, r3, r6
 8009146:	60a3      	str	r3, [r4, #8]
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	4433      	add	r3, r6
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	e7db      	b.n	8009108 <__ssputs_r+0x58>
 8009150:	462a      	mov	r2, r5
 8009152:	f000 fbb1 	bl	80098b8 <_realloc_r>
 8009156:	4606      	mov	r6, r0
 8009158:	2800      	cmp	r0, #0
 800915a:	d1e1      	bne.n	8009120 <__ssputs_r+0x70>
 800915c:	4650      	mov	r0, sl
 800915e:	6921      	ldr	r1, [r4, #16]
 8009160:	f000 face 	bl	8009700 <_free_r>
 8009164:	e7c7      	b.n	80090f6 <__ssputs_r+0x46>
	...

08009168 <_svfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	4698      	mov	r8, r3
 800916e:	898b      	ldrh	r3, [r1, #12]
 8009170:	4607      	mov	r7, r0
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	460d      	mov	r5, r1
 8009176:	4614      	mov	r4, r2
 8009178:	b09d      	sub	sp, #116	; 0x74
 800917a:	d50e      	bpl.n	800919a <_svfiprintf_r+0x32>
 800917c:	690b      	ldr	r3, [r1, #16]
 800917e:	b963      	cbnz	r3, 800919a <_svfiprintf_r+0x32>
 8009180:	2140      	movs	r1, #64	; 0x40
 8009182:	f000 fb25 	bl	80097d0 <_malloc_r>
 8009186:	6028      	str	r0, [r5, #0]
 8009188:	6128      	str	r0, [r5, #16]
 800918a:	b920      	cbnz	r0, 8009196 <_svfiprintf_r+0x2e>
 800918c:	230c      	movs	r3, #12
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e0d1      	b.n	800933a <_svfiprintf_r+0x1d2>
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	616b      	str	r3, [r5, #20]
 800919a:	2300      	movs	r3, #0
 800919c:	9309      	str	r3, [sp, #36]	; 0x24
 800919e:	2320      	movs	r3, #32
 80091a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091a4:	2330      	movs	r3, #48	; 0x30
 80091a6:	f04f 0901 	mov.w	r9, #1
 80091aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009354 <_svfiprintf_r+0x1ec>
 80091b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b6:	4623      	mov	r3, r4
 80091b8:	469a      	mov	sl, r3
 80091ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091be:	b10a      	cbz	r2, 80091c4 <_svfiprintf_r+0x5c>
 80091c0:	2a25      	cmp	r2, #37	; 0x25
 80091c2:	d1f9      	bne.n	80091b8 <_svfiprintf_r+0x50>
 80091c4:	ebba 0b04 	subs.w	fp, sl, r4
 80091c8:	d00b      	beq.n	80091e2 <_svfiprintf_r+0x7a>
 80091ca:	465b      	mov	r3, fp
 80091cc:	4622      	mov	r2, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff ff6d 	bl	80090b0 <__ssputs_r>
 80091d6:	3001      	adds	r0, #1
 80091d8:	f000 80aa 	beq.w	8009330 <_svfiprintf_r+0x1c8>
 80091dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091de:	445a      	add	r2, fp
 80091e0:	9209      	str	r2, [sp, #36]	; 0x24
 80091e2:	f89a 3000 	ldrb.w	r3, [sl]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 80a2 	beq.w	8009330 <_svfiprintf_r+0x1c8>
 80091ec:	2300      	movs	r3, #0
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f6:	f10a 0a01 	add.w	sl, sl, #1
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	9307      	str	r3, [sp, #28]
 80091fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009202:	931a      	str	r3, [sp, #104]	; 0x68
 8009204:	4654      	mov	r4, sl
 8009206:	2205      	movs	r2, #5
 8009208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920c:	4851      	ldr	r0, [pc, #324]	; (8009354 <_svfiprintf_r+0x1ec>)
 800920e:	f000 fa41 	bl	8009694 <memchr>
 8009212:	9a04      	ldr	r2, [sp, #16]
 8009214:	b9d8      	cbnz	r0, 800924e <_svfiprintf_r+0xe6>
 8009216:	06d0      	lsls	r0, r2, #27
 8009218:	bf44      	itt	mi
 800921a:	2320      	movmi	r3, #32
 800921c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009220:	0711      	lsls	r1, r2, #28
 8009222:	bf44      	itt	mi
 8009224:	232b      	movmi	r3, #43	; 0x2b
 8009226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922a:	f89a 3000 	ldrb.w	r3, [sl]
 800922e:	2b2a      	cmp	r3, #42	; 0x2a
 8009230:	d015      	beq.n	800925e <_svfiprintf_r+0xf6>
 8009232:	4654      	mov	r4, sl
 8009234:	2000      	movs	r0, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	4621      	mov	r1, r4
 800923e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009242:	3b30      	subs	r3, #48	; 0x30
 8009244:	2b09      	cmp	r3, #9
 8009246:	d94e      	bls.n	80092e6 <_svfiprintf_r+0x17e>
 8009248:	b1b0      	cbz	r0, 8009278 <_svfiprintf_r+0x110>
 800924a:	9207      	str	r2, [sp, #28]
 800924c:	e014      	b.n	8009278 <_svfiprintf_r+0x110>
 800924e:	eba0 0308 	sub.w	r3, r0, r8
 8009252:	fa09 f303 	lsl.w	r3, r9, r3
 8009256:	4313      	orrs	r3, r2
 8009258:	46a2      	mov	sl, r4
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	e7d2      	b.n	8009204 <_svfiprintf_r+0x9c>
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	1d19      	adds	r1, r3, #4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	9103      	str	r1, [sp, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfbb      	ittet	lt
 800926a:	425b      	neglt	r3, r3
 800926c:	f042 0202 	orrlt.w	r2, r2, #2
 8009270:	9307      	strge	r3, [sp, #28]
 8009272:	9307      	strlt	r3, [sp, #28]
 8009274:	bfb8      	it	lt
 8009276:	9204      	strlt	r2, [sp, #16]
 8009278:	7823      	ldrb	r3, [r4, #0]
 800927a:	2b2e      	cmp	r3, #46	; 0x2e
 800927c:	d10c      	bne.n	8009298 <_svfiprintf_r+0x130>
 800927e:	7863      	ldrb	r3, [r4, #1]
 8009280:	2b2a      	cmp	r3, #42	; 0x2a
 8009282:	d135      	bne.n	80092f0 <_svfiprintf_r+0x188>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	3402      	adds	r4, #2
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9203      	str	r2, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	f04f 33ff 	movlt.w	r3, #4294967295
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009358 <_svfiprintf_r+0x1f0>
 800929c:	2203      	movs	r2, #3
 800929e:	4650      	mov	r0, sl
 80092a0:	7821      	ldrb	r1, [r4, #0]
 80092a2:	f000 f9f7 	bl	8009694 <memchr>
 80092a6:	b140      	cbz	r0, 80092ba <_svfiprintf_r+0x152>
 80092a8:	2340      	movs	r3, #64	; 0x40
 80092aa:	eba0 000a 	sub.w	r0, r0, sl
 80092ae:	fa03 f000 	lsl.w	r0, r3, r0
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	3401      	adds	r4, #1
 80092b6:	4303      	orrs	r3, r0
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092be:	2206      	movs	r2, #6
 80092c0:	4826      	ldr	r0, [pc, #152]	; (800935c <_svfiprintf_r+0x1f4>)
 80092c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c6:	f000 f9e5 	bl	8009694 <memchr>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d038      	beq.n	8009340 <_svfiprintf_r+0x1d8>
 80092ce:	4b24      	ldr	r3, [pc, #144]	; (8009360 <_svfiprintf_r+0x1f8>)
 80092d0:	bb1b      	cbnz	r3, 800931a <_svfiprintf_r+0x1b2>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	3307      	adds	r3, #7
 80092d6:	f023 0307 	bic.w	r3, r3, #7
 80092da:	3308      	adds	r3, #8
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	4433      	add	r3, r6
 80092e2:	9309      	str	r3, [sp, #36]	; 0x24
 80092e4:	e767      	b.n	80091b6 <_svfiprintf_r+0x4e>
 80092e6:	460c      	mov	r4, r1
 80092e8:	2001      	movs	r0, #1
 80092ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ee:	e7a5      	b.n	800923c <_svfiprintf_r+0xd4>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4619      	mov	r1, r3
 80092f8:	3401      	adds	r4, #1
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	4620      	mov	r0, r4
 80092fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009302:	3a30      	subs	r2, #48	; 0x30
 8009304:	2a09      	cmp	r2, #9
 8009306:	d903      	bls.n	8009310 <_svfiprintf_r+0x1a8>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0c5      	beq.n	8009298 <_svfiprintf_r+0x130>
 800930c:	9105      	str	r1, [sp, #20]
 800930e:	e7c3      	b.n	8009298 <_svfiprintf_r+0x130>
 8009310:	4604      	mov	r4, r0
 8009312:	2301      	movs	r3, #1
 8009314:	fb0c 2101 	mla	r1, ip, r1, r2
 8009318:	e7f0      	b.n	80092fc <_svfiprintf_r+0x194>
 800931a:	ab03      	add	r3, sp, #12
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	462a      	mov	r2, r5
 8009320:	4638      	mov	r0, r7
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <_svfiprintf_r+0x1fc>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	f3af 8000 	nop.w
 800932a:	1c42      	adds	r2, r0, #1
 800932c:	4606      	mov	r6, r0
 800932e:	d1d6      	bne.n	80092de <_svfiprintf_r+0x176>
 8009330:	89ab      	ldrh	r3, [r5, #12]
 8009332:	065b      	lsls	r3, r3, #25
 8009334:	f53f af2c 	bmi.w	8009190 <_svfiprintf_r+0x28>
 8009338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933a:	b01d      	add	sp, #116	; 0x74
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	ab03      	add	r3, sp, #12
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462a      	mov	r2, r5
 8009346:	4638      	mov	r0, r7
 8009348:	4b06      	ldr	r3, [pc, #24]	; (8009364 <_svfiprintf_r+0x1fc>)
 800934a:	a904      	add	r1, sp, #16
 800934c:	f000 f87c 	bl	8009448 <_printf_i>
 8009350:	e7eb      	b.n	800932a <_svfiprintf_r+0x1c2>
 8009352:	bf00      	nop
 8009354:	0800a128 	.word	0x0800a128
 8009358:	0800a12e 	.word	0x0800a12e
 800935c:	0800a132 	.word	0x0800a132
 8009360:	00000000 	.word	0x00000000
 8009364:	080090b1 	.word	0x080090b1

08009368 <_printf_common>:
 8009368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	4616      	mov	r6, r2
 800936e:	4699      	mov	r9, r3
 8009370:	688a      	ldr	r2, [r1, #8]
 8009372:	690b      	ldr	r3, [r1, #16]
 8009374:	4607      	mov	r7, r0
 8009376:	4293      	cmp	r3, r2
 8009378:	bfb8      	it	lt
 800937a:	4613      	movlt	r3, r2
 800937c:	6033      	str	r3, [r6, #0]
 800937e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009382:	460c      	mov	r4, r1
 8009384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009388:	b10a      	cbz	r2, 800938e <_printf_common+0x26>
 800938a:	3301      	adds	r3, #1
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	0699      	lsls	r1, r3, #26
 8009392:	bf42      	ittt	mi
 8009394:	6833      	ldrmi	r3, [r6, #0]
 8009396:	3302      	addmi	r3, #2
 8009398:	6033      	strmi	r3, [r6, #0]
 800939a:	6825      	ldr	r5, [r4, #0]
 800939c:	f015 0506 	ands.w	r5, r5, #6
 80093a0:	d106      	bne.n	80093b0 <_printf_common+0x48>
 80093a2:	f104 0a19 	add.w	sl, r4, #25
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	6832      	ldr	r2, [r6, #0]
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	dc28      	bgt.n	8009402 <_printf_common+0x9a>
 80093b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093b4:	1e13      	subs	r3, r2, #0
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	bf18      	it	ne
 80093ba:	2301      	movne	r3, #1
 80093bc:	0692      	lsls	r2, r2, #26
 80093be:	d42d      	bmi.n	800941c <_printf_common+0xb4>
 80093c0:	4649      	mov	r1, r9
 80093c2:	4638      	mov	r0, r7
 80093c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093c8:	47c0      	blx	r8
 80093ca:	3001      	adds	r0, #1
 80093cc:	d020      	beq.n	8009410 <_printf_common+0xa8>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	68e5      	ldr	r5, [r4, #12]
 80093d2:	f003 0306 	and.w	r3, r3, #6
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	bf18      	it	ne
 80093da:	2500      	movne	r5, #0
 80093dc:	6832      	ldr	r2, [r6, #0]
 80093de:	f04f 0600 	mov.w	r6, #0
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	bf08      	it	eq
 80093e6:	1aad      	subeq	r5, r5, r2
 80093e8:	6922      	ldr	r2, [r4, #16]
 80093ea:	bf08      	it	eq
 80093ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f0:	4293      	cmp	r3, r2
 80093f2:	bfc4      	itt	gt
 80093f4:	1a9b      	subgt	r3, r3, r2
 80093f6:	18ed      	addgt	r5, r5, r3
 80093f8:	341a      	adds	r4, #26
 80093fa:	42b5      	cmp	r5, r6
 80093fc:	d11a      	bne.n	8009434 <_printf_common+0xcc>
 80093fe:	2000      	movs	r0, #0
 8009400:	e008      	b.n	8009414 <_printf_common+0xac>
 8009402:	2301      	movs	r3, #1
 8009404:	4652      	mov	r2, sl
 8009406:	4649      	mov	r1, r9
 8009408:	4638      	mov	r0, r7
 800940a:	47c0      	blx	r8
 800940c:	3001      	adds	r0, #1
 800940e:	d103      	bne.n	8009418 <_printf_common+0xb0>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	3501      	adds	r5, #1
 800941a:	e7c4      	b.n	80093a6 <_printf_common+0x3e>
 800941c:	2030      	movs	r0, #48	; 0x30
 800941e:	18e1      	adds	r1, r4, r3
 8009420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800942a:	4422      	add	r2, r4
 800942c:	3302      	adds	r3, #2
 800942e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009432:	e7c5      	b.n	80093c0 <_printf_common+0x58>
 8009434:	2301      	movs	r3, #1
 8009436:	4622      	mov	r2, r4
 8009438:	4649      	mov	r1, r9
 800943a:	4638      	mov	r0, r7
 800943c:	47c0      	blx	r8
 800943e:	3001      	adds	r0, #1
 8009440:	d0e6      	beq.n	8009410 <_printf_common+0xa8>
 8009442:	3601      	adds	r6, #1
 8009444:	e7d9      	b.n	80093fa <_printf_common+0x92>
	...

08009448 <_printf_i>:
 8009448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	7e0f      	ldrb	r7, [r1, #24]
 800944e:	4691      	mov	r9, r2
 8009450:	2f78      	cmp	r7, #120	; 0x78
 8009452:	4680      	mov	r8, r0
 8009454:	460c      	mov	r4, r1
 8009456:	469a      	mov	sl, r3
 8009458:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800945a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800945e:	d807      	bhi.n	8009470 <_printf_i+0x28>
 8009460:	2f62      	cmp	r7, #98	; 0x62
 8009462:	d80a      	bhi.n	800947a <_printf_i+0x32>
 8009464:	2f00      	cmp	r7, #0
 8009466:	f000 80d9 	beq.w	800961c <_printf_i+0x1d4>
 800946a:	2f58      	cmp	r7, #88	; 0x58
 800946c:	f000 80a4 	beq.w	80095b8 <_printf_i+0x170>
 8009470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009478:	e03a      	b.n	80094f0 <_printf_i+0xa8>
 800947a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800947e:	2b15      	cmp	r3, #21
 8009480:	d8f6      	bhi.n	8009470 <_printf_i+0x28>
 8009482:	a101      	add	r1, pc, #4	; (adr r1, 8009488 <_printf_i+0x40>)
 8009484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094f5 	.word	0x080094f5
 8009490:	08009471 	.word	0x08009471
 8009494:	08009471 	.word	0x08009471
 8009498:	08009471 	.word	0x08009471
 800949c:	08009471 	.word	0x08009471
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	08009471 	.word	0x08009471
 80094a8:	08009471 	.word	0x08009471
 80094ac:	08009471 	.word	0x08009471
 80094b0:	08009471 	.word	0x08009471
 80094b4:	08009603 	.word	0x08009603
 80094b8:	08009525 	.word	0x08009525
 80094bc:	080095e5 	.word	0x080095e5
 80094c0:	08009471 	.word	0x08009471
 80094c4:	08009471 	.word	0x08009471
 80094c8:	08009625 	.word	0x08009625
 80094cc:	08009471 	.word	0x08009471
 80094d0:	08009525 	.word	0x08009525
 80094d4:	08009471 	.word	0x08009471
 80094d8:	08009471 	.word	0x08009471
 80094dc:	080095ed 	.word	0x080095ed
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	602a      	str	r2, [r5, #0]
 80094e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f0:	2301      	movs	r3, #1
 80094f2:	e0a4      	b.n	800963e <_printf_i+0x1f6>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	6829      	ldr	r1, [r5, #0]
 80094f8:	0606      	lsls	r6, r0, #24
 80094fa:	f101 0304 	add.w	r3, r1, #4
 80094fe:	d50a      	bpl.n	8009516 <_printf_i+0xce>
 8009500:	680e      	ldr	r6, [r1, #0]
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	2e00      	cmp	r6, #0
 8009506:	da03      	bge.n	8009510 <_printf_i+0xc8>
 8009508:	232d      	movs	r3, #45	; 0x2d
 800950a:	4276      	negs	r6, r6
 800950c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009510:	230a      	movs	r3, #10
 8009512:	485e      	ldr	r0, [pc, #376]	; (800968c <_printf_i+0x244>)
 8009514:	e019      	b.n	800954a <_printf_i+0x102>
 8009516:	680e      	ldr	r6, [r1, #0]
 8009518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	bf18      	it	ne
 8009520:	b236      	sxthne	r6, r6
 8009522:	e7ef      	b.n	8009504 <_printf_i+0xbc>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	1d19      	adds	r1, r3, #4
 800952a:	6029      	str	r1, [r5, #0]
 800952c:	0601      	lsls	r1, r0, #24
 800952e:	d501      	bpl.n	8009534 <_printf_i+0xec>
 8009530:	681e      	ldr	r6, [r3, #0]
 8009532:	e002      	b.n	800953a <_printf_i+0xf2>
 8009534:	0646      	lsls	r6, r0, #25
 8009536:	d5fb      	bpl.n	8009530 <_printf_i+0xe8>
 8009538:	881e      	ldrh	r6, [r3, #0]
 800953a:	2f6f      	cmp	r7, #111	; 0x6f
 800953c:	bf0c      	ite	eq
 800953e:	2308      	moveq	r3, #8
 8009540:	230a      	movne	r3, #10
 8009542:	4852      	ldr	r0, [pc, #328]	; (800968c <_printf_i+0x244>)
 8009544:	2100      	movs	r1, #0
 8009546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800954a:	6865      	ldr	r5, [r4, #4]
 800954c:	2d00      	cmp	r5, #0
 800954e:	bfa8      	it	ge
 8009550:	6821      	ldrge	r1, [r4, #0]
 8009552:	60a5      	str	r5, [r4, #8]
 8009554:	bfa4      	itt	ge
 8009556:	f021 0104 	bicge.w	r1, r1, #4
 800955a:	6021      	strge	r1, [r4, #0]
 800955c:	b90e      	cbnz	r6, 8009562 <_printf_i+0x11a>
 800955e:	2d00      	cmp	r5, #0
 8009560:	d04d      	beq.n	80095fe <_printf_i+0x1b6>
 8009562:	4615      	mov	r5, r2
 8009564:	fbb6 f1f3 	udiv	r1, r6, r3
 8009568:	fb03 6711 	mls	r7, r3, r1, r6
 800956c:	5dc7      	ldrb	r7, [r0, r7]
 800956e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009572:	4637      	mov	r7, r6
 8009574:	42bb      	cmp	r3, r7
 8009576:	460e      	mov	r6, r1
 8009578:	d9f4      	bls.n	8009564 <_printf_i+0x11c>
 800957a:	2b08      	cmp	r3, #8
 800957c:	d10b      	bne.n	8009596 <_printf_i+0x14e>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	07de      	lsls	r6, r3, #31
 8009582:	d508      	bpl.n	8009596 <_printf_i+0x14e>
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	6861      	ldr	r1, [r4, #4]
 8009588:	4299      	cmp	r1, r3
 800958a:	bfde      	ittt	le
 800958c:	2330      	movle	r3, #48	; 0x30
 800958e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009592:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009596:	1b52      	subs	r2, r2, r5
 8009598:	6122      	str	r2, [r4, #16]
 800959a:	464b      	mov	r3, r9
 800959c:	4621      	mov	r1, r4
 800959e:	4640      	mov	r0, r8
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	aa03      	add	r2, sp, #12
 80095a6:	f7ff fedf 	bl	8009368 <_printf_common>
 80095aa:	3001      	adds	r0, #1
 80095ac:	d14c      	bne.n	8009648 <_printf_i+0x200>
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295
 80095b2:	b004      	add	sp, #16
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	4834      	ldr	r0, [pc, #208]	; (800968c <_printf_i+0x244>)
 80095ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095be:	6829      	ldr	r1, [r5, #0]
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80095c6:	6029      	str	r1, [r5, #0]
 80095c8:	061d      	lsls	r5, r3, #24
 80095ca:	d514      	bpl.n	80095f6 <_printf_i+0x1ae>
 80095cc:	07df      	lsls	r7, r3, #31
 80095ce:	bf44      	itt	mi
 80095d0:	f043 0320 	orrmi.w	r3, r3, #32
 80095d4:	6023      	strmi	r3, [r4, #0]
 80095d6:	b91e      	cbnz	r6, 80095e0 <_printf_i+0x198>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	f023 0320 	bic.w	r3, r3, #32
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	2310      	movs	r3, #16
 80095e2:	e7af      	b.n	8009544 <_printf_i+0xfc>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	f043 0320 	orr.w	r3, r3, #32
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	2378      	movs	r3, #120	; 0x78
 80095ee:	4828      	ldr	r0, [pc, #160]	; (8009690 <_printf_i+0x248>)
 80095f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095f4:	e7e3      	b.n	80095be <_printf_i+0x176>
 80095f6:	0659      	lsls	r1, r3, #25
 80095f8:	bf48      	it	mi
 80095fa:	b2b6      	uxthmi	r6, r6
 80095fc:	e7e6      	b.n	80095cc <_printf_i+0x184>
 80095fe:	4615      	mov	r5, r2
 8009600:	e7bb      	b.n	800957a <_printf_i+0x132>
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	6826      	ldr	r6, [r4, #0]
 8009606:	1d18      	adds	r0, r3, #4
 8009608:	6961      	ldr	r1, [r4, #20]
 800960a:	6028      	str	r0, [r5, #0]
 800960c:	0635      	lsls	r5, r6, #24
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	d501      	bpl.n	8009616 <_printf_i+0x1ce>
 8009612:	6019      	str	r1, [r3, #0]
 8009614:	e002      	b.n	800961c <_printf_i+0x1d4>
 8009616:	0670      	lsls	r0, r6, #25
 8009618:	d5fb      	bpl.n	8009612 <_printf_i+0x1ca>
 800961a:	8019      	strh	r1, [r3, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	4615      	mov	r5, r2
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	e7ba      	b.n	800959a <_printf_i+0x152>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	2100      	movs	r1, #0
 8009628:	1d1a      	adds	r2, r3, #4
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	681d      	ldr	r5, [r3, #0]
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	4628      	mov	r0, r5
 8009632:	f000 f82f 	bl	8009694 <memchr>
 8009636:	b108      	cbz	r0, 800963c <_printf_i+0x1f4>
 8009638:	1b40      	subs	r0, r0, r5
 800963a:	6060      	str	r0, [r4, #4]
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	2300      	movs	r3, #0
 8009642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009646:	e7a8      	b.n	800959a <_printf_i+0x152>
 8009648:	462a      	mov	r2, r5
 800964a:	4649      	mov	r1, r9
 800964c:	4640      	mov	r0, r8
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	47d0      	blx	sl
 8009652:	3001      	adds	r0, #1
 8009654:	d0ab      	beq.n	80095ae <_printf_i+0x166>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	079b      	lsls	r3, r3, #30
 800965a:	d413      	bmi.n	8009684 <_printf_i+0x23c>
 800965c:	68e0      	ldr	r0, [r4, #12]
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	4298      	cmp	r0, r3
 8009662:	bfb8      	it	lt
 8009664:	4618      	movlt	r0, r3
 8009666:	e7a4      	b.n	80095b2 <_printf_i+0x16a>
 8009668:	2301      	movs	r3, #1
 800966a:	4632      	mov	r2, r6
 800966c:	4649      	mov	r1, r9
 800966e:	4640      	mov	r0, r8
 8009670:	47d0      	blx	sl
 8009672:	3001      	adds	r0, #1
 8009674:	d09b      	beq.n	80095ae <_printf_i+0x166>
 8009676:	3501      	adds	r5, #1
 8009678:	68e3      	ldr	r3, [r4, #12]
 800967a:	9903      	ldr	r1, [sp, #12]
 800967c:	1a5b      	subs	r3, r3, r1
 800967e:	42ab      	cmp	r3, r5
 8009680:	dcf2      	bgt.n	8009668 <_printf_i+0x220>
 8009682:	e7eb      	b.n	800965c <_printf_i+0x214>
 8009684:	2500      	movs	r5, #0
 8009686:	f104 0619 	add.w	r6, r4, #25
 800968a:	e7f5      	b.n	8009678 <_printf_i+0x230>
 800968c:	0800a139 	.word	0x0800a139
 8009690:	0800a14a 	.word	0x0800a14a

08009694 <memchr>:
 8009694:	4603      	mov	r3, r0
 8009696:	b510      	push	{r4, lr}
 8009698:	b2c9      	uxtb	r1, r1
 800969a:	4402      	add	r2, r0
 800969c:	4293      	cmp	r3, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	d101      	bne.n	80096a6 <memchr+0x12>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e003      	b.n	80096ae <memchr+0x1a>
 80096a6:	7804      	ldrb	r4, [r0, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	428c      	cmp	r4, r1
 80096ac:	d1f6      	bne.n	800969c <memchr+0x8>
 80096ae:	bd10      	pop	{r4, pc}

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	4291      	cmp	r1, r2
 80096c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <memmove>:
 80096cc:	4288      	cmp	r0, r1
 80096ce:	b510      	push	{r4, lr}
 80096d0:	eb01 0402 	add.w	r4, r1, r2
 80096d4:	d902      	bls.n	80096dc <memmove+0x10>
 80096d6:	4284      	cmp	r4, r0
 80096d8:	4623      	mov	r3, r4
 80096da:	d807      	bhi.n	80096ec <memmove+0x20>
 80096dc:	1e43      	subs	r3, r0, #1
 80096de:	42a1      	cmp	r1, r4
 80096e0:	d008      	beq.n	80096f4 <memmove+0x28>
 80096e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ea:	e7f8      	b.n	80096de <memmove+0x12>
 80096ec:	4601      	mov	r1, r0
 80096ee:	4402      	add	r2, r0
 80096f0:	428a      	cmp	r2, r1
 80096f2:	d100      	bne.n	80096f6 <memmove+0x2a>
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096fe:	e7f7      	b.n	80096f0 <memmove+0x24>

08009700 <_free_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4605      	mov	r5, r0
 8009704:	2900      	cmp	r1, #0
 8009706:	d040      	beq.n	800978a <_free_r+0x8a>
 8009708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970c:	1f0c      	subs	r4, r1, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	bfb8      	it	lt
 8009712:	18e4      	addlt	r4, r4, r3
 8009714:	f000 f910 	bl	8009938 <__malloc_lock>
 8009718:	4a1c      	ldr	r2, [pc, #112]	; (800978c <_free_r+0x8c>)
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	b933      	cbnz	r3, 800972c <_free_r+0x2c>
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	6014      	str	r4, [r2, #0]
 8009722:	4628      	mov	r0, r5
 8009724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009728:	f000 b90c 	b.w	8009944 <__malloc_unlock>
 800972c:	42a3      	cmp	r3, r4
 800972e:	d908      	bls.n	8009742 <_free_r+0x42>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	1821      	adds	r1, r4, r0
 8009734:	428b      	cmp	r3, r1
 8009736:	bf01      	itttt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	1809      	addeq	r1, r1, r0
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	e7ed      	b.n	800971e <_free_r+0x1e>
 8009742:	461a      	mov	r2, r3
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	b10b      	cbz	r3, 800974c <_free_r+0x4c>
 8009748:	42a3      	cmp	r3, r4
 800974a:	d9fa      	bls.n	8009742 <_free_r+0x42>
 800974c:	6811      	ldr	r1, [r2, #0]
 800974e:	1850      	adds	r0, r2, r1
 8009750:	42a0      	cmp	r0, r4
 8009752:	d10b      	bne.n	800976c <_free_r+0x6c>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	4401      	add	r1, r0
 8009758:	1850      	adds	r0, r2, r1
 800975a:	4283      	cmp	r3, r0
 800975c:	6011      	str	r1, [r2, #0]
 800975e:	d1e0      	bne.n	8009722 <_free_r+0x22>
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4401      	add	r1, r0
 8009766:	6011      	str	r1, [r2, #0]
 8009768:	6053      	str	r3, [r2, #4]
 800976a:	e7da      	b.n	8009722 <_free_r+0x22>
 800976c:	d902      	bls.n	8009774 <_free_r+0x74>
 800976e:	230c      	movs	r3, #12
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	e7d6      	b.n	8009722 <_free_r+0x22>
 8009774:	6820      	ldr	r0, [r4, #0]
 8009776:	1821      	adds	r1, r4, r0
 8009778:	428b      	cmp	r3, r1
 800977a:	bf01      	itttt	eq
 800977c:	6819      	ldreq	r1, [r3, #0]
 800977e:	685b      	ldreq	r3, [r3, #4]
 8009780:	1809      	addeq	r1, r1, r0
 8009782:	6021      	streq	r1, [r4, #0]
 8009784:	6063      	str	r3, [r4, #4]
 8009786:	6054      	str	r4, [r2, #4]
 8009788:	e7cb      	b.n	8009722 <_free_r+0x22>
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20001af0 	.word	0x20001af0

08009790 <sbrk_aligned>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4e0e      	ldr	r6, [pc, #56]	; (80097cc <sbrk_aligned+0x3c>)
 8009794:	460c      	mov	r4, r1
 8009796:	6831      	ldr	r1, [r6, #0]
 8009798:	4605      	mov	r5, r0
 800979a:	b911      	cbnz	r1, 80097a2 <sbrk_aligned+0x12>
 800979c:	f000 f8bc 	bl	8009918 <_sbrk_r>
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 f8b7 	bl	8009918 <_sbrk_r>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	d00a      	beq.n	80097c4 <sbrk_aligned+0x34>
 80097ae:	1cc4      	adds	r4, r0, #3
 80097b0:	f024 0403 	bic.w	r4, r4, #3
 80097b4:	42a0      	cmp	r0, r4
 80097b6:	d007      	beq.n	80097c8 <sbrk_aligned+0x38>
 80097b8:	1a21      	subs	r1, r4, r0
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 f8ac 	bl	8009918 <_sbrk_r>
 80097c0:	3001      	adds	r0, #1
 80097c2:	d101      	bne.n	80097c8 <sbrk_aligned+0x38>
 80097c4:	f04f 34ff 	mov.w	r4, #4294967295
 80097c8:	4620      	mov	r0, r4
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	20001af4 	.word	0x20001af4

080097d0 <_malloc_r>:
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	1ccd      	adds	r5, r1, #3
 80097d6:	f025 0503 	bic.w	r5, r5, #3
 80097da:	3508      	adds	r5, #8
 80097dc:	2d0c      	cmp	r5, #12
 80097de:	bf38      	it	cc
 80097e0:	250c      	movcc	r5, #12
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	4607      	mov	r7, r0
 80097e6:	db01      	blt.n	80097ec <_malloc_r+0x1c>
 80097e8:	42a9      	cmp	r1, r5
 80097ea:	d905      	bls.n	80097f8 <_malloc_r+0x28>
 80097ec:	230c      	movs	r3, #12
 80097ee:	2600      	movs	r6, #0
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	4630      	mov	r0, r6
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	4e2e      	ldr	r6, [pc, #184]	; (80098b4 <_malloc_r+0xe4>)
 80097fa:	f000 f89d 	bl	8009938 <__malloc_lock>
 80097fe:	6833      	ldr	r3, [r6, #0]
 8009800:	461c      	mov	r4, r3
 8009802:	bb34      	cbnz	r4, 8009852 <_malloc_r+0x82>
 8009804:	4629      	mov	r1, r5
 8009806:	4638      	mov	r0, r7
 8009808:	f7ff ffc2 	bl	8009790 <sbrk_aligned>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	4604      	mov	r4, r0
 8009810:	d14d      	bne.n	80098ae <_malloc_r+0xde>
 8009812:	6834      	ldr	r4, [r6, #0]
 8009814:	4626      	mov	r6, r4
 8009816:	2e00      	cmp	r6, #0
 8009818:	d140      	bne.n	800989c <_malloc_r+0xcc>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	4631      	mov	r1, r6
 800981e:	4638      	mov	r0, r7
 8009820:	eb04 0803 	add.w	r8, r4, r3
 8009824:	f000 f878 	bl	8009918 <_sbrk_r>
 8009828:	4580      	cmp	r8, r0
 800982a:	d13a      	bne.n	80098a2 <_malloc_r+0xd2>
 800982c:	6821      	ldr	r1, [r4, #0]
 800982e:	3503      	adds	r5, #3
 8009830:	1a6d      	subs	r5, r5, r1
 8009832:	f025 0503 	bic.w	r5, r5, #3
 8009836:	3508      	adds	r5, #8
 8009838:	2d0c      	cmp	r5, #12
 800983a:	bf38      	it	cc
 800983c:	250c      	movcc	r5, #12
 800983e:	4638      	mov	r0, r7
 8009840:	4629      	mov	r1, r5
 8009842:	f7ff ffa5 	bl	8009790 <sbrk_aligned>
 8009846:	3001      	adds	r0, #1
 8009848:	d02b      	beq.n	80098a2 <_malloc_r+0xd2>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	442b      	add	r3, r5
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	e00e      	b.n	8009870 <_malloc_r+0xa0>
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	1b52      	subs	r2, r2, r5
 8009856:	d41e      	bmi.n	8009896 <_malloc_r+0xc6>
 8009858:	2a0b      	cmp	r2, #11
 800985a:	d916      	bls.n	800988a <_malloc_r+0xba>
 800985c:	1961      	adds	r1, r4, r5
 800985e:	42a3      	cmp	r3, r4
 8009860:	6025      	str	r5, [r4, #0]
 8009862:	bf18      	it	ne
 8009864:	6059      	strne	r1, [r3, #4]
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	bf08      	it	eq
 800986a:	6031      	streq	r1, [r6, #0]
 800986c:	5162      	str	r2, [r4, r5]
 800986e:	604b      	str	r3, [r1, #4]
 8009870:	4638      	mov	r0, r7
 8009872:	f104 060b 	add.w	r6, r4, #11
 8009876:	f000 f865 	bl	8009944 <__malloc_unlock>
 800987a:	f026 0607 	bic.w	r6, r6, #7
 800987e:	1d23      	adds	r3, r4, #4
 8009880:	1af2      	subs	r2, r6, r3
 8009882:	d0b6      	beq.n	80097f2 <_malloc_r+0x22>
 8009884:	1b9b      	subs	r3, r3, r6
 8009886:	50a3      	str	r3, [r4, r2]
 8009888:	e7b3      	b.n	80097f2 <_malloc_r+0x22>
 800988a:	6862      	ldr	r2, [r4, #4]
 800988c:	42a3      	cmp	r3, r4
 800988e:	bf0c      	ite	eq
 8009890:	6032      	streq	r2, [r6, #0]
 8009892:	605a      	strne	r2, [r3, #4]
 8009894:	e7ec      	b.n	8009870 <_malloc_r+0xa0>
 8009896:	4623      	mov	r3, r4
 8009898:	6864      	ldr	r4, [r4, #4]
 800989a:	e7b2      	b.n	8009802 <_malloc_r+0x32>
 800989c:	4634      	mov	r4, r6
 800989e:	6876      	ldr	r6, [r6, #4]
 80098a0:	e7b9      	b.n	8009816 <_malloc_r+0x46>
 80098a2:	230c      	movs	r3, #12
 80098a4:	4638      	mov	r0, r7
 80098a6:	603b      	str	r3, [r7, #0]
 80098a8:	f000 f84c 	bl	8009944 <__malloc_unlock>
 80098ac:	e7a1      	b.n	80097f2 <_malloc_r+0x22>
 80098ae:	6025      	str	r5, [r4, #0]
 80098b0:	e7de      	b.n	8009870 <_malloc_r+0xa0>
 80098b2:	bf00      	nop
 80098b4:	20001af0 	.word	0x20001af0

080098b8 <_realloc_r>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	4680      	mov	r8, r0
 80098be:	4614      	mov	r4, r2
 80098c0:	460e      	mov	r6, r1
 80098c2:	b921      	cbnz	r1, 80098ce <_realloc_r+0x16>
 80098c4:	4611      	mov	r1, r2
 80098c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	f7ff bf81 	b.w	80097d0 <_malloc_r>
 80098ce:	b92a      	cbnz	r2, 80098dc <_realloc_r+0x24>
 80098d0:	f7ff ff16 	bl	8009700 <_free_r>
 80098d4:	4625      	mov	r5, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098dc:	f000 f838 	bl	8009950 <_malloc_usable_size_r>
 80098e0:	4284      	cmp	r4, r0
 80098e2:	4607      	mov	r7, r0
 80098e4:	d802      	bhi.n	80098ec <_realloc_r+0x34>
 80098e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098ea:	d812      	bhi.n	8009912 <_realloc_r+0x5a>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4640      	mov	r0, r8
 80098f0:	f7ff ff6e 	bl	80097d0 <_malloc_r>
 80098f4:	4605      	mov	r5, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0ed      	beq.n	80098d6 <_realloc_r+0x1e>
 80098fa:	42bc      	cmp	r4, r7
 80098fc:	4622      	mov	r2, r4
 80098fe:	4631      	mov	r1, r6
 8009900:	bf28      	it	cs
 8009902:	463a      	movcs	r2, r7
 8009904:	f7ff fed4 	bl	80096b0 <memcpy>
 8009908:	4631      	mov	r1, r6
 800990a:	4640      	mov	r0, r8
 800990c:	f7ff fef8 	bl	8009700 <_free_r>
 8009910:	e7e1      	b.n	80098d6 <_realloc_r+0x1e>
 8009912:	4635      	mov	r5, r6
 8009914:	e7df      	b.n	80098d6 <_realloc_r+0x1e>
	...

08009918 <_sbrk_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	2300      	movs	r3, #0
 800991c:	4d05      	ldr	r5, [pc, #20]	; (8009934 <_sbrk_r+0x1c>)
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7f7 ffdc 	bl	80018e0 <_sbrk>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_sbrk_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_sbrk_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20001af8 	.word	0x20001af8

08009938 <__malloc_lock>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__malloc_lock+0x8>)
 800993a:	f000 b811 	b.w	8009960 <__retarget_lock_acquire_recursive>
 800993e:	bf00      	nop
 8009940:	20001afc 	.word	0x20001afc

08009944 <__malloc_unlock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_unlock+0x8>)
 8009946:	f000 b80c 	b.w	8009962 <__retarget_lock_release_recursive>
 800994a:	bf00      	nop
 800994c:	20001afc 	.word	0x20001afc

08009950 <_malloc_usable_size_r>:
 8009950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009954:	1f18      	subs	r0, r3, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfbc      	itt	lt
 800995a:	580b      	ldrlt	r3, [r1, r0]
 800995c:	18c0      	addlt	r0, r0, r3
 800995e:	4770      	bx	lr

08009960 <__retarget_lock_acquire_recursive>:
 8009960:	4770      	bx	lr

08009962 <__retarget_lock_release_recursive>:
 8009962:	4770      	bx	lr

08009964 <_init>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr

08009970 <_fini>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr
