
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004004  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001680  080041f0  080041f0  000141f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  0002c870  2**0
                  CONTENTS
  4 .ARM          00000000  08005870  08005870  0002c870  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005870  08005870  0002c870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000c870  20000000  08005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000c870  080120e8  0002c870  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c8dc  080120e8  0002c8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000591c  00000000  00000000  0002c899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154f  00000000  00000000  000321b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c77  00000000  00000000  00034288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a37  00000000  00000000  0004ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009091b  00000000  00000000  00053936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  000e42a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000c870 	.word	0x2000c870
 8000204:	00000000 	.word	0x00000000
 8000208:	080041d4 	.word	0x080041d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000c874 	.word	0x2000c874
 8000224:	080041d4 	.word	0x080041d4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	; 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fmul>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d06f      	beq.n	8000f44 <__aeabi_fmul+0xf8>
 8000e64:	441a      	add	r2, r3
 8000e66:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6a:	0240      	lsls	r0, r0, #9
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e72:	d01e      	beq.n	8000eb2 <__aeabi_fmul+0x66>
 8000e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e80:	fba0 3101 	umull	r3, r1, r0, r1
 8000e84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e8c:	bf3e      	ittt	cc
 8000e8e:	0049      	lslcc	r1, r1, #1
 8000e90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e94:	005b      	lslcc	r3, r3, #1
 8000e96:	ea40 0001 	orr.w	r0, r0, r1
 8000e9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e9e:	2afd      	cmp	r2, #253	; 0xfd
 8000ea0:	d81d      	bhi.n	8000ede <__aeabi_fmul+0x92>
 8000ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ea6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eaa:	bf08      	it	eq
 8000eac:	f020 0001 	biceq.w	r0, r0, #1
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eba:	bf08      	it	eq
 8000ebc:	0249      	lsleq	r1, r1, #9
 8000ebe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ec6:	3a7f      	subs	r2, #127	; 0x7f
 8000ec8:	bfc2      	ittt	gt
 8000eca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ece:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed2:	4770      	bxgt	lr
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	3a01      	subs	r2, #1
 8000ede:	dc5d      	bgt.n	8000f9c <__aeabi_fmul+0x150>
 8000ee0:	f112 0f19 	cmn.w	r2, #25
 8000ee4:	bfdc      	itt	le
 8000ee6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eea:	4770      	bxle	lr
 8000eec:	f1c2 0200 	rsb	r2, r2, #0
 8000ef0:	0041      	lsls	r1, r0, #1
 8000ef2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ef6:	f1c2 0220 	rsb	r2, r2, #32
 8000efa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000efe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f02:	f140 0000 	adc.w	r0, r0, #0
 8000f06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f0a:	bf08      	it	eq
 8000f0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f10:	4770      	bx	lr
 8000f12:	f092 0f00 	teq	r2, #0
 8000f16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0040      	lsleq	r0, r0, #1
 8000f1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f22:	3a01      	subeq	r2, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fmul+0xce>
 8000f26:	ea40 000c 	orr.w	r0, r0, ip
 8000f2a:	f093 0f00 	teq	r3, #0
 8000f2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0049      	lsleq	r1, r1, #1
 8000f36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3a:	3b01      	subeq	r3, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xe6>
 8000f3e:	ea41 010c 	orr.w	r1, r1, ip
 8000f42:	e78f      	b.n	8000e64 <__aeabi_fmul+0x18>
 8000f44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	bf18      	it	ne
 8000f4e:	ea93 0f0c 	teqne	r3, ip
 8000f52:	d00a      	beq.n	8000f6a <__aeabi_fmul+0x11e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1d8      	bne.n	8000f12 <__aeabi_fmul+0xc6>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	4770      	bx	lr
 8000f6a:	f090 0f00 	teq	r0, #0
 8000f6e:	bf17      	itett	ne
 8000f70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f74:	4608      	moveq	r0, r1
 8000f76:	f091 0f00 	teqne	r1, #0
 8000f7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f7e:	d014      	beq.n	8000faa <__aeabi_fmul+0x15e>
 8000f80:	ea92 0f0c 	teq	r2, ip
 8000f84:	d101      	bne.n	8000f8a <__aeabi_fmul+0x13e>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d10f      	bne.n	8000faa <__aeabi_fmul+0x15e>
 8000f8a:	ea93 0f0c 	teq	r3, ip
 8000f8e:	d103      	bne.n	8000f98 <__aeabi_fmul+0x14c>
 8000f90:	024b      	lsls	r3, r1, #9
 8000f92:	bf18      	it	ne
 8000f94:	4608      	movne	r0, r1
 8000f96:	d108      	bne.n	8000faa <__aeabi_fmul+0x15e>
 8000f98:	ea80 0001 	eor.w	r0, r0, r1
 8000f9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa8:	4770      	bx	lr
 8000faa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_fdiv>:
 8000fb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fbc:	bf1e      	ittt	ne
 8000fbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fc2:	ea92 0f0c 	teqne	r2, ip
 8000fc6:	ea93 0f0c 	teqne	r3, ip
 8000fca:	d069      	beq.n	80010a0 <__aeabi_fdiv+0xec>
 8000fcc:	eba2 0203 	sub.w	r2, r2, r3
 8000fd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fd4:	0249      	lsls	r1, r1, #9
 8000fd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fda:	d037      	beq.n	800104c <__aeabi_fdiv+0x98>
 8000fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fe4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fe8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fec:	428b      	cmp	r3, r1
 8000fee:	bf38      	it	cc
 8000ff0:	005b      	lslcc	r3, r3, #1
 8000ff2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ff6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	bf24      	itt	cs
 8000ffe:	1a5b      	subcs	r3, r3, r1
 8001000:	ea40 000c 	orrcs.w	r0, r0, ip
 8001004:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001008:	bf24      	itt	cs
 800100a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800100e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001012:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001016:	bf24      	itt	cs
 8001018:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800101c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001020:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001024:	bf24      	itt	cs
 8001026:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800102a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	bf18      	it	ne
 8001032:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001036:	d1e0      	bne.n	8000ffa <__aeabi_fdiv+0x46>
 8001038:	2afd      	cmp	r2, #253	; 0xfd
 800103a:	f63f af50 	bhi.w	8000ede <__aeabi_fmul+0x92>
 800103e:	428b      	cmp	r3, r1
 8001040:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001044:	bf08      	it	eq
 8001046:	f020 0001 	biceq.w	r0, r0, #1
 800104a:	4770      	bx	lr
 800104c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001050:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001054:	327f      	adds	r2, #127	; 0x7f
 8001056:	bfc2      	ittt	gt
 8001058:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800105c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001060:	4770      	bxgt	lr
 8001062:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	3a01      	subs	r2, #1
 800106c:	e737      	b.n	8000ede <__aeabi_fmul+0x92>
 800106e:	f092 0f00 	teq	r2, #0
 8001072:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001076:	bf02      	ittt	eq
 8001078:	0040      	lsleq	r0, r0, #1
 800107a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800107e:	3a01      	subeq	r2, #1
 8001080:	d0f9      	beq.n	8001076 <__aeabi_fdiv+0xc2>
 8001082:	ea40 000c 	orr.w	r0, r0, ip
 8001086:	f093 0f00 	teq	r3, #0
 800108a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0049      	lsleq	r1, r1, #1
 8001092:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001096:	3b01      	subeq	r3, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xda>
 800109a:	ea41 010c 	orr.w	r1, r1, ip
 800109e:	e795      	b.n	8000fcc <__aeabi_fdiv+0x18>
 80010a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010a4:	ea92 0f0c 	teq	r2, ip
 80010a8:	d108      	bne.n	80010bc <__aeabi_fdiv+0x108>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	f47f af7d 	bne.w	8000faa <__aeabi_fmul+0x15e>
 80010b0:	ea93 0f0c 	teq	r3, ip
 80010b4:	f47f af70 	bne.w	8000f98 <__aeabi_fmul+0x14c>
 80010b8:	4608      	mov	r0, r1
 80010ba:	e776      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010bc:	ea93 0f0c 	teq	r3, ip
 80010c0:	d104      	bne.n	80010cc <__aeabi_fdiv+0x118>
 80010c2:	024b      	lsls	r3, r1, #9
 80010c4:	f43f af4c 	beq.w	8000f60 <__aeabi_fmul+0x114>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e76e      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d0:	bf18      	it	ne
 80010d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010d6:	d1ca      	bne.n	800106e <__aeabi_fdiv+0xba>
 80010d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010dc:	f47f af5c 	bne.w	8000f98 <__aeabi_fmul+0x14c>
 80010e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010e4:	f47f af3c 	bne.w	8000f60 <__aeabi_fmul+0x114>
 80010e8:	e75f      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010ea:	bf00      	nop

080010ec <__gesf2>:
 80010ec:	f04f 3cff 	mov.w	ip, #4294967295
 80010f0:	e006      	b.n	8001100 <__cmpsf2+0x4>
 80010f2:	bf00      	nop

080010f4 <__lesf2>:
 80010f4:	f04f 0c01 	mov.w	ip, #1
 80010f8:	e002      	b.n	8001100 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__cmpsf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001104:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001108:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	bf18      	it	ne
 8001112:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001116:	d011      	beq.n	800113c <__cmpsf2+0x40>
 8001118:	b001      	add	sp, #4
 800111a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800111e:	bf18      	it	ne
 8001120:	ea90 0f01 	teqne	r0, r1
 8001124:	bf58      	it	pl
 8001126:	ebb2 0003 	subspl.w	r0, r2, r3
 800112a:	bf88      	it	hi
 800112c:	17c8      	asrhi	r0, r1, #31
 800112e:	bf38      	it	cc
 8001130:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001134:	bf18      	it	ne
 8001136:	f040 0001 	orrne.w	r0, r0, #1
 800113a:	4770      	bx	lr
 800113c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001140:	d102      	bne.n	8001148 <__cmpsf2+0x4c>
 8001142:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001146:	d105      	bne.n	8001154 <__cmpsf2+0x58>
 8001148:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800114c:	d1e4      	bne.n	8001118 <__cmpsf2+0x1c>
 800114e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001152:	d0e1      	beq.n	8001118 <__cmpsf2+0x1c>
 8001154:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_cfrcmple>:
 800115c:	4684      	mov	ip, r0
 800115e:	4608      	mov	r0, r1
 8001160:	4661      	mov	r1, ip
 8001162:	e7ff      	b.n	8001164 <__aeabi_cfcmpeq>

08001164 <__aeabi_cfcmpeq>:
 8001164:	b50f      	push	{r0, r1, r2, r3, lr}
 8001166:	f7ff ffc9 	bl	80010fc <__cmpsf2>
 800116a:	2800      	cmp	r0, #0
 800116c:	bf48      	it	mi
 800116e:	f110 0f00 	cmnmi.w	r0, #0
 8001172:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001174 <__aeabi_fcmpeq>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff fff4 	bl	8001164 <__aeabi_cfcmpeq>
 800117c:	bf0c      	ite	eq
 800117e:	2001      	moveq	r0, #1
 8001180:	2000      	movne	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmplt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffea 	bl	8001164 <__aeabi_cfcmpeq>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmple>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffe0 	bl	8001164 <__aeabi_cfcmpeq>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpge>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffd2 	bl	800115c <__aeabi_cfrcmple>
 80011b8:	bf94      	ite	ls
 80011ba:	2001      	movls	r0, #1
 80011bc:	2000      	movhi	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_fcmpgt>:
 80011c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c8:	f7ff ffc8 	bl	800115c <__aeabi_cfrcmple>
 80011cc:	bf34      	ite	cc
 80011ce:	2001      	movcc	r0, #1
 80011d0:	2000      	movcs	r0, #0
 80011d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d6:	bf00      	nop

080011d8 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	e002      	b.n	80011e8 <Delay+0x10>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <Delay+0xa>
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LCD_INIT>:

void LCD_INIT ( void )
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001200:	2001      	movs	r0, #1
 8001202:	f000 f829 	bl	8001258 <LCD_BackLed_Control>
	LCD_Rst();
 8001206:	f000 f80f 	bl	8001228 <LCD_Rst>
	LCD_REG_Config();
 800120a:	f000 f85f 	bl	80012cc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001218:	22f0      	movs	r2, #240	; 0xf0
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f000 f9e6 	bl	80015ee <LCD_Clear>
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2102      	movs	r1, #2
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <LCD_Rst+0x28>)
 8001232:	f001 f9ac 	bl	800258e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <LCD_Rst+0x2c>)
 8001238:	f7ff ffce 	bl	80011d8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2102      	movs	r1, #2
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <LCD_Rst+0x28>)
 8001242:	f001 f9a4 	bl	800258e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <LCD_Rst+0x2c>)
 8001248:	f7ff ffc6 	bl	80011d8 <Delay>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40011800 	.word	0x40011800
 8001254:	0002bffc 	.word	0x0002bffc

08001258 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <LCD_BackLed_Control+0x34>)
 8001270:	f001 f98d 	bl	800258e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001274:	e005      	b.n	8001282 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <LCD_BackLed_Control+0x34>)
 800127e:	f001 f986 	bl	800258e <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40011400 	.word	0x40011400

08001290 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800129a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	8013      	strh	r3, [r2, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <LCD_Write_Data+0x1c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	8013      	strh	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	60020000 	.word	0x60020000

080012cc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80012d0:	20cf      	movs	r0, #207	; 0xcf
 80012d2:	f7ff ffdd 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ffe8 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80012dc:	2081      	movs	r0, #129	; 0x81
 80012de:	f7ff ffe5 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80012e2:	2030      	movs	r0, #48	; 0x30
 80012e4:	f7ff ffe2 	bl	80012ac <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80012e8:	20ed      	movs	r0, #237	; 0xed
 80012ea:	f7ff ffd1 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f7ff ffdc 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff ffd9 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80012fa:	2012      	movs	r0, #18
 80012fc:	f7ff ffd6 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001300:	2081      	movs	r0, #129	; 0x81
 8001302:	f7ff ffd3 	bl	80012ac <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001306:	20e8      	movs	r0, #232	; 0xe8
 8001308:	f7ff ffc2 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800130c:	2085      	movs	r0, #133	; 0x85
 800130e:	f7ff ffcd 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001312:	2010      	movs	r0, #16
 8001314:	f7ff ffca 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001318:	2078      	movs	r0, #120	; 0x78
 800131a:	f7ff ffc7 	bl	80012ac <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800131e:	20cb      	movs	r0, #203	; 0xcb
 8001320:	f7ff ffb6 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001324:	2039      	movs	r0, #57	; 0x39
 8001326:	f7ff ffc1 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f7ff ffbe 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ffbb 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001336:	2034      	movs	r0, #52	; 0x34
 8001338:	f7ff ffb8 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff ffb5 	bl	80012ac <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001342:	20f7      	movs	r0, #247	; 0xf7
 8001344:	f7ff ffa4 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001348:	2020      	movs	r0, #32
 800134a:	f7ff ffaf 	bl	80012ac <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800134e:	20ea      	movs	r0, #234	; 0xea
 8001350:	f7ff ff9e 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffa9 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ffa6 	bl	80012ac <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001360:	20b1      	movs	r0, #177	; 0xb1
 8001362:	f7ff ff95 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ffa0 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800136c:	201b      	movs	r0, #27
 800136e:	f7ff ff9d 	bl	80012ac <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001372:	20b6      	movs	r0, #182	; 0xb6
 8001374:	f7ff ff8c 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001378:	200a      	movs	r0, #10
 800137a:	f7ff ff97 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800137e:	20a2      	movs	r0, #162	; 0xa2
 8001380:	f7ff ff94 	bl	80012ac <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001384:	20c0      	movs	r0, #192	; 0xc0
 8001386:	f7ff ff83 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800138a:	2035      	movs	r0, #53	; 0x35
 800138c:	f7ff ff8e 	bl	80012ac <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001390:	20c1      	movs	r0, #193	; 0xc1
 8001392:	f7ff ff7d 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001396:	2011      	movs	r0, #17
 8001398:	f7ff ff88 	bl	80012ac <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800139c:	20c5      	movs	r0, #197	; 0xc5
 800139e:	f7ff ff77 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80013a2:	2045      	movs	r0, #69	; 0x45
 80013a4:	f7ff ff82 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80013a8:	2045      	movs	r0, #69	; 0x45
 80013aa:	f7ff ff7f 	bl	80012ac <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80013ae:	20c7      	movs	r0, #199	; 0xc7
 80013b0:	f7ff ff6e 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80013b4:	20a2      	movs	r0, #162	; 0xa2
 80013b6:	f7ff ff79 	bl	80012ac <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80013ba:	20f2      	movs	r0, #242	; 0xf2
 80013bc:	f7ff ff68 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff73 	bl	80012ac <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80013c6:	2026      	movs	r0, #38	; 0x26
 80013c8:	f7ff ff62 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ff6d 	bl	80012ac <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80013d2:	20e0      	movs	r0, #224	; 0xe0
 80013d4:	f7ff ff5c 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80013d8:	200f      	movs	r0, #15
 80013da:	f7ff ff67 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80013de:	2026      	movs	r0, #38	; 0x26
 80013e0:	f7ff ff64 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80013e4:	2024      	movs	r0, #36	; 0x24
 80013e6:	f7ff ff61 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80013ea:	200b      	movs	r0, #11
 80013ec:	f7ff ff5e 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80013f0:	200e      	movs	r0, #14
 80013f2:	f7ff ff5b 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80013f6:	2009      	movs	r0, #9
 80013f8:	f7ff ff58 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80013fc:	2054      	movs	r0, #84	; 0x54
 80013fe:	f7ff ff55 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001402:	20a8      	movs	r0, #168	; 0xa8
 8001404:	f7ff ff52 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001408:	2046      	movs	r0, #70	; 0x46
 800140a:	f7ff ff4f 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800140e:	200c      	movs	r0, #12
 8001410:	f7ff ff4c 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001414:	2017      	movs	r0, #23
 8001416:	f7ff ff49 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800141a:	2009      	movs	r0, #9
 800141c:	f7ff ff46 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001420:	200f      	movs	r0, #15
 8001422:	f7ff ff43 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff ff40 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff3d 	bl	80012ac <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001432:	20e1      	movs	r0, #225	; 0xe1
 8001434:	f7ff ff2c 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff37 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800143e:	2019      	movs	r0, #25
 8001440:	f7ff ff34 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001444:	201b      	movs	r0, #27
 8001446:	f7ff ff31 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800144a:	2004      	movs	r0, #4
 800144c:	f7ff ff2e 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001450:	2010      	movs	r0, #16
 8001452:	f7ff ff2b 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001456:	2007      	movs	r0, #7
 8001458:	f7ff ff28 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800145c:	202a      	movs	r0, #42	; 0x2a
 800145e:	f7ff ff25 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001462:	2047      	movs	r0, #71	; 0x47
 8001464:	f7ff ff22 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001468:	2039      	movs	r0, #57	; 0x39
 800146a:	f7ff ff1f 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800146e:	2003      	movs	r0, #3
 8001470:	f7ff ff1c 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001474:	2006      	movs	r0, #6
 8001476:	f7ff ff19 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800147a:	2006      	movs	r0, #6
 800147c:	f7ff ff16 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001480:	2030      	movs	r0, #48	; 0x30
 8001482:	f7ff ff13 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001486:	2038      	movs	r0, #56	; 0x38
 8001488:	f7ff ff10 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800148c:	200f      	movs	r0, #15
 800148e:	f7ff ff0d 	bl	80012ac <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001492:	2036      	movs	r0, #54	; 0x36
 8001494:	f7ff fefc 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001498:	20c8      	movs	r0, #200	; 0xc8
 800149a:	f7ff ff07 	bl	80012ac <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800149e:	202a      	movs	r0, #42	; 0x2a
 80014a0:	f7ff fef6 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff ff01 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fefe 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fefb 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80014b6:	20ef      	movs	r0, #239	; 0xef
 80014b8:	f7ff fef8 	bl	80012ac <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80014bc:	202b      	movs	r0, #43	; 0x2b
 80014be:	f7ff fee7 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fef2 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff feef 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff feec 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80014d4:	203f      	movs	r0, #63	; 0x3f
 80014d6:	f7ff fee9 	bl	80012ac <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80014da:	203a      	movs	r0, #58	; 0x3a
 80014dc:	f7ff fed8 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80014e0:	2055      	movs	r0, #85	; 0x55
 80014e2:	f7ff fee3 	bl	80012ac <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff fed2 	bl	8001290 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <LCD_REG_Config+0x230>)
 80014ee:	f7ff fe73 	bl	80011d8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80014f2:	2029      	movs	r0, #41	; 0x29
 80014f4:	f7ff fecc 	bl	8001290 <LCD_Write_Cmd>
	
	
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	0002bffc 	.word	0x0002bffc

08001500 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4623      	mov	r3, r4
 8001510:	80fb      	strh	r3, [r7, #6]
 8001512:	4603      	mov	r3, r0
 8001514:	80bb      	strh	r3, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]
 800151a:	4613      	mov	r3, r2
 800151c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800151e:	202a      	movs	r0, #42	; 0x2a
 8001520:	f7ff feb6 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff febe 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff feb8 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	4413      	add	r3, r2
 8001542:	3b01      	subs	r3, #1
 8001544:	121b      	asrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff feaf 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29b      	uxth	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fea4 	bl	80012ac <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001564:	202b      	movs	r0, #43	; 0x2b
 8001566:	f7ff fe93 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe9b 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe95 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001582:	88ba      	ldrh	r2, [r7, #4]
 8001584:	883b      	ldrh	r3, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	3b01      	subs	r3, #1
 800158a:	121b      	asrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe8c 	bl	80012ac <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001594:	88ba      	ldrh	r2, [r7, #4]
 8001596:	883b      	ldrh	r3, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fe81 	bl	80012ac <LCD_Write_Data>
	
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80015c2:	202c      	movs	r0, #44	; 0x2c
 80015c4:	f7ff fe64 	bl	8001290 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e006      	b.n	80015dc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe6b 	bl	80012ac <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f4      	bcc.n	80015ce <LCD_FillColor+0x1c>
		
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4604      	mov	r4, r0
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	80fb      	strh	r3, [r7, #6]
 8001600:	4603      	mov	r3, r0
 8001602:	80bb      	strh	r3, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800160c:	883b      	ldrh	r3, [r7, #0]
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	88b9      	ldrh	r1, [r7, #4]
 8001612:	88f8      	ldrh	r0, [r7, #6]
 8001614:	f7ff ff74 	bl	8001500 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	8b3b      	ldrh	r3, [r7, #24]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff ffc3 	bl	80015b2 <LCD_FillColor>
	
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}

08001634 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	460b      	mov	r3, r1
 8001640:	80bb      	strh	r3, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	3b20      	subs	r3, #32
 800164a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800164c:	88b9      	ldrh	r1, [r7, #4]
 800164e:	88f8      	ldrh	r0, [r7, #6]
 8001650:	2310      	movs	r3, #16
 8001652:	2208      	movs	r2, #8
 8001654:	f7ff ff54 	bl	8001500 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001658:	202c      	movs	r0, #44	; 0x2c
 800165a:	f7ff fe19 	bl	8001290 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800165e:	2300      	movs	r3, #0
 8001660:	73bb      	strb	r3, [r7, #14]
 8001662:	e023      	b.n	80016ac <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001664:	7b3a      	ldrb	r2, [r7, #12]
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	4914      	ldr	r1, [pc, #80]	; (80016bc <LCD_DrawChar+0x88>)
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	440a      	add	r2, r1
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001674:	2300      	movs	r3, #0
 8001676:	737b      	strb	r3, [r7, #13]
 8001678:	e012      	b.n	80016a0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001684:	201f      	movs	r0, #31
 8001686:	f7ff fe11 	bl	80012ac <LCD_Write_Data>
 800168a:	e003      	b.n	8001694 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800168c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001690:	f7ff fe0c 	bl	80012ac <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	3301      	adds	r3, #1
 800169e:	737b      	strb	r3, [r7, #13]
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d9e9      	bls.n	800167a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73bb      	strb	r3, [r7, #14]
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d9d8      	bls.n	8001664 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	08004254 	.word	0x08004254

080016c0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	603a      	str	r2, [r7, #0]
 80016ca:	80fb      	strh	r3, [r7, #6]
 80016cc:	460b      	mov	r3, r1
 80016ce:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80016d0:	e01c      	b.n	800170c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	2be8      	cmp	r3, #232	; 0xe8
 80016d6:	d904      	bls.n	80016e2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80016d8:	2300      	movs	r3, #0
 80016da:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	3310      	adds	r3, #16
 80016e0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80016e8:	d903      	bls.n	80016f2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80016ea:	2300      	movs	r3, #0
 80016ec:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	88b9      	ldrh	r1, [r7, #4]
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff9a 	bl	8001634 <LCD_DrawChar>
		
		pStr ++;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3308      	adds	r3, #8
 800170a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1de      	bne.n	80016d2 <LCD_DrawString+0x12>
		
	}
	
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	460b      	mov	r3, r1
 800172a:	80bb      	strh	r3, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	807b      	strh	r3, [r7, #2]
	/*
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */

	LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 8001730:	88b9      	ldrh	r1, [r7, #4]
 8001732:	88f8      	ldrh	r0, [r7, #6]
 8001734:	2301      	movs	r3, #1
 8001736:	2201      	movs	r2, #1
 8001738:	f7ff fee2 	bl	8001500 <LCD_OpenWindow>
	LCD_Write_Cmd(CMD_SetPixel);
 800173c:	202c      	movs	r0, #44	; 0x2c
 800173e:	f7ff fda7 	bl	8001290 <LCD_Write_Cmd>
	LCD_Write_Data(usColor);
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdb1 	bl	80012ac <LCD_Write_Data>

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <LCD_DrawEllipse>:

//Task 3
void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8001754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4604      	mov	r4, r0
 800175e:	4608      	mov	r0, r1
 8001760:	4611      	mov	r1, r2
 8001762:	461a      	mov	r2, r3
 8001764:	4623      	mov	r3, r4
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	4603      	mov	r3, r0
 800176a:	80bb      	strh	r3, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	803b      	strh	r3, [r7, #0]
	 */
	
	/*
	 * Implementation 1:
	 */
	float y = usP;
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fb10 	bl	8000d9c <__aeabi_ui2f>
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
	int y_int = usP;
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	617b      	str	r3, [r7, #20]
	for (int x = usC - LR; x <= usC + LR; x++) {
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	883b      	ldrh	r3, [r7, #0]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e0d8      	b.n	8001940 <LCD_DrawEllipse+0x1ec>
		y = usP + SR * sqrt(1 - ((float) (x-usC)/LR) * ((float) (x-usC)/LR));
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe9b 	bl	80004cc <__aeabi_i2d>
 8001796:	4604      	mov	r4, r0
 8001798:	460d      	mov	r5, r1
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe95 	bl	80004cc <__aeabi_i2d>
 80017a2:	4680      	mov	r8, r0
 80017a4:	4689      	mov	r9, r1
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff faf9 	bl	8000da4 <__aeabi_i2f>
 80017b2:	4606      	mov	r6, r0
 80017b4:	883b      	ldrh	r3, [r7, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faf4 	bl	8000da4 <__aeabi_i2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff fbf7 	bl	8000fb4 <__aeabi_fdiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	469a      	mov	sl, r3
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fae7 	bl	8000da4 <__aeabi_i2f>
 80017d6:	4606      	mov	r6, r0
 80017d8:	883b      	ldrh	r3, [r7, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fae2 	bl	8000da4 <__aeabi_i2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4630      	mov	r0, r6
 80017e6:	f7ff fbe5 	bl	8000fb4 <__aeabi_fdiv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4650      	mov	r0, sl
 80017f0:	f7ff fb2c 	bl	8000e4c <__aeabi_fmul>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80017fc:	f7ff fa1c 	bl	8000c38 <__aeabi_fsub>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe74 	bl	80004f0 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f001 fc5a 	bl	80030c8 <sqrt>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4640      	mov	r0, r8
 800181a:	4649      	mov	r1, r9
 800181c:	f7fe fec0 	bl	80005a0 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd04 	bl	8000234 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f9ac 	bl	8000b90 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
//		y = 20 * ((float) x/100) * ((float) x/100);
		LCD_DrawDot(x, y_int, usColor);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	b29b      	uxth	r3, r3
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	b291      	uxth	r1, r2
 8001844:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff69 	bl	800171e <LCD_DrawDot>
		LCD_DrawDot(x, 2 * usP - y_int, usColor);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	b298      	uxth	r0, r3
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29b      	uxth	r3, r3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff ff5c 	bl	800171e <LCD_DrawDot>
		if (y_int > y)
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff fa9c 	bl	8000da4 <__aeabi_i2f>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fc89 	bl	8001188 <__aeabi_fcmplt>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d02f      	beq.n	80018dc <LCD_DrawEllipse+0x188>
			for (;y_int > y + 0.5; y_int--) {
 800187c:	e017      	b.n	80018ae <LCD_DrawEllipse+0x15a>
				LCD_DrawDot(x, y_int, usColor);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	b29b      	uxth	r3, r3
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	b291      	uxth	r1, r2
 8001886:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff48 	bl	800171e <LCD_DrawDot>
				LCD_DrawDot(x, 2 * usP - y_int, usColor);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	b298      	uxth	r0, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff ff3b 	bl	800171e <LCD_DrawDot>
			for (;y_int > y + 0.5; y_int--) {
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7fe fe0c 	bl	80004cc <__aeabi_i2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7fe fe19 	bl	80004f0 <__aeabi_f2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <LCD_DrawEllipse+0x208>)
 80018c4:	f7fe fcb6 	bl	8000234 <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff f8f6 	bl	8000ac0 <__aeabi_dcmpgt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1d1      	bne.n	800187e <LCD_DrawEllipse+0x12a>
 80018da:	e02e      	b.n	800193a <LCD_DrawEllipse+0x1e6>
			}
		else
			for (;y_int < y - 0.5; y_int++) {
 80018dc:	e017      	b.n	800190e <LCD_DrawEllipse+0x1ba>
				LCD_DrawDot(x, y_int, usColor);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	b291      	uxth	r1, r2
 80018e6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff18 	bl	800171e <LCD_DrawDot>
				LCD_DrawDot(x, 2 * usP - y_int, usColor);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	b298      	uxth	r0, r3
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff ff0b 	bl	800171e <LCD_DrawDot>
			for (;y_int < y - 0.5; y_int++) {
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7fe fddc 	bl	80004cc <__aeabi_i2d>
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7fe fde9 	bl	80004f0 <__aeabi_f2d>
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <LCD_DrawEllipse+0x208>)
 8001924:	f7fe fc84 	bl	8000230 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7ff f8a8 	bl	8000a84 <__aeabi_dcmplt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1d1      	bne.n	80018de <LCD_DrawEllipse+0x18a>
	for (int x = usC - LR; x <= usC + LR; x++) {
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3301      	adds	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	883b      	ldrh	r3, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	f77f af20 	ble.w	800178e <LCD_DrawEllipse+0x3a>
	}

//	for (int x = usC; x <= usC + 2 * LR; x++) {
//		LCD_DrawDot(x, usP, usColor);
//	}
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800195a:	bf00      	nop
 800195c:	3fe00000 	.word	0x3fe00000

08001960 <LCD_WriteName>:

const uint16_t NAME_HEIGHT = 162;
const uint16_t NAME_WIDTH = 180;
const uint8_t name[] = {};
void LCD_WriteName(uint16_t usC, uint16_t usP) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	80fb      	strh	r3, [r7, #6]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]

	LCD_OpenWindow(usC, usP, NAME_WIDTH, NAME_HEIGHT);
 8001970:	22b4      	movs	r2, #180	; 0xb4
 8001972:	23a2      	movs	r3, #162	; 0xa2
 8001974:	88b9      	ldrh	r1, [r7, #4]
 8001976:	88f8      	ldrh	r0, [r7, #6]
 8001978:	f7ff fdc2 	bl	8001500 <LCD_OpenWindow>
	LCD_Write_Cmd(CMD_SetPixel);
 800197c:	202c      	movs	r0, #44	; 0x2c
 800197e:	f7ff fc87 	bl	8001290 <LCD_Write_Cmd>
	for (int i = 0; i < sizeof(name)/sizeof(uint8_t); i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e021      	b.n	80019cc <LCD_WriteName+0x6c>
		for (int j = 0; j < 8; j++) {
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	e018      	b.n	80019c0 <LCD_WriteName+0x60>
			if (name[i] & (1 << (7 - j)))
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <LCD_WriteName+0x80>)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <LCD_WriteName+0x52>
				LCD_Write_Data ( 0x001F );
 80019aa:	201f      	movs	r0, #31
 80019ac:	f7ff fc7e 	bl	80012ac <LCD_Write_Data>
 80019b0:	e003      	b.n	80019ba <LCD_WriteName+0x5a>
			else
				LCD_Write_Data (  0xFFFF );
 80019b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019b6:	f7ff fc79 	bl	80012ac <LCD_Write_Data>
		for (int j = 0; j < 8; j++) {
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	dde3      	ble.n	800198e <LCD_WriteName+0x2e>
	for (int i = 0; i < sizeof(name)/sizeof(uint8_t); i++) {
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f640 623c 	movw	r2, #3644	; 0xe3c
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d9d8      	bls.n	8001988 <LCD_WriteName+0x28>

		}
	}
}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08004844 	.word	0x08004844

080019e4 <LCD_PrintImage>:

uint16_t image[] = {
};
const uint16_t IMG_HEIGHT = 160;
const uint16_t IMG_WIDTH = 160;
void LCD_PrintImage() {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	LCD_OpenWindow(0, 0, IMG_HEIGHT, IMG_WIDTH);
 80019ea:	22a0      	movs	r2, #160	; 0xa0
 80019ec:	23a0      	movs	r3, #160	; 0xa0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fd85 	bl	8001500 <LCD_OpenWindow>
	LCD_Write_Cmd(CMD_SetPixel);
 80019f6:	202c      	movs	r0, #44	; 0x2c
 80019f8:	f7ff fc4a 	bl	8001290 <LCD_Write_Cmd>
	for (int i = 0; i < sizeof(image)/sizeof(uint8_t); i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	e00e      	b.n	8001a20 <LCD_PrintImage+0x3c>
		LCD_Write_Data(image[i]);
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <LCD_PrintImage+0x50>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc4e 	bl	80012ac <LCD_Write_Data>
		if (i >= 160*160-1) break;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f246 32fe 	movw	r2, #25598	; 0x63fe
 8001a16:	4293      	cmp	r3, r2
 8001a18:	dc07      	bgt.n	8001a2a <LCD_PrintImage+0x46>
	for (int i = 0; i < sizeof(image)/sizeof(uint8_t); i++) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8001a26:	d3ec      	bcc.n	8001a02 <LCD_PrintImage+0x1e>
	}
}
 8001a28:	e000      	b.n	8001a2c <LCD_PrintImage+0x48>
		if (i >= 160*160-1) break;
 8001a2a:	bf00      	nop
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000

08001a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3e:	f000 fab5 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a42:	f000 f8b3 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a46:	f000 f8f7 	bl	8001c38 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001a4a:	f000 f971 	bl	8001d30 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001a4e:	f7ff fbd4 	bl	80011fa <LCD_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_tick = HAL_GetTick();
 8001a52:	f000 fb03 	bl	800205c <HAL_GetTick>
 8001a56:	60b8      	str	r0, [r7, #8]
  uint32_t prev_SR = 0, prev_LR = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
  uint32_t now_SR = 0, now_LR = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t screen_state = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint8_t btn_k2_pressed = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73bb      	strb	r3, [r7, #14]
  //	  LCD_Clear(0, 0, 240, 320, BACKGROUND);
  //	  if (HAL_GetTick() - last_tick > 1000) {
  //		  last_tick = HAL_GetTick();
  //	  }

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a74:	4846      	ldr	r0, [pc, #280]	; (8001b90 <main+0x158>)
 8001a76:	f000 fd73 	bl	8002560 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d121      	bne.n	8001ac4 <main+0x8c>
		  if (!btn_k2_pressed) {
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d120      	bne.n	8001ac8 <main+0x90>
			  btn_k2_pressed = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73bb      	strb	r3, [r7, #14]
			  screen_state = (screen_state + 1) % 3;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <main+0x15c>)
 8001a90:	fb83 3102 	smull	r3, r1, r3, r2
 8001a94:	17d3      	asrs	r3, r2, #31
 8001a96:	1ac9      	subs	r1, r1, r3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	440b      	add	r3, r1
 8001a9e:	1ad1      	subs	r1, r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	73fb      	strb	r3, [r7, #15]
			  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001aae:	22f0      	movs	r2, #240	; 0xf0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fd9b 	bl	80015ee <LCD_Clear>
			  if (screen_state == 2)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d104      	bne.n	8001ac8 <main+0x90>
				  	 LCD_PrintImage();
 8001abe:	f7ff ff91 	bl	80019e4 <LCD_PrintImage>
 8001ac2:	e001      	b.n	8001ac8 <main+0x90>
		  }
	  } else {
		  btn_k2_pressed = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73bb      	strb	r3, [r7, #14]
	  }

	  prev_SR = now_SR;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	607b      	str	r3, [r7, #4]
	  prev_LR = now_LR;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	603b      	str	r3, [r7, #0]
	  now_SR = 50;
 8001ad0:	2332      	movs	r3, #50	; 0x32
 8001ad2:	617b      	str	r3, [r7, #20]
	  now_LR = (uint32_t) 25 * (1 + sin((HAL_GetTick() / 500.0f) * 2 * 3.1415926f));
 8001ad4:	f000 fac2 	bl	800205c <HAL_GetTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f95e 	bl	8000d9c <__aeabi_ui2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	492d      	ldr	r1, [pc, #180]	; (8001b98 <main+0x160>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa65 	bl	8000fb4 <__aeabi_fdiv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f8a4 	bl	8000c3c <__addsf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4929      	ldr	r1, [pc, #164]	; (8001b9c <main+0x164>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f9a7 	bl	8000e4c <__aeabi_fmul>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fcf5 	bl	80004f0 <__aeabi_f2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f001 fa95 	bl	800303c <sin>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <main+0x168>)
 8001b18:	f7fe fb8c 	bl	8000234 <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <main+0x16c>)
 8001b2a:	f7fe fd39 	bl	80005a0 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f80b 	bl	8000b50 <__aeabi_d2uiz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]

	  switch (screen_state) {
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <main+0x112>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d01c      	beq.n	8001b82 <main+0x14a>
		  LCD_DrawEllipse(120, 200, prev_SR, prev_LR, BACKGROUND);
		  break;
	  case 1:
		  LCD_WriteName(0, 0);
		  break;
	  default: break;
 8001b48:	e020      	b.n	8001b8c <main+0x154>
		  LCD_DrawString(60, 100, "Hartanto Kwee Jeffrey is very fat and disgusting. This is very very interesting.");
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <main+0x170>)
 8001b4c:	2164      	movs	r1, #100	; 0x64
 8001b4e:	203c      	movs	r0, #60	; 0x3c
 8001b50:	f7ff fdb6 	bl	80016c0 <LCD_DrawString>
		  LCD_DrawEllipse(120, 200, now_SR, now_LR, RED);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001b60:	9100      	str	r1, [sp, #0]
 8001b62:	21c8      	movs	r1, #200	; 0xc8
 8001b64:	2078      	movs	r0, #120	; 0x78
 8001b66:	f7ff fdf5 	bl	8001754 <LCD_DrawEllipse>
		  LCD_DrawEllipse(120, 200, prev_SR, prev_LR, BACKGROUND);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b76:	9100      	str	r1, [sp, #0]
 8001b78:	21c8      	movs	r1, #200	; 0xc8
 8001b7a:	2078      	movs	r0, #120	; 0x78
 8001b7c:	f7ff fdea 	bl	8001754 <LCD_DrawEllipse>
		  break;
 8001b80:	e004      	b.n	8001b8c <main+0x154>
		  LCD_WriteName(0, 0);
 8001b82:	2100      	movs	r1, #0
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff feeb 	bl	8001960 <LCD_WriteName>
		  break;
 8001b8a:	bf00      	nop
  {
 8001b8c:	e770      	b.n	8001a70 <main+0x38>
 8001b8e:	bf00      	nop
 8001b90:	40011000 	.word	0x40011000
 8001b94:	55555556 	.word	0x55555556
 8001b98:	43fa0000 	.word	0x43fa0000
 8001b9c:	40490fda 	.word	0x40490fda
 8001ba0:	3ff00000 	.word	0x3ff00000
 8001ba4:	40390000 	.word	0x40390000
 8001ba8:	080041f0 	.word	0x080041f0

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b090      	sub	sp, #64	; 0x40
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	2228      	movs	r2, #40	; 0x28
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fa36 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fce3 	bl	80025c0 <HAL_RCC_OscConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c00:	f000 f8fa 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c04:	230f      	movs	r3, #15
 8001c06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 ff50 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c2a:	f000 f8e5 	bl	8001df8 <Error_Handler>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3740      	adds	r7, #64	; 0x40
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_GPIO_Init+0xe8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_GPIO_Init+0xec>)
 8001cb4:	f000 fc6b 	bl	800258e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2102      	movs	r1, #2
 8001cbc:	481a      	ldr	r0, [pc, #104]	; (8001d28 <MX_GPIO_Init+0xf0>)
 8001cbe:	f000 fc66 	bl	800258e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <MX_GPIO_Init+0xf4>)
 8001cd8:	f000 faae 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <MX_GPIO_Init+0xec>)
 8001cf6:	f000 fa9f 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_GPIO_Init+0xf0>)
 8001d12:	f000 fa91 	bl	8002238 <HAL_GPIO_Init>

}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40011400 	.word	0x40011400
 8001d28:	40011800 	.word	0x40011800
 8001d2c:	40011000 	.word	0x40011000

08001d30 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	615a      	str	r2, [r3, #20]
 8001d46:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d4a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001d4e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <MX_FSMC_Init+0xc0>)
 8001d54:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001da6:	230f      	movs	r3, #15
 8001da8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001daa:	230f      	movs	r3, #15
 8001dac:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001dae:	23ff      	movs	r3, #255	; 0xff
 8001db0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001db2:	230f      	movs	r3, #15
 8001db4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001db6:	2310      	movs	r3, #16
 8001db8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001dba:	2311      	movs	r3, #17
 8001dbc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4808      	ldr	r0, [pc, #32]	; (8001dec <MX_FSMC_Init+0xbc>)
 8001dca:	f000 ffe1 	bl	8002d90 <HAL_SRAM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001dd4:	f000 f810 	bl	8001df8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_FSMC_Init+0xc4>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <MX_FSMC_Init+0xc4>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000c88c 	.word	0x2000c88c
 8001df0:	a0000104 	.word	0xa0000104
 8001df4:	40010000 	.word	0x40010000

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x60>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_MspInit+0x60>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_FSMC_MspInit+0x78>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d129      	bne.n	8001ed8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_FSMC_MspInit+0x78>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_FSMC_MspInit+0x7c>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_FSMC_MspInit+0x7c>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6153      	str	r3, [r2, #20]
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_FSMC_MspInit+0x7c>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ea2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ea6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <HAL_FSMC_MspInit+0x80>)
 8001eb8:	f000 f9be 	bl	8002238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ebc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001ec0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <HAL_FSMC_MspInit+0x84>)
 8001ed2:	f000 f9b1 	bl	8002238 <HAL_GPIO_Init>
 8001ed6:	e000      	b.n	8001eda <HAL_FSMC_MspInit+0x72>
    return;
 8001ed8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000c8d4 	.word	0x2000c8d4
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40011800 	.word	0x40011800
 8001eec:	40011400 	.word	0x40011400

08001ef0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ef8:	f7ff ffb6 	bl	8001e68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4a:	f000 f875 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f86:	f7ff ffe4 	bl	8001f52 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f001 f82b 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8e:	f7ff fd53 	bl	8001a38 <main>
  bx lr
 8001f92:	4770      	bx	lr
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	2000c870 	.word	0x2000c870
  ldr r2, =_sidata
 8001f9c:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 8001fa0:	2000c870 	.word	0x2000c870
  ldr r4, =_ebss
 8001fa4:	2000c8dc 	.word	0x2000c8dc

08001fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_2_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x28>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x28>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f907 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff ff1c 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f911 	bl	800221e <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f8e7 	bl	80021e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000c800 	.word	0x2000c800
 8002030:	2000c808 	.word	0x2000c808
 8002034:	2000c804 	.word	0x2000c804

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x1c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_IncTick+0x20>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	2000c808 	.word	0x2000c808
 8002058:	2000c8d8 	.word	0x2000c8d8

0800205c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <HAL_GetTick+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	2000c8d8 	.word	0x2000c8d8

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff90 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff49 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff5e 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff90 	bl	8002128 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5f 	bl	80020d4 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffb0 	bl	800218c <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	; 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e179      	b.n	8002540 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800224c:	2201      	movs	r2, #1
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8168 	bne.w	800253a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a96      	ldr	r2, [pc, #600]	; (80024c8 <HAL_GPIO_Init+0x290>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d05e      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002274:	4a94      	ldr	r2, [pc, #592]	; (80024c8 <HAL_GPIO_Init+0x290>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d875      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800227a:	4a94      	ldr	r2, [pc, #592]	; (80024cc <HAL_GPIO_Init+0x294>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d058      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002280:	4a92      	ldr	r2, [pc, #584]	; (80024cc <HAL_GPIO_Init+0x294>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d86f      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002286:	4a92      	ldr	r2, [pc, #584]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d052      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 800228c:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_GPIO_Init+0x298>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d869      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002292:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d04c      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002298:	4a8e      	ldr	r2, [pc, #568]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d863      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800229e:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d046      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 80022a4:	4a8c      	ldr	r2, [pc, #560]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d85d      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d82a      	bhi.n	8002304 <HAL_GPIO_Init+0xcc>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d859      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_GPIO_Init+0x80>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	08002333 	.word	0x08002333
 80022bc:	0800230d 	.word	0x0800230d
 80022c0:	0800231f 	.word	0x0800231f
 80022c4:	08002361 	.word	0x08002361
 80022c8:	08002367 	.word	0x08002367
 80022cc:	08002367 	.word	0x08002367
 80022d0:	08002367 	.word	0x08002367
 80022d4:	08002367 	.word	0x08002367
 80022d8:	08002367 	.word	0x08002367
 80022dc:	08002367 	.word	0x08002367
 80022e0:	08002367 	.word	0x08002367
 80022e4:	08002367 	.word	0x08002367
 80022e8:	08002367 	.word	0x08002367
 80022ec:	08002367 	.word	0x08002367
 80022f0:	08002367 	.word	0x08002367
 80022f4:	08002367 	.word	0x08002367
 80022f8:	08002367 	.word	0x08002367
 80022fc:	08002315 	.word	0x08002315
 8002300:	08002329 	.word	0x08002329
 8002304:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_GPIO_Init+0x2a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230a:	e02c      	b.n	8002366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e029      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	3304      	adds	r3, #4
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e024      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	3308      	adds	r3, #8
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e01f      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	330c      	adds	r3, #12
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e01a      	b.n	8002368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233a:	2304      	movs	r3, #4
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e013      	b.n	8002368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002348:	2308      	movs	r3, #8
 800234a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	611a      	str	r2, [r3, #16]
          break;
 8002352:	e009      	b.n	8002368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002354:	2308      	movs	r3, #8
 8002356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	615a      	str	r2, [r3, #20]
          break;
 800235e:	e003      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x130>
          break;
 8002366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d801      	bhi.n	8002372 <HAL_GPIO_Init+0x13a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	e001      	b.n	8002376 <HAL_GPIO_Init+0x13e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d802      	bhi.n	8002384 <HAL_GPIO_Init+0x14c>
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x152>
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	3b08      	subs	r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	210f      	movs	r1, #15
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80c1 	beq.w	800253a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d0:	4a44      	ldr	r2, [pc, #272]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01f      	beq.n	800243c <HAL_GPIO_Init+0x204>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x2b4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x200>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_GPIO_Init+0x2b8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1fc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_GPIO_Init+0x2bc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1f8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x2c0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1f4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2c4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1f0>
 8002424:	2305      	movs	r3, #5
 8002426:	e00a      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002428:	2306      	movs	r3, #6
 800242a:	e008      	b.n	800243e <HAL_GPIO_Init+0x206>
 800242c:	2304      	movs	r3, #4
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002430:	2303      	movs	r3, #3
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002434:	2302      	movs	r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x206>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x206>
 800243c:	2300      	movs	r3, #0
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244e:	4925      	ldr	r1, [pc, #148]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4924      	ldr	r1, [pc, #144]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4920      	ldr	r1, [pc, #128]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002480:	4013      	ands	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	491a      	ldr	r1, [pc, #104]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d025      	beq.n	8002504 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4910      	ldr	r1, [pc, #64]	; (8002500 <HAL_GPIO_Init+0x2c8>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	e025      	b.n	8002512 <HAL_GPIO_Init+0x2da>
 80024c6:	bf00      	nop
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10310000 	.word	0x10310000
 80024d0:	10220000 	.word	0x10220000
 80024d4:	10210000 	.word	0x10210000
 80024d8:	10120000 	.word	0x10120000
 80024dc:	10110000 	.word	0x10110000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40010800 	.word	0x40010800
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	40011800 	.word	0x40011800
 80024fc:	40011c00 	.word	0x40011c00
 8002500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_GPIO_Init+0x324>)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	43db      	mvns	r3, r3
 800250c:	4913      	ldr	r1, [pc, #76]	; (800255c <HAL_GPIO_Init+0x324>)
 800250e:	4013      	ands	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_GPIO_Init+0x324>)
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_GPIO_Init+0x324>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
 800252a:	e006      	b.n	800253a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_GPIO_Init+0x324>)
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	43db      	mvns	r3, r3
 8002534:	4909      	ldr	r1, [pc, #36]	; (800255c <HAL_GPIO_Init+0x324>)
 8002536:	4013      	ands	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	3301      	adds	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f ae7e 	bne.w	800224c <HAL_GPIO_Init+0x14>
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	372c      	adds	r7, #44	; 0x2c
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	807b      	strh	r3, [r7, #2]
 800259a:	4613      	mov	r3, r2
 800259c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800259e:	787b      	ldrb	r3, [r7, #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025aa:	e003      	b.n	80025b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	611a      	str	r2, [r3, #16]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e272      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e24c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x76>
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a77      	ldr	r2, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xbc>
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff fcde 	bl	800205c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff fcda 	bl	800205c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e200      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe4>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fcca 	bl	800205c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff fcc6 	bl	800205c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1ec      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x10c>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1c0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fc7f 	bl	800205c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff fc7b 	bl	800205c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1a1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4927      	ldr	r1, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fc5e 	bl	800205c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7ff fc5a 	bl	800205c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e180      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff fc3e 	bl	800205c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7ff fc3a 	bl	800205c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e160      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f000 faa6 	bl	8002d54 <RCC_Delay>
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7ff fc24 	bl	800205c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	e00f      	b.n	8002838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff fc20 	bl	800205c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d908      	bls.n	8002838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e146      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000
 8002834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e9      	bne.n	8002818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a6 	beq.w	800299e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7ff fbe1 	bl	800205c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7ff fbdd 	bl	800205c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e103      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x312>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e02d      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x334>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	e01c      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x356>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff fb91 	bl	800205c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7ff fb8d 	bl	800205c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0b1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCC_OscConfig+0x37e>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7ff fb7b 	bl	800205c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7ff fb77 	bl	800205c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e09b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8087 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d061      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d146      	bne.n	8002a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fb4b 	bl	800205c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7ff fb47 	bl	800205c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e06d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a19      	ldr	r1, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	430b      	orrs	r3, r1
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fb1b 	bl	800205c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff fb17 	bl	800205c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46a>
 8002a48:	e035      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff fb04 	bl	800205c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7ff fb00 	bl	800205c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e026      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x498>
 8002a76:	e01e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e019      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x500>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d0      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4965      	ldr	r1, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d040      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e073      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff fa52 	bl	800205c <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7ff fa4e 	bl	800205c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e053      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d210      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0207 	bic.w	r2, r3, #7
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1cc>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff f9b0 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08005684 	.word	0x08005684
 8002c90:	2000c800 	.word	0x2000c800
 8002c94:	2000c804 	.word	0x2000c804

08002c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b490      	push	{r4, r7}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ca0:	1d3c      	adds	r4, r7, #4
 8002ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca8:	f240 2301 	movw	r3, #513	; 0x201
 8002cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x46>
 8002cd6:	e02b      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cda:	623b      	str	r3, [r7, #32]
      break;
 8002cdc:	e02b      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3328      	adds	r3, #40	; 0x28
 8002ce8:	443b      	add	r3, r7
 8002cea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	3328      	adds	r3, #40	; 0x28
 8002d06:	443b      	add	r3, r7
 8002d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d12:	fb03 f202 	mul.w	r2, r3, r2
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e004      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	623b      	str	r3, [r7, #32]
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc90      	pop	{r4, r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	08004244 	.word	0x08004244
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <RCC_Delay+0x34>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <RCC_Delay+0x38>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d70:	bf00      	nop
  }
  while (Delay --);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <RCC_Delay+0x1c>
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	2000c800 	.word	0x2000c800
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_SRAM_Init+0x1c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d101      	bne.n	8002db0 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e038      	b.n	8002e22 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff f893 	bl	8001ef0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f829 	bl	8002e2c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	f000 f88b 	bl	8002f00 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6858      	ldr	r0, [r3, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f000 f8b6 	bl	8002f68 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	f041 0101 	orr.w	r1, r1, #1
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f023 0101 	bic.w	r1, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d102      	bne.n	8002e5c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002e56:	2340      	movs	r3, #64	; 0x40
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e001      	b.n	8002e60 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002e6c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002e72:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002e78:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002e7e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002e84:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002e8a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002e90:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002e96:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002e9c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <FSMC_NORSRAM_Init+0xd0>)
 8002ebc:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec4:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002ecc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	ea02 0103 	and.w	r1, r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4319      	orrs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	0008fb7f 	.word	0x0008fb7f

08002f00 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f16:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	3b02      	subs	r3, #2
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	3201      	adds	r2, #1
 8002f54:	4319      	orrs	r1, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7c:	d11d      	bne.n	8002fba <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	6811      	ldr	r1, [r2, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	6852      	ldr	r2, [r2, #4]
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	4311      	orrs	r1, r2
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	6892      	ldr	r2, [r2, #8]
 8002f9a:	0212      	lsls	r2, r2, #8
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	6992      	ldr	r2, [r2, #24]
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	0412      	lsls	r2, r2, #16
 8002faa:	430a      	orrs	r2, r1
 8002fac:	ea43 0102 	orr.w	r1, r3, r2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fb8:	e005      	b.n	8002fc6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	cff00000 	.word	0xcff00000

08002fd8 <__errno>:
 8002fd8:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <__errno+0x8>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2000c80c 	.word	0x2000c80c

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	; (800301c <__libc_init_array+0x38>)
 8002fea:	4c0d      	ldr	r4, [pc, #52]	; (8003020 <__libc_init_array+0x3c>)
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	f001 f8ee 	bl	80041d4 <_init>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4d0a      	ldr	r5, [pc, #40]	; (8003024 <__libc_init_array+0x40>)
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	; (8003028 <__libc_init_array+0x44>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	08005870 	.word	0x08005870
 8003020:	08005870 	.word	0x08005870
 8003024:	08005870 	.word	0x08005870
 8003028:	08005874 	.word	0x08005874

0800302c <memset>:
 800302c:	4603      	mov	r3, r0
 800302e:	4402      	add	r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <sin>:
 800303c:	b530      	push	{r4, r5, lr}
 800303e:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <sin+0x84>)
 8003040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003044:	4293      	cmp	r3, r2
 8003046:	b087      	sub	sp, #28
 8003048:	dc06      	bgt.n	8003058 <sin+0x1c>
 800304a:	2300      	movs	r3, #0
 800304c:	2200      	movs	r2, #0
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2300      	movs	r3, #0
 8003052:	f000 ff05 	bl	8003e60 <__kernel_sin>
 8003056:	e006      	b.n	8003066 <sin+0x2a>
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <sin+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	dd05      	ble.n	800306a <sin+0x2e>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	f7fd f8e5 	bl	8000230 <__aeabi_dsub>
 8003066:	b007      	add	sp, #28
 8003068:	bd30      	pop	{r4, r5, pc}
 800306a:	aa02      	add	r2, sp, #8
 800306c:	f000 f850 	bl	8003110 <__ieee754_rem_pio2>
 8003070:	f000 0003 	and.w	r0, r0, #3
 8003074:	2801      	cmp	r0, #1
 8003076:	d009      	beq.n	800308c <sin+0x50>
 8003078:	2802      	cmp	r0, #2
 800307a:	d00e      	beq.n	800309a <sin+0x5e>
 800307c:	b9c0      	cbnz	r0, 80030b0 <sin+0x74>
 800307e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003082:	2301      	movs	r3, #1
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800308a:	e7e2      	b.n	8003052 <sin+0x16>
 800308c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003094:	f000 fae4 	bl	8003660 <__kernel_cos>
 8003098:	e7e5      	b.n	8003066 <sin+0x2a>
 800309a:	2301      	movs	r3, #1
 800309c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030a6:	f000 fedb 	bl	8003e60 <__kernel_sin>
 80030aa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80030ae:	e7da      	b.n	8003066 <sin+0x2a>
 80030b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b8:	f000 fad2 	bl	8003660 <__kernel_cos>
 80030bc:	e7f5      	b.n	80030aa <sin+0x6e>
 80030be:	bf00      	nop
 80030c0:	3fe921fb 	.word	0x3fe921fb
 80030c4:	7fefffff 	.word	0x7fefffff

080030c8 <sqrt>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	4606      	mov	r6, r0
 80030cc:	460f      	mov	r7, r1
 80030ce:	f000 fa17 	bl	8003500 <__ieee754_sqrt>
 80030d2:	4632      	mov	r2, r6
 80030d4:	4604      	mov	r4, r0
 80030d6:	460d      	mov	r5, r1
 80030d8:	463b      	mov	r3, r7
 80030da:	4630      	mov	r0, r6
 80030dc:	4639      	mov	r1, r7
 80030de:	f7fd fcf9 	bl	8000ad4 <__aeabi_dcmpun>
 80030e2:	b990      	cbnz	r0, 800310a <sqrt+0x42>
 80030e4:	2200      	movs	r2, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	4630      	mov	r0, r6
 80030ea:	4639      	mov	r1, r7
 80030ec:	f7fd fcca 	bl	8000a84 <__aeabi_dcmplt>
 80030f0:	b158      	cbz	r0, 800310a <sqrt+0x42>
 80030f2:	f7ff ff71 	bl	8002fd8 <__errno>
 80030f6:	2321      	movs	r3, #33	; 0x21
 80030f8:	2200      	movs	r2, #0
 80030fa:	6003      	str	r3, [r0, #0]
 80030fc:	2300      	movs	r3, #0
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f7fd fb77 	bl	80007f4 <__aeabi_ddiv>
 8003106:	4604      	mov	r4, r0
 8003108:	460d      	mov	r5, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003110 <__ieee754_rem_pio2>:
 8003110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	4614      	mov	r4, r2
 8003116:	4ac4      	ldr	r2, [pc, #784]	; (8003428 <__ieee754_rem_pio2+0x318>)
 8003118:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800311c:	b08d      	sub	sp, #52	; 0x34
 800311e:	4592      	cmp	sl, r2
 8003120:	9104      	str	r1, [sp, #16]
 8003122:	dc07      	bgt.n	8003134 <__ieee754_rem_pio2+0x24>
 8003124:	2200      	movs	r2, #0
 8003126:	2300      	movs	r3, #0
 8003128:	e9c4 0100 	strd	r0, r1, [r4]
 800312c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003130:	2500      	movs	r5, #0
 8003132:	e024      	b.n	800317e <__ieee754_rem_pio2+0x6e>
 8003134:	4abd      	ldr	r2, [pc, #756]	; (800342c <__ieee754_rem_pio2+0x31c>)
 8003136:	4592      	cmp	sl, r2
 8003138:	dc72      	bgt.n	8003220 <__ieee754_rem_pio2+0x110>
 800313a:	9b04      	ldr	r3, [sp, #16]
 800313c:	4dbc      	ldr	r5, [pc, #752]	; (8003430 <__ieee754_rem_pio2+0x320>)
 800313e:	2b00      	cmp	r3, #0
 8003140:	a3ab      	add	r3, pc, #684	; (adr r3, 80033f0 <__ieee754_rem_pio2+0x2e0>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	dd36      	ble.n	80031b6 <__ieee754_rem_pio2+0xa6>
 8003148:	f7fd f872 	bl	8000230 <__aeabi_dsub>
 800314c:	45aa      	cmp	sl, r5
 800314e:	4606      	mov	r6, r0
 8003150:	460f      	mov	r7, r1
 8003152:	d018      	beq.n	8003186 <__ieee754_rem_pio2+0x76>
 8003154:	a3a8      	add	r3, pc, #672	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x2e8>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd f869 	bl	8000230 <__aeabi_dsub>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4630      	mov	r0, r6
 8003164:	e9c4 2300 	strd	r2, r3, [r4]
 8003168:	4639      	mov	r1, r7
 800316a:	f7fd f861 	bl	8000230 <__aeabi_dsub>
 800316e:	a3a2      	add	r3, pc, #648	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x2e8>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd f85c 	bl	8000230 <__aeabi_dsub>
 8003178:	2501      	movs	r5, #1
 800317a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800317e:	4628      	mov	r0, r5
 8003180:	b00d      	add	sp, #52	; 0x34
 8003182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003186:	a39e      	add	r3, pc, #632	; (adr r3, 8003400 <__ieee754_rem_pio2+0x2f0>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f7fd f850 	bl	8000230 <__aeabi_dsub>
 8003190:	a39d      	add	r3, pc, #628	; (adr r3, 8003408 <__ieee754_rem_pio2+0x2f8>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	4606      	mov	r6, r0
 8003198:	460f      	mov	r7, r1
 800319a:	f7fd f849 	bl	8000230 <__aeabi_dsub>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4630      	mov	r0, r6
 80031a4:	e9c4 2300 	strd	r2, r3, [r4]
 80031a8:	4639      	mov	r1, r7
 80031aa:	f7fd f841 	bl	8000230 <__aeabi_dsub>
 80031ae:	a396      	add	r3, pc, #600	; (adr r3, 8003408 <__ieee754_rem_pio2+0x2f8>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	e7de      	b.n	8003174 <__ieee754_rem_pio2+0x64>
 80031b6:	f7fd f83d 	bl	8000234 <__adddf3>
 80031ba:	45aa      	cmp	sl, r5
 80031bc:	4606      	mov	r6, r0
 80031be:	460f      	mov	r7, r1
 80031c0:	d016      	beq.n	80031f0 <__ieee754_rem_pio2+0xe0>
 80031c2:	a38d      	add	r3, pc, #564	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x2e8>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd f834 	bl	8000234 <__adddf3>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4630      	mov	r0, r6
 80031d2:	e9c4 2300 	strd	r2, r3, [r4]
 80031d6:	4639      	mov	r1, r7
 80031d8:	f7fd f82a 	bl	8000230 <__aeabi_dsub>
 80031dc:	a386      	add	r3, pc, #536	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x2e8>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd f827 	bl	8000234 <__adddf3>
 80031e6:	f04f 35ff 	mov.w	r5, #4294967295
 80031ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80031ee:	e7c6      	b.n	800317e <__ieee754_rem_pio2+0x6e>
 80031f0:	a383      	add	r3, pc, #524	; (adr r3, 8003400 <__ieee754_rem_pio2+0x2f0>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f7fd f81d 	bl	8000234 <__adddf3>
 80031fa:	a383      	add	r3, pc, #524	; (adr r3, 8003408 <__ieee754_rem_pio2+0x2f8>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	4606      	mov	r6, r0
 8003202:	460f      	mov	r7, r1
 8003204:	f7fd f816 	bl	8000234 <__adddf3>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4630      	mov	r0, r6
 800320e:	e9c4 2300 	strd	r2, r3, [r4]
 8003212:	4639      	mov	r1, r7
 8003214:	f7fd f80c 	bl	8000230 <__aeabi_dsub>
 8003218:	a37b      	add	r3, pc, #492	; (adr r3, 8003408 <__ieee754_rem_pio2+0x2f8>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	e7e0      	b.n	80031e2 <__ieee754_rem_pio2+0xd2>
 8003220:	4a84      	ldr	r2, [pc, #528]	; (8003434 <__ieee754_rem_pio2+0x324>)
 8003222:	4592      	cmp	sl, r2
 8003224:	f300 80d5 	bgt.w	80033d2 <__ieee754_rem_pio2+0x2c2>
 8003228:	f000 fed0 	bl	8003fcc <fabs>
 800322c:	a378      	add	r3, pc, #480	; (adr r3, 8003410 <__ieee754_rem_pio2+0x300>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	4606      	mov	r6, r0
 8003234:	460f      	mov	r7, r1
 8003236:	f7fd f9b3 	bl	80005a0 <__aeabi_dmul>
 800323a:	2200      	movs	r2, #0
 800323c:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <__ieee754_rem_pio2+0x328>)
 800323e:	f7fc fff9 	bl	8000234 <__adddf3>
 8003242:	f7fd fc5d 	bl	8000b00 <__aeabi_d2iz>
 8003246:	4605      	mov	r5, r0
 8003248:	f7fd f940 	bl	80004cc <__aeabi_i2d>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003254:	a366      	add	r3, pc, #408	; (adr r3, 80033f0 <__ieee754_rem_pio2+0x2e0>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f7fd f9a1 	bl	80005a0 <__aeabi_dmul>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4630      	mov	r0, r6
 8003264:	4639      	mov	r1, r7
 8003266:	f7fc ffe3 	bl	8000230 <__aeabi_dsub>
 800326a:	a363      	add	r3, pc, #396	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x2e8>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	4680      	mov	r8, r0
 8003272:	4689      	mov	r9, r1
 8003274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003278:	f7fd f992 	bl	80005a0 <__aeabi_dmul>
 800327c:	2d1f      	cmp	r5, #31
 800327e:	4606      	mov	r6, r0
 8003280:	460f      	mov	r7, r1
 8003282:	dc0e      	bgt.n	80032a2 <__ieee754_rem_pio2+0x192>
 8003284:	4b6d      	ldr	r3, [pc, #436]	; (800343c <__ieee754_rem_pio2+0x32c>)
 8003286:	1e6a      	subs	r2, r5, #1
 8003288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328c:	4553      	cmp	r3, sl
 800328e:	d008      	beq.n	80032a2 <__ieee754_rem_pio2+0x192>
 8003290:	4632      	mov	r2, r6
 8003292:	463b      	mov	r3, r7
 8003294:	4640      	mov	r0, r8
 8003296:	4649      	mov	r1, r9
 8003298:	f7fc ffca 	bl	8000230 <__aeabi_dsub>
 800329c:	e9c4 0100 	strd	r0, r1, [r4]
 80032a0:	e013      	b.n	80032ca <__ieee754_rem_pio2+0x1ba>
 80032a2:	463b      	mov	r3, r7
 80032a4:	4632      	mov	r2, r6
 80032a6:	4640      	mov	r0, r8
 80032a8:	4649      	mov	r1, r9
 80032aa:	f7fc ffc1 	bl	8000230 <__aeabi_dsub>
 80032ae:	ea4f 532a 	mov.w	r3, sl, asr #20
 80032b2:	9305      	str	r3, [sp, #20]
 80032b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80032b8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80032bc:	f1ba 0f10 	cmp.w	sl, #16
 80032c0:	dc1f      	bgt.n	8003302 <__ieee754_rem_pio2+0x1f2>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	e9c4 2300 	strd	r2, r3, [r4]
 80032ca:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80032ce:	4640      	mov	r0, r8
 80032d0:	4653      	mov	r3, sl
 80032d2:	4649      	mov	r1, r9
 80032d4:	f7fc ffac 	bl	8000230 <__aeabi_dsub>
 80032d8:	4632      	mov	r2, r6
 80032da:	463b      	mov	r3, r7
 80032dc:	f7fc ffa8 	bl	8000230 <__aeabi_dsub>
 80032e0:	460b      	mov	r3, r1
 80032e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80032e6:	9904      	ldr	r1, [sp, #16]
 80032e8:	4602      	mov	r2, r0
 80032ea:	2900      	cmp	r1, #0
 80032ec:	f6bf af47 	bge.w	800317e <__ieee754_rem_pio2+0x6e>
 80032f0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80032f4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80032f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	60e3      	str	r3, [r4, #12]
 80032fe:	426d      	negs	r5, r5
 8003300:	e73d      	b.n	800317e <__ieee754_rem_pio2+0x6e>
 8003302:	a33f      	add	r3, pc, #252	; (adr r3, 8003400 <__ieee754_rem_pio2+0x2f0>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800330c:	f7fd f948 	bl	80005a0 <__aeabi_dmul>
 8003310:	4606      	mov	r6, r0
 8003312:	460f      	mov	r7, r1
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4640      	mov	r0, r8
 800331a:	4649      	mov	r1, r9
 800331c:	f7fc ff88 	bl	8000230 <__aeabi_dsub>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4682      	mov	sl, r0
 8003326:	468b      	mov	fp, r1
 8003328:	4640      	mov	r0, r8
 800332a:	4649      	mov	r1, r9
 800332c:	f7fc ff80 	bl	8000230 <__aeabi_dsub>
 8003330:	4632      	mov	r2, r6
 8003332:	463b      	mov	r3, r7
 8003334:	f7fc ff7c 	bl	8000230 <__aeabi_dsub>
 8003338:	a333      	add	r3, pc, #204	; (adr r3, 8003408 <__ieee754_rem_pio2+0x2f8>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	4606      	mov	r6, r0
 8003340:	460f      	mov	r7, r1
 8003342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003346:	f7fd f92b 	bl	80005a0 <__aeabi_dmul>
 800334a:	4632      	mov	r2, r6
 800334c:	463b      	mov	r3, r7
 800334e:	f7fc ff6f 	bl	8000230 <__aeabi_dsub>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4606      	mov	r6, r0
 8003358:	460f      	mov	r7, r1
 800335a:	4650      	mov	r0, sl
 800335c:	4659      	mov	r1, fp
 800335e:	f7fc ff67 	bl	8000230 <__aeabi_dsub>
 8003362:	9a05      	ldr	r2, [sp, #20]
 8003364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b31      	cmp	r3, #49	; 0x31
 800336c:	dc06      	bgt.n	800337c <__ieee754_rem_pio2+0x26c>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	46d0      	mov	r8, sl
 8003374:	46d9      	mov	r9, fp
 8003376:	e9c4 2300 	strd	r2, r3, [r4]
 800337a:	e7a6      	b.n	80032ca <__ieee754_rem_pio2+0x1ba>
 800337c:	a326      	add	r3, pc, #152	; (adr r3, 8003418 <__ieee754_rem_pio2+0x308>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003386:	f7fd f90b 	bl	80005a0 <__aeabi_dmul>
 800338a:	4606      	mov	r6, r0
 800338c:	460f      	mov	r7, r1
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4650      	mov	r0, sl
 8003394:	4659      	mov	r1, fp
 8003396:	f7fc ff4b 	bl	8000230 <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4680      	mov	r8, r0
 80033a0:	4689      	mov	r9, r1
 80033a2:	4650      	mov	r0, sl
 80033a4:	4659      	mov	r1, fp
 80033a6:	f7fc ff43 	bl	8000230 <__aeabi_dsub>
 80033aa:	4632      	mov	r2, r6
 80033ac:	463b      	mov	r3, r7
 80033ae:	f7fc ff3f 	bl	8000230 <__aeabi_dsub>
 80033b2:	a31b      	add	r3, pc, #108	; (adr r3, 8003420 <__ieee754_rem_pio2+0x310>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	4606      	mov	r6, r0
 80033ba:	460f      	mov	r7, r1
 80033bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033c0:	f7fd f8ee 	bl	80005a0 <__aeabi_dmul>
 80033c4:	4632      	mov	r2, r6
 80033c6:	463b      	mov	r3, r7
 80033c8:	f7fc ff32 	bl	8000230 <__aeabi_dsub>
 80033cc:	4606      	mov	r6, r0
 80033ce:	460f      	mov	r7, r1
 80033d0:	e75e      	b.n	8003290 <__ieee754_rem_pio2+0x180>
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <__ieee754_rem_pio2+0x330>)
 80033d4:	4592      	cmp	sl, r2
 80033d6:	dd35      	ble.n	8003444 <__ieee754_rem_pio2+0x334>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	f7fc ff28 	bl	8000230 <__aeabi_dsub>
 80033e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033e4:	e9c4 0100 	strd	r0, r1, [r4]
 80033e8:	e6a2      	b.n	8003130 <__ieee754_rem_pio2+0x20>
 80033ea:	bf00      	nop
 80033ec:	f3af 8000 	nop.w
 80033f0:	54400000 	.word	0x54400000
 80033f4:	3ff921fb 	.word	0x3ff921fb
 80033f8:	1a626331 	.word	0x1a626331
 80033fc:	3dd0b461 	.word	0x3dd0b461
 8003400:	1a600000 	.word	0x1a600000
 8003404:	3dd0b461 	.word	0x3dd0b461
 8003408:	2e037073 	.word	0x2e037073
 800340c:	3ba3198a 	.word	0x3ba3198a
 8003410:	6dc9c883 	.word	0x6dc9c883
 8003414:	3fe45f30 	.word	0x3fe45f30
 8003418:	2e000000 	.word	0x2e000000
 800341c:	3ba3198a 	.word	0x3ba3198a
 8003420:	252049c1 	.word	0x252049c1
 8003424:	397b839a 	.word	0x397b839a
 8003428:	3fe921fb 	.word	0x3fe921fb
 800342c:	4002d97b 	.word	0x4002d97b
 8003430:	3ff921fb 	.word	0x3ff921fb
 8003434:	413921fb 	.word	0x413921fb
 8003438:	3fe00000 	.word	0x3fe00000
 800343c:	08005694 	.word	0x08005694
 8003440:	7fefffff 	.word	0x7fefffff
 8003444:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003448:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800344c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003450:	460f      	mov	r7, r1
 8003452:	4606      	mov	r6, r0
 8003454:	f7fd fb54 	bl	8000b00 <__aeabi_d2iz>
 8003458:	f7fd f838 	bl	80004cc <__aeabi_i2d>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4630      	mov	r0, r6
 8003462:	4639      	mov	r1, r7
 8003464:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003468:	f7fc fee2 	bl	8000230 <__aeabi_dsub>
 800346c:	2200      	movs	r2, #0
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <__ieee754_rem_pio2+0x3e8>)
 8003470:	f7fd f896 	bl	80005a0 <__aeabi_dmul>
 8003474:	460f      	mov	r7, r1
 8003476:	4606      	mov	r6, r0
 8003478:	f7fd fb42 	bl	8000b00 <__aeabi_d2iz>
 800347c:	f7fd f826 	bl	80004cc <__aeabi_i2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4630      	mov	r0, r6
 8003486:	4639      	mov	r1, r7
 8003488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800348c:	f7fc fed0 	bl	8000230 <__aeabi_dsub>
 8003490:	2200      	movs	r2, #0
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <__ieee754_rem_pio2+0x3e8>)
 8003494:	f7fd f884 	bl	80005a0 <__aeabi_dmul>
 8003498:	f04f 0803 	mov.w	r8, #3
 800349c:	2600      	movs	r6, #0
 800349e:	2700      	movs	r7, #0
 80034a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80034a4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80034a8:	4632      	mov	r2, r6
 80034aa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80034ae:	463b      	mov	r3, r7
 80034b0:	46c2      	mov	sl, r8
 80034b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80034b6:	f7fd fadb 	bl	8000a70 <__aeabi_dcmpeq>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d1f4      	bne.n	80034a8 <__ieee754_rem_pio2+0x398>
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <__ieee754_rem_pio2+0x3ec>)
 80034c0:	462a      	mov	r2, r5
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2302      	movs	r3, #2
 80034c6:	4621      	mov	r1, r4
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	a806      	add	r0, sp, #24
 80034cc:	4653      	mov	r3, sl
 80034ce:	f000 f985 	bl	80037dc <__kernel_rem_pio2>
 80034d2:	9b04      	ldr	r3, [sp, #16]
 80034d4:	4605      	mov	r5, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f6bf ae51 	bge.w	800317e <__ieee754_rem_pio2+0x6e>
 80034dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80034e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034e4:	e9c4 2300 	strd	r2, r3, [r4]
 80034e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80034ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80034f4:	e703      	b.n	80032fe <__ieee754_rem_pio2+0x1ee>
 80034f6:	bf00      	nop
 80034f8:	41700000 	.word	0x41700000
 80034fc:	08005714 	.word	0x08005714

08003500 <__ieee754_sqrt>:
 8003500:	f8df c158 	ldr.w	ip, [pc, #344]	; 800365c <__ieee754_sqrt+0x15c>
 8003504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003508:	ea3c 0c01 	bics.w	ip, ip, r1
 800350c:	4606      	mov	r6, r0
 800350e:	460d      	mov	r5, r1
 8003510:	460c      	mov	r4, r1
 8003512:	460a      	mov	r2, r1
 8003514:	4607      	mov	r7, r0
 8003516:	4603      	mov	r3, r0
 8003518:	d10f      	bne.n	800353a <__ieee754_sqrt+0x3a>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	f7fd f83f 	bl	80005a0 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4630      	mov	r0, r6
 8003528:	4629      	mov	r1, r5
 800352a:	f7fc fe83 	bl	8000234 <__adddf3>
 800352e:	4606      	mov	r6, r0
 8003530:	460d      	mov	r5, r1
 8003532:	4630      	mov	r0, r6
 8003534:	4629      	mov	r1, r5
 8003536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800353a:	2900      	cmp	r1, #0
 800353c:	dc0e      	bgt.n	800355c <__ieee754_sqrt+0x5c>
 800353e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003542:	ea5c 0707 	orrs.w	r7, ip, r7
 8003546:	d0f4      	beq.n	8003532 <__ieee754_sqrt+0x32>
 8003548:	b141      	cbz	r1, 800355c <__ieee754_sqrt+0x5c>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	f7fc fe6f 	bl	8000230 <__aeabi_dsub>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	f7fd f94d 	bl	80007f4 <__aeabi_ddiv>
 800355a:	e7e8      	b.n	800352e <__ieee754_sqrt+0x2e>
 800355c:	1521      	asrs	r1, r4, #20
 800355e:	d075      	beq.n	800364c <__ieee754_sqrt+0x14c>
 8003560:	07cc      	lsls	r4, r1, #31
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800356a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800356e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003572:	bf5e      	ittt	pl
 8003574:	0fd9      	lsrpl	r1, r3, #31
 8003576:	005b      	lslpl	r3, r3, #1
 8003578:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800357c:	0fd9      	lsrs	r1, r3, #31
 800357e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003582:	2516      	movs	r5, #22
 8003584:	4620      	mov	r0, r4
 8003586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358a:	107f      	asrs	r7, r7, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	1846      	adds	r6, r0, r1
 8003590:	4296      	cmp	r6, r2
 8003592:	bfde      	ittt	le
 8003594:	1b92      	suble	r2, r2, r6
 8003596:	1870      	addle	r0, r6, r1
 8003598:	1864      	addle	r4, r4, r1
 800359a:	0052      	lsls	r2, r2, #1
 800359c:	3d01      	subs	r5, #1
 800359e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80035a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80035a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80035aa:	d1f0      	bne.n	800358e <__ieee754_sqrt+0x8e>
 80035ac:	4629      	mov	r1, r5
 80035ae:	f04f 0e20 	mov.w	lr, #32
 80035b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80035b6:	4282      	cmp	r2, r0
 80035b8:	eb06 0c05 	add.w	ip, r6, r5
 80035bc:	dc02      	bgt.n	80035c4 <__ieee754_sqrt+0xc4>
 80035be:	d113      	bne.n	80035e8 <__ieee754_sqrt+0xe8>
 80035c0:	459c      	cmp	ip, r3
 80035c2:	d811      	bhi.n	80035e8 <__ieee754_sqrt+0xe8>
 80035c4:	f1bc 0f00 	cmp.w	ip, #0
 80035c8:	eb0c 0506 	add.w	r5, ip, r6
 80035cc:	da43      	bge.n	8003656 <__ieee754_sqrt+0x156>
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	db41      	blt.n	8003656 <__ieee754_sqrt+0x156>
 80035d2:	f100 0801 	add.w	r8, r0, #1
 80035d6:	1a12      	subs	r2, r2, r0
 80035d8:	4640      	mov	r0, r8
 80035da:	459c      	cmp	ip, r3
 80035dc:	bf88      	it	hi
 80035de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80035e2:	eba3 030c 	sub.w	r3, r3, ip
 80035e6:	4431      	add	r1, r6
 80035e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80035ec:	f1be 0e01 	subs.w	lr, lr, #1
 80035f0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80035f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80035f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80035fc:	d1db      	bne.n	80035b6 <__ieee754_sqrt+0xb6>
 80035fe:	4313      	orrs	r3, r2
 8003600:	d006      	beq.n	8003610 <__ieee754_sqrt+0x110>
 8003602:	1c48      	adds	r0, r1, #1
 8003604:	bf0b      	itete	eq
 8003606:	4671      	moveq	r1, lr
 8003608:	3101      	addne	r1, #1
 800360a:	3401      	addeq	r4, #1
 800360c:	f021 0101 	bicne.w	r1, r1, #1
 8003610:	1063      	asrs	r3, r4, #1
 8003612:	0849      	lsrs	r1, r1, #1
 8003614:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003618:	07e2      	lsls	r2, r4, #31
 800361a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800361e:	bf48      	it	mi
 8003620:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003624:	460e      	mov	r6, r1
 8003626:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800362a:	e782      	b.n	8003532 <__ieee754_sqrt+0x32>
 800362c:	0ada      	lsrs	r2, r3, #11
 800362e:	3815      	subs	r0, #21
 8003630:	055b      	lsls	r3, r3, #21
 8003632:	2a00      	cmp	r2, #0
 8003634:	d0fa      	beq.n	800362c <__ieee754_sqrt+0x12c>
 8003636:	02d5      	lsls	r5, r2, #11
 8003638:	d50a      	bpl.n	8003650 <__ieee754_sqrt+0x150>
 800363a:	f1c1 0420 	rsb	r4, r1, #32
 800363e:	fa23 f404 	lsr.w	r4, r3, r4
 8003642:	1e4d      	subs	r5, r1, #1
 8003644:	408b      	lsls	r3, r1
 8003646:	4322      	orrs	r2, r4
 8003648:	1b41      	subs	r1, r0, r5
 800364a:	e789      	b.n	8003560 <__ieee754_sqrt+0x60>
 800364c:	4608      	mov	r0, r1
 800364e:	e7f0      	b.n	8003632 <__ieee754_sqrt+0x132>
 8003650:	0052      	lsls	r2, r2, #1
 8003652:	3101      	adds	r1, #1
 8003654:	e7ef      	b.n	8003636 <__ieee754_sqrt+0x136>
 8003656:	4680      	mov	r8, r0
 8003658:	e7bd      	b.n	80035d6 <__ieee754_sqrt+0xd6>
 800365a:	bf00      	nop
 800365c:	7ff00000 	.word	0x7ff00000

08003660 <__kernel_cos>:
 8003660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003664:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003668:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800366c:	4680      	mov	r8, r0
 800366e:	460f      	mov	r7, r1
 8003670:	e9cd 2300 	strd	r2, r3, [sp]
 8003674:	da04      	bge.n	8003680 <__kernel_cos+0x20>
 8003676:	f7fd fa43 	bl	8000b00 <__aeabi_d2iz>
 800367a:	2800      	cmp	r0, #0
 800367c:	f000 8086 	beq.w	800378c <__kernel_cos+0x12c>
 8003680:	4642      	mov	r2, r8
 8003682:	463b      	mov	r3, r7
 8003684:	4640      	mov	r0, r8
 8003686:	4639      	mov	r1, r7
 8003688:	f7fc ff8a 	bl	80005a0 <__aeabi_dmul>
 800368c:	2200      	movs	r2, #0
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <__kernel_cos+0x168>)
 8003690:	4604      	mov	r4, r0
 8003692:	460d      	mov	r5, r1
 8003694:	f7fc ff84 	bl	80005a0 <__aeabi_dmul>
 8003698:	a33f      	add	r3, pc, #252	; (adr r3, 8003798 <__kernel_cos+0x138>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	4682      	mov	sl, r0
 80036a0:	468b      	mov	fp, r1
 80036a2:	4620      	mov	r0, r4
 80036a4:	4629      	mov	r1, r5
 80036a6:	f7fc ff7b 	bl	80005a0 <__aeabi_dmul>
 80036aa:	a33d      	add	r3, pc, #244	; (adr r3, 80037a0 <__kernel_cos+0x140>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f7fc fdc0 	bl	8000234 <__adddf3>
 80036b4:	4622      	mov	r2, r4
 80036b6:	462b      	mov	r3, r5
 80036b8:	f7fc ff72 	bl	80005a0 <__aeabi_dmul>
 80036bc:	a33a      	add	r3, pc, #232	; (adr r3, 80037a8 <__kernel_cos+0x148>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc fdb5 	bl	8000230 <__aeabi_dsub>
 80036c6:	4622      	mov	r2, r4
 80036c8:	462b      	mov	r3, r5
 80036ca:	f7fc ff69 	bl	80005a0 <__aeabi_dmul>
 80036ce:	a338      	add	r3, pc, #224	; (adr r3, 80037b0 <__kernel_cos+0x150>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc fdae 	bl	8000234 <__adddf3>
 80036d8:	4622      	mov	r2, r4
 80036da:	462b      	mov	r3, r5
 80036dc:	f7fc ff60 	bl	80005a0 <__aeabi_dmul>
 80036e0:	a335      	add	r3, pc, #212	; (adr r3, 80037b8 <__kernel_cos+0x158>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc fda3 	bl	8000230 <__aeabi_dsub>
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	f7fc ff57 	bl	80005a0 <__aeabi_dmul>
 80036f2:	a333      	add	r3, pc, #204	; (adr r3, 80037c0 <__kernel_cos+0x160>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc fd9c 	bl	8000234 <__adddf3>
 80036fc:	4622      	mov	r2, r4
 80036fe:	462b      	mov	r3, r5
 8003700:	f7fc ff4e 	bl	80005a0 <__aeabi_dmul>
 8003704:	4622      	mov	r2, r4
 8003706:	462b      	mov	r3, r5
 8003708:	f7fc ff4a 	bl	80005a0 <__aeabi_dmul>
 800370c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	4640      	mov	r0, r8
 8003716:	4639      	mov	r1, r7
 8003718:	f7fc ff42 	bl	80005a0 <__aeabi_dmul>
 800371c:	460b      	mov	r3, r1
 800371e:	4602      	mov	r2, r0
 8003720:	4629      	mov	r1, r5
 8003722:	4620      	mov	r0, r4
 8003724:	f7fc fd84 	bl	8000230 <__aeabi_dsub>
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <__kernel_cos+0x16c>)
 800372a:	4680      	mov	r8, r0
 800372c:	429e      	cmp	r6, r3
 800372e:	4689      	mov	r9, r1
 8003730:	dc0e      	bgt.n	8003750 <__kernel_cos+0xf0>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4650      	mov	r0, sl
 8003738:	4659      	mov	r1, fp
 800373a:	f7fc fd79 	bl	8000230 <__aeabi_dsub>
 800373e:	4602      	mov	r2, r0
 8003740:	2000      	movs	r0, #0
 8003742:	460b      	mov	r3, r1
 8003744:	4922      	ldr	r1, [pc, #136]	; (80037d0 <__kernel_cos+0x170>)
 8003746:	f7fc fd73 	bl	8000230 <__aeabi_dsub>
 800374a:	b003      	add	sp, #12
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	2400      	movs	r4, #0
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <__kernel_cos+0x174>)
 8003754:	4622      	mov	r2, r4
 8003756:	429e      	cmp	r6, r3
 8003758:	bfcc      	ite	gt
 800375a:	4d1f      	ldrgt	r5, [pc, #124]	; (80037d8 <__kernel_cos+0x178>)
 800375c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003760:	462b      	mov	r3, r5
 8003762:	2000      	movs	r0, #0
 8003764:	491a      	ldr	r1, [pc, #104]	; (80037d0 <__kernel_cos+0x170>)
 8003766:	f7fc fd63 	bl	8000230 <__aeabi_dsub>
 800376a:	4622      	mov	r2, r4
 800376c:	4606      	mov	r6, r0
 800376e:	460f      	mov	r7, r1
 8003770:	462b      	mov	r3, r5
 8003772:	4650      	mov	r0, sl
 8003774:	4659      	mov	r1, fp
 8003776:	f7fc fd5b 	bl	8000230 <__aeabi_dsub>
 800377a:	4642      	mov	r2, r8
 800377c:	464b      	mov	r3, r9
 800377e:	f7fc fd57 	bl	8000230 <__aeabi_dsub>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4630      	mov	r0, r6
 8003788:	4639      	mov	r1, r7
 800378a:	e7dc      	b.n	8003746 <__kernel_cos+0xe6>
 800378c:	2000      	movs	r0, #0
 800378e:	4910      	ldr	r1, [pc, #64]	; (80037d0 <__kernel_cos+0x170>)
 8003790:	e7db      	b.n	800374a <__kernel_cos+0xea>
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
 8003798:	be8838d4 	.word	0xbe8838d4
 800379c:	bda8fae9 	.word	0xbda8fae9
 80037a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80037a4:	3e21ee9e 	.word	0x3e21ee9e
 80037a8:	809c52ad 	.word	0x809c52ad
 80037ac:	3e927e4f 	.word	0x3e927e4f
 80037b0:	19cb1590 	.word	0x19cb1590
 80037b4:	3efa01a0 	.word	0x3efa01a0
 80037b8:	16c15177 	.word	0x16c15177
 80037bc:	3f56c16c 	.word	0x3f56c16c
 80037c0:	5555554c 	.word	0x5555554c
 80037c4:	3fa55555 	.word	0x3fa55555
 80037c8:	3fe00000 	.word	0x3fe00000
 80037cc:	3fd33332 	.word	0x3fd33332
 80037d0:	3ff00000 	.word	0x3ff00000
 80037d4:	3fe90000 	.word	0x3fe90000
 80037d8:	3fd20000 	.word	0x3fd20000

080037dc <__kernel_rem_pio2>:
 80037dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80037e4:	9308      	str	r3, [sp, #32]
 80037e6:	9106      	str	r1, [sp, #24]
 80037e8:	4bb6      	ldr	r3, [pc, #728]	; (8003ac4 <__kernel_rem_pio2+0x2e8>)
 80037ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80037ec:	f112 0f14 	cmn.w	r2, #20
 80037f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037f4:	bfa8      	it	ge
 80037f6:	1ed4      	subge	r4, r2, #3
 80037f8:	9302      	str	r3, [sp, #8]
 80037fa:	9b08      	ldr	r3, [sp, #32]
 80037fc:	bfb8      	it	lt
 80037fe:	2400      	movlt	r4, #0
 8003800:	f103 33ff 	add.w	r3, r3, #4294967295
 8003804:	9307      	str	r3, [sp, #28]
 8003806:	bfa4      	itt	ge
 8003808:	2318      	movge	r3, #24
 800380a:	fb94 f4f3 	sdivge	r4, r4, r3
 800380e:	f06f 0317 	mvn.w	r3, #23
 8003812:	fb04 3303 	mla	r3, r4, r3, r3
 8003816:	eb03 0b02 	add.w	fp, r3, r2
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	1aa7      	subs	r7, r4, r2
 8003820:	eb03 0802 	add.w	r8, r3, r2
 8003824:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003826:	2500      	movs	r5, #0
 8003828:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800382c:	2200      	movs	r2, #0
 800382e:	2300      	movs	r3, #0
 8003830:	9009      	str	r0, [sp, #36]	; 0x24
 8003832:	ae20      	add	r6, sp, #128	; 0x80
 8003834:	4545      	cmp	r5, r8
 8003836:	dd14      	ble.n	8003862 <__kernel_rem_pio2+0x86>
 8003838:	f04f 0800 	mov.w	r8, #0
 800383c:	9a08      	ldr	r2, [sp, #32]
 800383e:	ab20      	add	r3, sp, #128	; 0x80
 8003840:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003844:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003848:	9b02      	ldr	r3, [sp, #8]
 800384a:	4598      	cmp	r8, r3
 800384c:	dc35      	bgt.n	80038ba <__kernel_rem_pio2+0xde>
 800384e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003850:	2200      	movs	r2, #0
 8003852:	f1a3 0908 	sub.w	r9, r3, #8
 8003856:	2300      	movs	r3, #0
 8003858:	462f      	mov	r7, r5
 800385a:	2600      	movs	r6, #0
 800385c:	e9cd 2300 	strd	r2, r3, [sp]
 8003860:	e01f      	b.n	80038a2 <__kernel_rem_pio2+0xc6>
 8003862:	42ef      	cmn	r7, r5
 8003864:	d40b      	bmi.n	800387e <__kernel_rem_pio2+0xa2>
 8003866:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800386a:	e9cd 2300 	strd	r2, r3, [sp]
 800386e:	f7fc fe2d 	bl	80004cc <__aeabi_i2d>
 8003872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003876:	e8e6 0102 	strd	r0, r1, [r6], #8
 800387a:	3501      	adds	r5, #1
 800387c:	e7da      	b.n	8003834 <__kernel_rem_pio2+0x58>
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	e7f8      	b.n	8003876 <__kernel_rem_pio2+0x9a>
 8003884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003888:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800388c:	f7fc fe88 	bl	80005a0 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003898:	f7fc fccc 	bl	8000234 <__adddf3>
 800389c:	e9cd 0100 	strd	r0, r1, [sp]
 80038a0:	3601      	adds	r6, #1
 80038a2:	9b07      	ldr	r3, [sp, #28]
 80038a4:	3f08      	subs	r7, #8
 80038a6:	429e      	cmp	r6, r3
 80038a8:	ddec      	ble.n	8003884 <__kernel_rem_pio2+0xa8>
 80038aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038ae:	f108 0801 	add.w	r8, r8, #1
 80038b2:	e8ea 2302 	strd	r2, r3, [sl], #8
 80038b6:	3508      	adds	r5, #8
 80038b8:	e7c6      	b.n	8003848 <__kernel_rem_pio2+0x6c>
 80038ba:	9b02      	ldr	r3, [sp, #8]
 80038bc:	aa0c      	add	r2, sp, #48	; 0x30
 80038be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80038c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80038c6:	9e02      	ldr	r6, [sp, #8]
 80038c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80038cc:	930a      	str	r3, [sp, #40]	; 0x28
 80038ce:	ab98      	add	r3, sp, #608	; 0x260
 80038d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80038d4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80038d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80038da:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80038de:	46d0      	mov	r8, sl
 80038e0:	46b1      	mov	r9, r6
 80038e2:	af0c      	add	r7, sp, #48	; 0x30
 80038e4:	9700      	str	r7, [sp, #0]
 80038e6:	f1b9 0f00 	cmp.w	r9, #0
 80038ea:	f1a8 0808 	sub.w	r8, r8, #8
 80038ee:	dc71      	bgt.n	80039d4 <__kernel_rem_pio2+0x1f8>
 80038f0:	465a      	mov	r2, fp
 80038f2:	4620      	mov	r0, r4
 80038f4:	4629      	mov	r1, r5
 80038f6:	f000 fbef 	bl	80040d8 <scalbn>
 80038fa:	2200      	movs	r2, #0
 80038fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003900:	4604      	mov	r4, r0
 8003902:	460d      	mov	r5, r1
 8003904:	f7fc fe4c 	bl	80005a0 <__aeabi_dmul>
 8003908:	f000 fb66 	bl	8003fd8 <floor>
 800390c:	2200      	movs	r2, #0
 800390e:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <__kernel_rem_pio2+0x2ec>)
 8003910:	f7fc fe46 	bl	80005a0 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4620      	mov	r0, r4
 800391a:	4629      	mov	r1, r5
 800391c:	f7fc fc88 	bl	8000230 <__aeabi_dsub>
 8003920:	460d      	mov	r5, r1
 8003922:	4604      	mov	r4, r0
 8003924:	f7fd f8ec 	bl	8000b00 <__aeabi_d2iz>
 8003928:	9004      	str	r0, [sp, #16]
 800392a:	f7fc fdcf 	bl	80004cc <__aeabi_i2d>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4620      	mov	r0, r4
 8003934:	4629      	mov	r1, r5
 8003936:	f7fc fc7b 	bl	8000230 <__aeabi_dsub>
 800393a:	f1bb 0f00 	cmp.w	fp, #0
 800393e:	4680      	mov	r8, r0
 8003940:	4689      	mov	r9, r1
 8003942:	dd70      	ble.n	8003a26 <__kernel_rem_pio2+0x24a>
 8003944:	1e72      	subs	r2, r6, #1
 8003946:	ab0c      	add	r3, sp, #48	; 0x30
 8003948:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800394c:	9c04      	ldr	r4, [sp, #16]
 800394e:	f1cb 0118 	rsb	r1, fp, #24
 8003952:	fa40 f301 	asr.w	r3, r0, r1
 8003956:	441c      	add	r4, r3
 8003958:	408b      	lsls	r3, r1
 800395a:	1ac0      	subs	r0, r0, r3
 800395c:	ab0c      	add	r3, sp, #48	; 0x30
 800395e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003962:	f1cb 0317 	rsb	r3, fp, #23
 8003966:	9404      	str	r4, [sp, #16]
 8003968:	fa40 f303 	asr.w	r3, r0, r3
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	9b00      	ldr	r3, [sp, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	dd66      	ble.n	8003a42 <__kernel_rem_pio2+0x266>
 8003974:	2200      	movs	r2, #0
 8003976:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800397a:	4614      	mov	r4, r2
 800397c:	9b04      	ldr	r3, [sp, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	9304      	str	r3, [sp, #16]
 8003982:	4296      	cmp	r6, r2
 8003984:	f300 80ac 	bgt.w	8003ae0 <__kernel_rem_pio2+0x304>
 8003988:	f1bb 0f00 	cmp.w	fp, #0
 800398c:	dd07      	ble.n	800399e <__kernel_rem_pio2+0x1c2>
 800398e:	f1bb 0f01 	cmp.w	fp, #1
 8003992:	f000 80b4 	beq.w	8003afe <__kernel_rem_pio2+0x322>
 8003996:	f1bb 0f02 	cmp.w	fp, #2
 800399a:	f000 80ba 	beq.w	8003b12 <__kernel_rem_pio2+0x336>
 800399e:	9b00      	ldr	r3, [sp, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d14e      	bne.n	8003a42 <__kernel_rem_pio2+0x266>
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	2000      	movs	r0, #0
 80039aa:	4948      	ldr	r1, [pc, #288]	; (8003acc <__kernel_rem_pio2+0x2f0>)
 80039ac:	f7fc fc40 	bl	8000230 <__aeabi_dsub>
 80039b0:	4680      	mov	r8, r0
 80039b2:	4689      	mov	r9, r1
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d044      	beq.n	8003a42 <__kernel_rem_pio2+0x266>
 80039b8:	465a      	mov	r2, fp
 80039ba:	2000      	movs	r0, #0
 80039bc:	4943      	ldr	r1, [pc, #268]	; (8003acc <__kernel_rem_pio2+0x2f0>)
 80039be:	f000 fb8b 	bl	80040d8 <scalbn>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4640      	mov	r0, r8
 80039c8:	4649      	mov	r1, r9
 80039ca:	f7fc fc31 	bl	8000230 <__aeabi_dsub>
 80039ce:	4680      	mov	r8, r0
 80039d0:	4689      	mov	r9, r1
 80039d2:	e036      	b.n	8003a42 <__kernel_rem_pio2+0x266>
 80039d4:	2200      	movs	r2, #0
 80039d6:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <__kernel_rem_pio2+0x2f4>)
 80039d8:	4620      	mov	r0, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	f7fc fde0 	bl	80005a0 <__aeabi_dmul>
 80039e0:	f7fd f88e 	bl	8000b00 <__aeabi_d2iz>
 80039e4:	f7fc fd72 	bl	80004cc <__aeabi_i2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039f0:	2200      	movs	r2, #0
 80039f2:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <__kernel_rem_pio2+0x2f8>)
 80039f4:	f7fc fdd4 	bl	80005a0 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fc16 	bl	8000230 <__aeabi_dsub>
 8003a04:	f7fd f87c 	bl	8000b00 <__aeabi_d2iz>
 8003a08:	9b00      	ldr	r3, [sp, #0]
 8003a0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a0e:	f843 0b04 	str.w	r0, [r3], #4
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a18:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003a1c:	f7fc fc0a 	bl	8000234 <__adddf3>
 8003a20:	4604      	mov	r4, r0
 8003a22:	460d      	mov	r5, r1
 8003a24:	e75f      	b.n	80038e6 <__kernel_rem_pio2+0x10a>
 8003a26:	d105      	bne.n	8003a34 <__kernel_rem_pio2+0x258>
 8003a28:	1e73      	subs	r3, r6, #1
 8003a2a:	aa0c      	add	r2, sp, #48	; 0x30
 8003a2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a30:	15c3      	asrs	r3, r0, #23
 8003a32:	e79b      	b.n	800396c <__kernel_rem_pio2+0x190>
 8003a34:	2200      	movs	r2, #0
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <__kernel_rem_pio2+0x2fc>)
 8003a38:	f7fd f838 	bl	8000aac <__aeabi_dcmpge>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d13e      	bne.n	8003abe <__kernel_rem_pio2+0x2e2>
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2300      	movs	r3, #0
 8003a46:	4640      	mov	r0, r8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	f7fd f811 	bl	8000a70 <__aeabi_dcmpeq>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	f000 80b1 	beq.w	8003bb6 <__kernel_rem_pio2+0x3da>
 8003a54:	1e74      	subs	r4, r6, #1
 8003a56:	4623      	mov	r3, r4
 8003a58:	2200      	movs	r2, #0
 8003a5a:	9902      	ldr	r1, [sp, #8]
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	da5f      	bge.n	8003b20 <__kernel_rem_pio2+0x344>
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d074      	beq.n	8003b4e <__kernel_rem_pio2+0x372>
 8003a64:	ab0c      	add	r3, sp, #48	; 0x30
 8003a66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003a6a:	f1ab 0b18 	sub.w	fp, fp, #24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 809f 	beq.w	8003bb2 <__kernel_rem_pio2+0x3d6>
 8003a74:	465a      	mov	r2, fp
 8003a76:	2000      	movs	r0, #0
 8003a78:	4914      	ldr	r1, [pc, #80]	; (8003acc <__kernel_rem_pio2+0x2f0>)
 8003a7a:	f000 fb2d 	bl	80040d8 <scalbn>
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	4606      	mov	r6, r0
 8003a82:	460f      	mov	r7, r1
 8003a84:	f04f 0800 	mov.w	r8, #0
 8003a88:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a8a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003ad0 <__kernel_rem_pio2+0x2f4>
 8003a8e:	00e5      	lsls	r5, r4, #3
 8003a90:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003a94:	f1ba 0f00 	cmp.w	sl, #0
 8003a98:	f280 80c3 	bge.w	8003c22 <__kernel_rem_pio2+0x446>
 8003a9c:	4626      	mov	r6, r4
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	f2c0 80f5 	blt.w	8003c8e <__kernel_rem_pio2+0x4b2>
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <__kernel_rem_pio2+0x300>)
 8003aa6:	f04f 0a00 	mov.w	sl, #0
 8003aaa:	9307      	str	r3, [sp, #28]
 8003aac:	ab70      	add	r3, sp, #448	; 0x1c0
 8003aae:	f04f 0b00 	mov.w	fp, #0
 8003ab2:	f04f 0800 	mov.w	r8, #0
 8003ab6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003aba:	1ba7      	subs	r7, r4, r6
 8003abc:	e0db      	b.n	8003c76 <__kernel_rem_pio2+0x49a>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	e757      	b.n	8003974 <__kernel_rem_pio2+0x198>
 8003ac4:	08005860 	.word	0x08005860
 8003ac8:	40200000 	.word	0x40200000
 8003acc:	3ff00000 	.word	0x3ff00000
 8003ad0:	3e700000 	.word	0x3e700000
 8003ad4:	41700000 	.word	0x41700000
 8003ad8:	3fe00000 	.word	0x3fe00000
 8003adc:	08005820 	.word	0x08005820
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	b944      	cbnz	r4, 8003af6 <__kernel_rem_pio2+0x31a>
 8003ae4:	b11b      	cbz	r3, 8003aee <__kernel_rem_pio2+0x312>
 8003ae6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	2301      	movs	r3, #1
 8003aee:	461c      	mov	r4, r3
 8003af0:	3201      	adds	r2, #1
 8003af2:	3704      	adds	r7, #4
 8003af4:	e745      	b.n	8003982 <__kernel_rem_pio2+0x1a6>
 8003af6:	1acb      	subs	r3, r1, r3
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4623      	mov	r3, r4
 8003afc:	e7f7      	b.n	8003aee <__kernel_rem_pio2+0x312>
 8003afe:	1e72      	subs	r2, r6, #1
 8003b00:	ab0c      	add	r3, sp, #48	; 0x30
 8003b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003b0a:	a90c      	add	r1, sp, #48	; 0x30
 8003b0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003b10:	e745      	b.n	800399e <__kernel_rem_pio2+0x1c2>
 8003b12:	1e72      	subs	r2, r6, #1
 8003b14:	ab0c      	add	r3, sp, #48	; 0x30
 8003b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003b1e:	e7f4      	b.n	8003b0a <__kernel_rem_pio2+0x32e>
 8003b20:	a90c      	add	r1, sp, #48	; 0x30
 8003b22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	e796      	b.n	8003a5a <__kernel_rem_pio2+0x27e>
 8003b2c:	3401      	adds	r4, #1
 8003b2e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d0fa      	beq.n	8003b2c <__kernel_rem_pio2+0x350>
 8003b36:	9b08      	ldr	r3, [sp, #32]
 8003b38:	f106 0801 	add.w	r8, r6, #1
 8003b3c:	18f5      	adds	r5, r6, r3
 8003b3e:	ab20      	add	r3, sp, #128	; 0x80
 8003b40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003b44:	4434      	add	r4, r6
 8003b46:	4544      	cmp	r4, r8
 8003b48:	da04      	bge.n	8003b54 <__kernel_rem_pio2+0x378>
 8003b4a:	4626      	mov	r6, r4
 8003b4c:	e6bf      	b.n	80038ce <__kernel_rem_pio2+0xf2>
 8003b4e:	2401      	movs	r4, #1
 8003b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b52:	e7ec      	b.n	8003b2e <__kernel_rem_pio2+0x352>
 8003b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b56:	f04f 0900 	mov.w	r9, #0
 8003b5a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003b5e:	f7fc fcb5 	bl	80004cc <__aeabi_i2d>
 8003b62:	2600      	movs	r6, #0
 8003b64:	2700      	movs	r7, #0
 8003b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b68:	e9c5 0100 	strd	r0, r1, [r5]
 8003b6c:	3b08      	subs	r3, #8
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	9504      	str	r5, [sp, #16]
 8003b72:	9b07      	ldr	r3, [sp, #28]
 8003b74:	4599      	cmp	r9, r3
 8003b76:	dd05      	ble.n	8003b84 <__kernel_rem_pio2+0x3a8>
 8003b78:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8003b7c:	f108 0801 	add.w	r8, r8, #1
 8003b80:	3508      	adds	r5, #8
 8003b82:	e7e0      	b.n	8003b46 <__kernel_rem_pio2+0x36a>
 8003b84:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003b88:	9900      	ldr	r1, [sp, #0]
 8003b8a:	f109 0901 	add.w	r9, r9, #1
 8003b8e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003b92:	9100      	str	r1, [sp, #0]
 8003b94:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8003b98:	f8cd c010 	str.w	ip, [sp, #16]
 8003b9c:	f7fc fd00 	bl	80005a0 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	4639      	mov	r1, r7
 8003ba8:	f7fc fb44 	bl	8000234 <__adddf3>
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	e7df      	b.n	8003b72 <__kernel_rem_pio2+0x396>
 8003bb2:	3c01      	subs	r4, #1
 8003bb4:	e756      	b.n	8003a64 <__kernel_rem_pio2+0x288>
 8003bb6:	f1cb 0200 	rsb	r2, fp, #0
 8003bba:	4640      	mov	r0, r8
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	f000 fa8b 	bl	80040d8 <scalbn>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4ba4      	ldr	r3, [pc, #656]	; (8003e58 <__kernel_rem_pio2+0x67c>)
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	f7fc ff6f 	bl	8000aac <__aeabi_dcmpge>
 8003bce:	b1f8      	cbz	r0, 8003c10 <__kernel_rem_pio2+0x434>
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4ba2      	ldr	r3, [pc, #648]	; (8003e5c <__kernel_rem_pio2+0x680>)
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7fc fce2 	bl	80005a0 <__aeabi_dmul>
 8003bdc:	f7fc ff90 	bl	8000b00 <__aeabi_d2iz>
 8003be0:	4607      	mov	r7, r0
 8003be2:	f7fc fc73 	bl	80004cc <__aeabi_i2d>
 8003be6:	2200      	movs	r2, #0
 8003be8:	4b9b      	ldr	r3, [pc, #620]	; (8003e58 <__kernel_rem_pio2+0x67c>)
 8003bea:	f7fc fcd9 	bl	80005a0 <__aeabi_dmul>
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7fc fb1b 	bl	8000230 <__aeabi_dsub>
 8003bfa:	f7fc ff81 	bl	8000b00 <__aeabi_d2iz>
 8003bfe:	1c74      	adds	r4, r6, #1
 8003c00:	ab0c      	add	r3, sp, #48	; 0x30
 8003c02:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003c06:	f10b 0b18 	add.w	fp, fp, #24
 8003c0a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8003c0e:	e731      	b.n	8003a74 <__kernel_rem_pio2+0x298>
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc ff74 	bl	8000b00 <__aeabi_d2iz>
 8003c18:	ab0c      	add	r3, sp, #48	; 0x30
 8003c1a:	4634      	mov	r4, r6
 8003c1c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003c20:	e728      	b.n	8003a74 <__kernel_rem_pio2+0x298>
 8003c22:	ab0c      	add	r3, sp, #48	; 0x30
 8003c24:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003c28:	f7fc fc50 	bl	80004cc <__aeabi_i2d>
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	463b      	mov	r3, r7
 8003c30:	f7fc fcb6 	bl	80005a0 <__aeabi_dmul>
 8003c34:	4642      	mov	r2, r8
 8003c36:	e86b 0102 	strd	r0, r1, [fp], #-8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	4639      	mov	r1, r7
 8003c40:	f7fc fcae 	bl	80005a0 <__aeabi_dmul>
 8003c44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c48:	4606      	mov	r6, r0
 8003c4a:	460f      	mov	r7, r1
 8003c4c:	e722      	b.n	8003a94 <__kernel_rem_pio2+0x2b8>
 8003c4e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003c52:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003c56:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8003c5a:	f8cd c01c 	str.w	ip, [sp, #28]
 8003c5e:	f7fc fc9f 	bl	80005a0 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4650      	mov	r0, sl
 8003c68:	4659      	mov	r1, fp
 8003c6a:	f7fc fae3 	bl	8000234 <__adddf3>
 8003c6e:	4682      	mov	sl, r0
 8003c70:	468b      	mov	fp, r1
 8003c72:	f108 0801 	add.w	r8, r8, #1
 8003c76:	9b02      	ldr	r3, [sp, #8]
 8003c78:	4598      	cmp	r8, r3
 8003c7a:	dc01      	bgt.n	8003c80 <__kernel_rem_pio2+0x4a4>
 8003c7c:	45b8      	cmp	r8, r7
 8003c7e:	dde6      	ble.n	8003c4e <__kernel_rem_pio2+0x472>
 8003c80:	ab48      	add	r3, sp, #288	; 0x120
 8003c82:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003c86:	e9c7 ab00 	strd	sl, fp, [r7]
 8003c8a:	3e01      	subs	r6, #1
 8003c8c:	e707      	b.n	8003a9e <__kernel_rem_pio2+0x2c2>
 8003c8e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	dc09      	bgt.n	8003ca8 <__kernel_rem_pio2+0x4cc>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dc32      	bgt.n	8003cfe <__kernel_rem_pio2+0x522>
 8003c98:	d05a      	beq.n	8003d50 <__kernel_rem_pio2+0x574>
 8003c9a:	9b04      	ldr	r3, [sp, #16]
 8003c9c:	f003 0007 	and.w	r0, r3, #7
 8003ca0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d1f5      	bne.n	8003c9a <__kernel_rem_pio2+0x4be>
 8003cae:	ab48      	add	r3, sp, #288	; 0x120
 8003cb0:	441d      	add	r5, r3
 8003cb2:	46aa      	mov	sl, r5
 8003cb4:	46a3      	mov	fp, r4
 8003cb6:	f1bb 0f00 	cmp.w	fp, #0
 8003cba:	dc76      	bgt.n	8003daa <__kernel_rem_pio2+0x5ce>
 8003cbc:	46aa      	mov	sl, r5
 8003cbe:	46a3      	mov	fp, r4
 8003cc0:	f1bb 0f01 	cmp.w	fp, #1
 8003cc4:	f300 8090 	bgt.w	8003de8 <__kernel_rem_pio2+0x60c>
 8003cc8:	2700      	movs	r7, #0
 8003cca:	463e      	mov	r6, r7
 8003ccc:	2c01      	cmp	r4, #1
 8003cce:	f300 80aa 	bgt.w	8003e26 <__kernel_rem_pio2+0x64a>
 8003cd2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8003cd6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8003cda:	9b00      	ldr	r3, [sp, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 80ac 	bne.w	8003e3a <__kernel_rem_pio2+0x65e>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	9806      	ldr	r0, [sp, #24]
 8003ce8:	e9c0 2300 	strd	r2, r3, [r0]
 8003cec:	4622      	mov	r2, r4
 8003cee:	460b      	mov	r3, r1
 8003cf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003cf4:	463a      	mov	r2, r7
 8003cf6:	4633      	mov	r3, r6
 8003cf8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003cfc:	e7cd      	b.n	8003c9a <__kernel_rem_pio2+0x4be>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	46a0      	mov	r8, r4
 8003d02:	4601      	mov	r1, r0
 8003d04:	ab48      	add	r3, sp, #288	; 0x120
 8003d06:	441d      	add	r5, r3
 8003d08:	f1b8 0f00 	cmp.w	r8, #0
 8003d0c:	da3a      	bge.n	8003d84 <__kernel_rem_pio2+0x5a8>
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03e      	beq.n	8003d92 <__kernel_rem_pio2+0x5b6>
 8003d14:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8003d18:	4602      	mov	r2, r0
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	9d06      	ldr	r5, [sp, #24]
 8003d1e:	2601      	movs	r6, #1
 8003d20:	e9c5 2300 	strd	r2, r3, [r5]
 8003d24:	460b      	mov	r3, r1
 8003d26:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003d2a:	f7fc fa81 	bl	8000230 <__aeabi_dsub>
 8003d2e:	4684      	mov	ip, r0
 8003d30:	460f      	mov	r7, r1
 8003d32:	ad48      	add	r5, sp, #288	; 0x120
 8003d34:	42b4      	cmp	r4, r6
 8003d36:	f105 0508 	add.w	r5, r5, #8
 8003d3a:	da2c      	bge.n	8003d96 <__kernel_rem_pio2+0x5ba>
 8003d3c:	9b00      	ldr	r3, [sp, #0]
 8003d3e:	b10b      	cbz	r3, 8003d44 <__kernel_rem_pio2+0x568>
 8003d40:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003d44:	4662      	mov	r2, ip
 8003d46:	463b      	mov	r3, r7
 8003d48:	9906      	ldr	r1, [sp, #24]
 8003d4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003d4e:	e7a4      	b.n	8003c9a <__kernel_rem_pio2+0x4be>
 8003d50:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003d52:	ab48      	add	r3, sp, #288	; 0x120
 8003d54:	4637      	mov	r7, r6
 8003d56:	441d      	add	r5, r3
 8003d58:	2c00      	cmp	r4, #0
 8003d5a:	da09      	bge.n	8003d70 <__kernel_rem_pio2+0x594>
 8003d5c:	9b00      	ldr	r3, [sp, #0]
 8003d5e:	b10b      	cbz	r3, 8003d64 <__kernel_rem_pio2+0x588>
 8003d60:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	9906      	ldr	r1, [sp, #24]
 8003d6a:	e9c1 2300 	strd	r2, r3, [r1]
 8003d6e:	e794      	b.n	8003c9a <__kernel_rem_pio2+0x4be>
 8003d70:	4630      	mov	r0, r6
 8003d72:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003d76:	4639      	mov	r1, r7
 8003d78:	f7fc fa5c 	bl	8000234 <__adddf3>
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	4606      	mov	r6, r0
 8003d80:	460f      	mov	r7, r1
 8003d82:	e7e9      	b.n	8003d58 <__kernel_rem_pio2+0x57c>
 8003d84:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003d88:	f7fc fa54 	bl	8000234 <__adddf3>
 8003d8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d90:	e7ba      	b.n	8003d08 <__kernel_rem_pio2+0x52c>
 8003d92:	460d      	mov	r5, r1
 8003d94:	e7c0      	b.n	8003d18 <__kernel_rem_pio2+0x53c>
 8003d96:	4660      	mov	r0, ip
 8003d98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	f7fc fa49 	bl	8000234 <__adddf3>
 8003da2:	3601      	adds	r6, #1
 8003da4:	4684      	mov	ip, r0
 8003da6:	460f      	mov	r7, r1
 8003da8:	e7c4      	b.n	8003d34 <__kernel_rem_pio2+0x558>
 8003daa:	e9da 6700 	ldrd	r6, r7, [sl]
 8003dae:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003db2:	4632      	mov	r2, r6
 8003db4:	463b      	mov	r3, r7
 8003db6:	4640      	mov	r0, r8
 8003db8:	4649      	mov	r1, r9
 8003dba:	f7fc fa3b 	bl	8000234 <__adddf3>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	4649      	mov	r1, r9
 8003dca:	f7fc fa31 	bl	8000230 <__aeabi_dsub>
 8003dce:	4632      	mov	r2, r6
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	f7fc fa2f 	bl	8000234 <__adddf3>
 8003dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dda:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003dde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003de2:	e9ca 2300 	strd	r2, r3, [sl]
 8003de6:	e766      	b.n	8003cb6 <__kernel_rem_pio2+0x4da>
 8003de8:	e9da 8900 	ldrd	r8, r9, [sl]
 8003dec:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	4630      	mov	r0, r6
 8003df6:	4639      	mov	r1, r7
 8003df8:	f7fc fa1c 	bl	8000234 <__adddf3>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e04:	4630      	mov	r0, r6
 8003e06:	4639      	mov	r1, r7
 8003e08:	f7fc fa12 	bl	8000230 <__aeabi_dsub>
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	f7fc fa10 	bl	8000234 <__adddf3>
 8003e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e18:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e20:	e9ca 2300 	strd	r2, r3, [sl]
 8003e24:	e74c      	b.n	8003cc0 <__kernel_rem_pio2+0x4e4>
 8003e26:	4638      	mov	r0, r7
 8003e28:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	f7fc fa01 	bl	8000234 <__adddf3>
 8003e32:	3c01      	subs	r4, #1
 8003e34:	4607      	mov	r7, r0
 8003e36:	460e      	mov	r6, r1
 8003e38:	e748      	b.n	8003ccc <__kernel_rem_pio2+0x4f0>
 8003e3a:	9b06      	ldr	r3, [sp, #24]
 8003e3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003e40:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003e44:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003e48:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8003e4c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8003e50:	601d      	str	r5, [r3, #0]
 8003e52:	615e      	str	r6, [r3, #20]
 8003e54:	e721      	b.n	8003c9a <__kernel_rem_pio2+0x4be>
 8003e56:	bf00      	nop
 8003e58:	41700000 	.word	0x41700000
 8003e5c:	3e700000 	.word	0x3e700000

08003e60 <__kernel_sin>:
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	e9cd 2300 	strd	r2, r3, [sp]
 8003e6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003e72:	4682      	mov	sl, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003e78:	da03      	bge.n	8003e82 <__kernel_sin+0x22>
 8003e7a:	f7fc fe41 	bl	8000b00 <__aeabi_d2iz>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d050      	beq.n	8003f24 <__kernel_sin+0xc4>
 8003e82:	4652      	mov	r2, sl
 8003e84:	4623      	mov	r3, r4
 8003e86:	4650      	mov	r0, sl
 8003e88:	4621      	mov	r1, r4
 8003e8a:	f7fc fb89 	bl	80005a0 <__aeabi_dmul>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	460f      	mov	r7, r1
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4650      	mov	r0, sl
 8003e98:	4621      	mov	r1, r4
 8003e9a:	f7fc fb81 	bl	80005a0 <__aeabi_dmul>
 8003e9e:	a33e      	add	r3, pc, #248	; (adr r3, 8003f98 <__kernel_sin+0x138>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	4680      	mov	r8, r0
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	4639      	mov	r1, r7
 8003eac:	f7fc fb78 	bl	80005a0 <__aeabi_dmul>
 8003eb0:	a33b      	add	r3, pc, #236	; (adr r3, 8003fa0 <__kernel_sin+0x140>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f9bb 	bl	8000230 <__aeabi_dsub>
 8003eba:	4632      	mov	r2, r6
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	f7fc fb6f 	bl	80005a0 <__aeabi_dmul>
 8003ec2:	a339      	add	r3, pc, #228	; (adr r3, 8003fa8 <__kernel_sin+0x148>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc f9b4 	bl	8000234 <__adddf3>
 8003ecc:	4632      	mov	r2, r6
 8003ece:	463b      	mov	r3, r7
 8003ed0:	f7fc fb66 	bl	80005a0 <__aeabi_dmul>
 8003ed4:	a336      	add	r3, pc, #216	; (adr r3, 8003fb0 <__kernel_sin+0x150>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f7fc f9a9 	bl	8000230 <__aeabi_dsub>
 8003ede:	4632      	mov	r2, r6
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	f7fc fb5d 	bl	80005a0 <__aeabi_dmul>
 8003ee6:	a334      	add	r3, pc, #208	; (adr r3, 8003fb8 <__kernel_sin+0x158>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc f9a2 	bl	8000234 <__adddf3>
 8003ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef4:	b9dd      	cbnz	r5, 8003f2e <__kernel_sin+0xce>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc fb4f 	bl	80005a0 <__aeabi_dmul>
 8003f02:	a32f      	add	r3, pc, #188	; (adr r3, 8003fc0 <__kernel_sin+0x160>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc f992 	bl	8000230 <__aeabi_dsub>
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	f7fc fb46 	bl	80005a0 <__aeabi_dmul>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4650      	mov	r0, sl
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	f7fc f98a 	bl	8000234 <__adddf3>
 8003f20:	4682      	mov	sl, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	4650      	mov	r0, sl
 8003f26:	4621      	mov	r1, r4
 8003f28:	b006      	add	sp, #24
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	2200      	movs	r2, #0
 8003f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <__kernel_sin+0x168>)
 8003f36:	f7fc fb33 	bl	80005a0 <__aeabi_dmul>
 8003f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc fb2b 	bl	80005a0 <__aeabi_dmul>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f52:	f7fc f96d 	bl	8000230 <__aeabi_dsub>
 8003f56:	4632      	mov	r2, r6
 8003f58:	463b      	mov	r3, r7
 8003f5a:	f7fc fb21 	bl	80005a0 <__aeabi_dmul>
 8003f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f62:	f7fc f965 	bl	8000230 <__aeabi_dsub>
 8003f66:	a316      	add	r3, pc, #88	; (adr r3, 8003fc0 <__kernel_sin+0x160>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fb14 	bl	80005a0 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f7fc f958 	bl	8000234 <__adddf3>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4650      	mov	r0, sl
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	f7fc f950 	bl	8000230 <__aeabi_dsub>
 8003f90:	e7c6      	b.n	8003f20 <__kernel_sin+0xc0>
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
 8003f98:	5acfd57c 	.word	0x5acfd57c
 8003f9c:	3de5d93a 	.word	0x3de5d93a
 8003fa0:	8a2b9ceb 	.word	0x8a2b9ceb
 8003fa4:	3e5ae5e6 	.word	0x3e5ae5e6
 8003fa8:	57b1fe7d 	.word	0x57b1fe7d
 8003fac:	3ec71de3 	.word	0x3ec71de3
 8003fb0:	19c161d5 	.word	0x19c161d5
 8003fb4:	3f2a01a0 	.word	0x3f2a01a0
 8003fb8:	1110f8a6 	.word	0x1110f8a6
 8003fbc:	3f811111 	.word	0x3f811111
 8003fc0:	55555549 	.word	0x55555549
 8003fc4:	3fc55555 	.word	0x3fc55555
 8003fc8:	3fe00000 	.word	0x3fe00000

08003fcc <fabs>:
 8003fcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003fd0:	4770      	bx	lr
 8003fd2:	0000      	movs	r0, r0
 8003fd4:	0000      	movs	r0, r0
	...

08003fd8 <floor>:
 8003fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fdc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003fe0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003fe4:	2e13      	cmp	r6, #19
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4607      	mov	r7, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	4605      	mov	r5, r0
 8003ff0:	dc33      	bgt.n	800405a <floor+0x82>
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	da14      	bge.n	8004020 <floor+0x48>
 8003ff6:	a334      	add	r3, pc, #208	; (adr r3, 80040c8 <floor+0xf0>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f91a 	bl	8000234 <__adddf3>
 8004000:	2200      	movs	r2, #0
 8004002:	2300      	movs	r3, #0
 8004004:	f7fc fd5c 	bl	8000ac0 <__aeabi_dcmpgt>
 8004008:	b138      	cbz	r0, 800401a <floor+0x42>
 800400a:	2c00      	cmp	r4, #0
 800400c:	da58      	bge.n	80040c0 <floor+0xe8>
 800400e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004012:	431d      	orrs	r5, r3
 8004014:	d001      	beq.n	800401a <floor+0x42>
 8004016:	2500      	movs	r5, #0
 8004018:	4c2d      	ldr	r4, [pc, #180]	; (80040d0 <floor+0xf8>)
 800401a:	4623      	mov	r3, r4
 800401c:	462f      	mov	r7, r5
 800401e:	e025      	b.n	800406c <floor+0x94>
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <floor+0xfc>)
 8004022:	fa42 f806 	asr.w	r8, r2, r6
 8004026:	ea01 0208 	and.w	r2, r1, r8
 800402a:	4302      	orrs	r2, r0
 800402c:	d01e      	beq.n	800406c <floor+0x94>
 800402e:	a326      	add	r3, pc, #152	; (adr r3, 80040c8 <floor+0xf0>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc f8fe 	bl	8000234 <__adddf3>
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	f7fc fd40 	bl	8000ac0 <__aeabi_dcmpgt>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0ea      	beq.n	800401a <floor+0x42>
 8004044:	2c00      	cmp	r4, #0
 8004046:	bfbe      	ittt	lt
 8004048:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800404c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004050:	19a4      	addlt	r4, r4, r6
 8004052:	2500      	movs	r5, #0
 8004054:	ea24 0408 	bic.w	r4, r4, r8
 8004058:	e7df      	b.n	800401a <floor+0x42>
 800405a:	2e33      	cmp	r6, #51	; 0x33
 800405c:	dd0a      	ble.n	8004074 <floor+0x9c>
 800405e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004062:	d103      	bne.n	800406c <floor+0x94>
 8004064:	f7fc f8e6 	bl	8000234 <__adddf3>
 8004068:	4607      	mov	r7, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4638      	mov	r0, r7
 800406e:	4619      	mov	r1, r3
 8004070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800407c:	fa22 f808 	lsr.w	r8, r2, r8
 8004080:	ea18 0f00 	tst.w	r8, r0
 8004084:	d0f2      	beq.n	800406c <floor+0x94>
 8004086:	a310      	add	r3, pc, #64	; (adr r3, 80040c8 <floor+0xf0>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f7fc f8d2 	bl	8000234 <__adddf3>
 8004090:	2200      	movs	r2, #0
 8004092:	2300      	movs	r3, #0
 8004094:	f7fc fd14 	bl	8000ac0 <__aeabi_dcmpgt>
 8004098:	2800      	cmp	r0, #0
 800409a:	d0be      	beq.n	800401a <floor+0x42>
 800409c:	2c00      	cmp	r4, #0
 800409e:	da02      	bge.n	80040a6 <floor+0xce>
 80040a0:	2e14      	cmp	r6, #20
 80040a2:	d103      	bne.n	80040ac <floor+0xd4>
 80040a4:	3401      	adds	r4, #1
 80040a6:	ea25 0508 	bic.w	r5, r5, r8
 80040aa:	e7b6      	b.n	800401a <floor+0x42>
 80040ac:	2301      	movs	r3, #1
 80040ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80040b2:	fa03 f606 	lsl.w	r6, r3, r6
 80040b6:	4435      	add	r5, r6
 80040b8:	42bd      	cmp	r5, r7
 80040ba:	bf38      	it	cc
 80040bc:	18e4      	addcc	r4, r4, r3
 80040be:	e7f2      	b.n	80040a6 <floor+0xce>
 80040c0:	2500      	movs	r5, #0
 80040c2:	462c      	mov	r4, r5
 80040c4:	e7a9      	b.n	800401a <floor+0x42>
 80040c6:	bf00      	nop
 80040c8:	8800759c 	.word	0x8800759c
 80040cc:	7e37e43c 	.word	0x7e37e43c
 80040d0:	bff00000 	.word	0xbff00000
 80040d4:	000fffff 	.word	0x000fffff

080040d8 <scalbn>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80040de:	4604      	mov	r4, r0
 80040e0:	460d      	mov	r5, r1
 80040e2:	4617      	mov	r7, r2
 80040e4:	460b      	mov	r3, r1
 80040e6:	b996      	cbnz	r6, 800410e <scalbn+0x36>
 80040e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040ec:	4303      	orrs	r3, r0
 80040ee:	d039      	beq.n	8004164 <scalbn+0x8c>
 80040f0:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <scalbn+0xe8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	f7fc fa54 	bl	80005a0 <__aeabi_dmul>
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <scalbn+0xec>)
 80040fa:	4604      	mov	r4, r0
 80040fc:	429f      	cmp	r7, r3
 80040fe:	460d      	mov	r5, r1
 8004100:	da0f      	bge.n	8004122 <scalbn+0x4a>
 8004102:	a32b      	add	r3, pc, #172	; (adr r3, 80041b0 <scalbn+0xd8>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc fa4a 	bl	80005a0 <__aeabi_dmul>
 800410c:	e006      	b.n	800411c <scalbn+0x44>
 800410e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004112:	4296      	cmp	r6, r2
 8004114:	d10a      	bne.n	800412c <scalbn+0x54>
 8004116:	4602      	mov	r2, r0
 8004118:	f7fc f88c 	bl	8000234 <__adddf3>
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	e020      	b.n	8004164 <scalbn+0x8c>
 8004122:	460b      	mov	r3, r1
 8004124:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004128:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800412c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004130:	19b9      	adds	r1, r7, r6
 8004132:	4291      	cmp	r1, r2
 8004134:	dd0e      	ble.n	8004154 <scalbn+0x7c>
 8004136:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800413a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800413e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004142:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004146:	4820      	ldr	r0, [pc, #128]	; (80041c8 <scalbn+0xf0>)
 8004148:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800414c:	a31a      	add	r3, pc, #104	; (adr r3, 80041b8 <scalbn+0xe0>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	e7d9      	b.n	8004108 <scalbn+0x30>
 8004154:	2900      	cmp	r1, #0
 8004156:	dd08      	ble.n	800416a <scalbn+0x92>
 8004158:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800415c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004160:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800416e:	da12      	bge.n	8004196 <scalbn+0xbe>
 8004170:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004174:	429f      	cmp	r7, r3
 8004176:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800417a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800417e:	dcdc      	bgt.n	800413a <scalbn+0x62>
 8004180:	a30b      	add	r3, pc, #44	; (adr r3, 80041b0 <scalbn+0xd8>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800418a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800418e:	480f      	ldr	r0, [pc, #60]	; (80041cc <scalbn+0xf4>)
 8004190:	f041 011f 	orr.w	r1, r1, #31
 8004194:	e7b8      	b.n	8004108 <scalbn+0x30>
 8004196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800419a:	3136      	adds	r1, #54	; 0x36
 800419c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	2200      	movs	r2, #0
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <scalbn+0xf8>)
 80041ac:	e7ac      	b.n	8004108 <scalbn+0x30>
 80041ae:	bf00      	nop
 80041b0:	c2f8f359 	.word	0xc2f8f359
 80041b4:	01a56e1f 	.word	0x01a56e1f
 80041b8:	8800759c 	.word	0x8800759c
 80041bc:	7e37e43c 	.word	0x7e37e43c
 80041c0:	43500000 	.word	0x43500000
 80041c4:	ffff3cb0 	.word	0xffff3cb0
 80041c8:	8800759c 	.word	0x8800759c
 80041cc:	c2f8f359 	.word	0xc2f8f359
 80041d0:	3c900000 	.word	0x3c900000

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
