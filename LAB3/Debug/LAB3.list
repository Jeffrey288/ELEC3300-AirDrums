
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006694  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc4  08006fc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006fc4  08006fc4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fc4  08006fc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  20000074  08007040  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  08007040  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001749c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf1  00000000  00000000  00037539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001e2b0  00000000  00000000  0003c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018753  00000000  00000000  0005aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a94d8  00000000  00000000  000731eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0011c6c3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013e0  00000000  00000000  0011c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dcc  00000000  00000000  0011daf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	0800686c 	.word	0x0800686c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	0800686c 	.word	0x0800686c

08000230 <audio_task>:

void audio_tft() {
	tft_prints(0, 1, "sample: %d", i);
}

void audio_task() {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0

	// Starting TIM2
	//  TIM2->ARR = 72000000 / 44100 - 1;
	//  TIM2->ARR = 72000000 / 22050 - 1;
	TIM2->ARR = 72000000 / 22050 - 1;
 8000236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023a:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(&htim2);
 8000240:	482a      	ldr	r0, [pc, #168]	; (80002ec <audio_task+0xbc>)
 8000242:	f003 f967 	bl	8003514 <HAL_TIM_Base_Start>

	int last_tick = HAL_GetTick();
 8000246:	f000 ffeb 	bl	8001220 <HAL_GetTick>
 800024a:	4603      	mov	r3, r0
 800024c:	607b      	str	r3, [r7, #4]

	while (1) {

		if (HAL_GetTick() - last_tick > 200) {
 800024e:	f000 ffe7 	bl	8001220 <HAL_GetTick>
 8000252:	4602      	mov	r2, r0
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	2bc8      	cmp	r3, #200	; 0xc8
 800025a:	d907      	bls.n	800026c <audio_task+0x3c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800025c:	2101      	movs	r1, #1
 800025e:	4824      	ldr	r0, [pc, #144]	; (80002f0 <audio_task+0xc0>)
 8000260:	f001 fb30 	bl	80018c4 <HAL_GPIO_TogglePin>
			last_tick = HAL_GetTick();
 8000264:	f000 ffdc 	bl	8001220 <HAL_GetTick>
 8000268:	4603      	mov	r3, r0
 800026a:	607b      	str	r3, [r7, #4]
		}

//		sample_sum = rina[i];
		sample_sum = 0;
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <audio_task+0xc4>)
 800026e:	2200      	movs	r2, #0
 8000270:	801a      	strh	r2, [r3, #0]
		minmax(sample_sum, -32768, 32767);
		sample_sum += 32768;
 8000272:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <audio_task+0xc4>)
 8000274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000278:	b29b      	uxth	r3, r3
 800027a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800027e:	b29b      	uxth	r3, r3
 8000280:	b21a      	sxth	r2, r3
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <audio_task+0xc4>)
 8000284:	801a      	strh	r2, [r3, #0]
		dac_out = sample_sum;
 8000286:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <audio_task+0xc4>)
 8000288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <audio_task+0xc8>)
 8000290:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (dac_out) >> 4);
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <audio_task+0xc8>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	091b      	lsrs	r3, r3, #4
 8000298:	b29b      	uxth	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	4817      	ldr	r0, [pc, #92]	; (80002fc <audio_task+0xcc>)
 80002a0:	f001 f8f1 	bl	8001486 <HAL_DAC_SetValue>
		i = (i + 1) % MUSIC_LENGTH;
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <audio_task+0xd0>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <audio_task+0xd4>)
 80002ac:	fb83 1302 	smull	r1, r3, r3, r2
 80002b0:	1419      	asrs	r1, r3, #16
 80002b2:	17d3      	asrs	r3, r2, #31
 80002b4:	1acb      	subs	r3, r1, r3
 80002b6:	4914      	ldr	r1, [pc, #80]	; (8000308 <audio_task+0xd8>)
 80002b8:	fb01 f303 	mul.w	r3, r1, r3
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	4a10      	ldr	r2, [pc, #64]	; (8000300 <audio_task+0xd0>)
 80002c0:	6013      	str	r3, [r2, #0]

		while (testbit(TIM2->SR, 0) == 0) {
 80002c2:	e002      	b.n	80002ca <audio_task+0x9a>
			vTaskDelay(1); /* wait for timer reset */
 80002c4:	2001      	movs	r0, #1
 80002c6:	f004 fea1 	bl	800500c <vTaskDelay>
		while (testbit(TIM2->SR, 0) == 0) {
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f5      	beq.n	80002c4 <audio_task+0x94>
		}
		bit_clr(TIM2->SR, 0);
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6113      	str	r3, [r2, #16]
		if (HAL_GetTick() - last_tick > 200) {
 80002e8:	e7b1      	b.n	800024e <audio_task+0x1e>
 80002ea:	bf00      	nop
 80002ec:	200003e4 	.word	0x200003e4
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000092 	.word	0x20000092
 80002fc:	2000034c 	.word	0x2000034c
 8000300:	20000094 	.word	0x20000094
 8000304:	5aa802bf 	.word	0x5aa802bf
 8000308:	0002d2e8 	.word	0x0002d2e8

0800030c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4a06      	ldr	r2, [pc, #24]	; (8000334 <vApplicationGetIdleTaskMemory+0x28>)
 800031c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <vApplicationGetIdleTaskMemory+0x2c>)
 8000322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000098 	.word	0x20000098
 8000338:	2000014c 	.word	0x2000014c

0800033c <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	e002      	b.n	800034c <Delay+0x10>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3b01      	subs	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f9      	bne.n	8000346 <Delay+0xa>
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <LCD_INIT>:

void LCD_INIT ( void )
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b082      	sub	sp, #8
 8000362:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000364:	2001      	movs	r0, #1
 8000366:	f000 f829 	bl	80003bc <LCD_BackLed_Control>
	LCD_Rst();
 800036a:	f000 f80f 	bl	800038c <LCD_Rst>
	LCD_REG_Config();
 800036e:	f000 f85f 	bl	8000430 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800037c:	22f0      	movs	r2, #240	; 0xf0
 800037e:	2100      	movs	r1, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f000 f9e6 	bl	8000752 <LCD_Clear>
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <LCD_Rst>:



void LCD_Rst ( void )
{			
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2102      	movs	r1, #2
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <LCD_Rst+0x28>)
 8000396:	f001 fa7d 	bl	8001894 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <LCD_Rst+0x2c>)
 800039c:	f7ff ffce 	bl	800033c <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2102      	movs	r1, #2
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <LCD_Rst+0x28>)
 80003a6:	f001 fa75 	bl	8001894 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <LCD_Rst+0x2c>)
 80003ac:	f7ff ffc6 	bl	800033c <Delay>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40011800 	.word	0x40011800
 80003b8:	0002bffc 	.word	0x0002bffc

080003bc <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d006      	beq.n	80003da <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	4807      	ldr	r0, [pc, #28]	; (80003f0 <LCD_BackLed_Control+0x34>)
 80003d4:	f001 fa5e 	bl	8001894 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80003d8:	e005      	b.n	80003e6 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e0:	4803      	ldr	r0, [pc, #12]	; (80003f0 <LCD_BackLed_Control+0x34>)
 80003e2:	f001 fa57 	bl	8001894 <HAL_GPIO_WritePin>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40011400 	.word	0x40011400

080003f4 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003fe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000402:	88fb      	ldrh	r3, [r7, #6]
 8000404:	8013      	strh	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <LCD_Write_Data+0x1c>)
 800041c:	88fb      	ldrh	r3, [r7, #6]
 800041e:	8013      	strh	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	60020000 	.word	0x60020000

08000430 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000434:	20cf      	movs	r0, #207	; 0xcf
 8000436:	f7ff ffdd 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff ffe8 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000440:	2081      	movs	r0, #129	; 0x81
 8000442:	f7ff ffe5 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000446:	2030      	movs	r0, #48	; 0x30
 8000448:	f7ff ffe2 	bl	8000410 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800044c:	20ed      	movs	r0, #237	; 0xed
 800044e:	f7ff ffd1 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f7ff ffdc 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000458:	2003      	movs	r0, #3
 800045a:	f7ff ffd9 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800045e:	2012      	movs	r0, #18
 8000460:	f7ff ffd6 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000464:	2081      	movs	r0, #129	; 0x81
 8000466:	f7ff ffd3 	bl	8000410 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800046a:	20e8      	movs	r0, #232	; 0xe8
 800046c:	f7ff ffc2 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000470:	2085      	movs	r0, #133	; 0x85
 8000472:	f7ff ffcd 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000476:	2010      	movs	r0, #16
 8000478:	f7ff ffca 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800047c:	2078      	movs	r0, #120	; 0x78
 800047e:	f7ff ffc7 	bl	8000410 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000482:	20cb      	movs	r0, #203	; 0xcb
 8000484:	f7ff ffb6 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000488:	2039      	movs	r0, #57	; 0x39
 800048a:	f7ff ffc1 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800048e:	202c      	movs	r0, #44	; 0x2c
 8000490:	f7ff ffbe 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ffbb 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800049a:	2034      	movs	r0, #52	; 0x34
 800049c:	f7ff ffb8 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80004a0:	2002      	movs	r0, #2
 80004a2:	f7ff ffb5 	bl	8000410 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80004a6:	20f7      	movs	r0, #247	; 0xf7
 80004a8:	f7ff ffa4 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80004ac:	2020      	movs	r0, #32
 80004ae:	f7ff ffaf 	bl	8000410 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80004b2:	20ea      	movs	r0, #234	; 0xea
 80004b4:	f7ff ff9e 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ffa9 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ffa6 	bl	8000410 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80004c4:	20b1      	movs	r0, #177	; 0xb1
 80004c6:	f7ff ff95 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffa0 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80004d0:	201b      	movs	r0, #27
 80004d2:	f7ff ff9d 	bl	8000410 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80004d6:	20b6      	movs	r0, #182	; 0xb6
 80004d8:	f7ff ff8c 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80004dc:	200a      	movs	r0, #10
 80004de:	f7ff ff97 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80004e2:	20a2      	movs	r0, #162	; 0xa2
 80004e4:	f7ff ff94 	bl	8000410 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80004e8:	20c0      	movs	r0, #192	; 0xc0
 80004ea:	f7ff ff83 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80004ee:	2035      	movs	r0, #53	; 0x35
 80004f0:	f7ff ff8e 	bl	8000410 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80004f4:	20c1      	movs	r0, #193	; 0xc1
 80004f6:	f7ff ff7d 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80004fa:	2011      	movs	r0, #17
 80004fc:	f7ff ff88 	bl	8000410 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000500:	20c5      	movs	r0, #197	; 0xc5
 8000502:	f7ff ff77 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000506:	2045      	movs	r0, #69	; 0x45
 8000508:	f7ff ff82 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800050c:	2045      	movs	r0, #69	; 0x45
 800050e:	f7ff ff7f 	bl	8000410 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000512:	20c7      	movs	r0, #199	; 0xc7
 8000514:	f7ff ff6e 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000518:	20a2      	movs	r0, #162	; 0xa2
 800051a:	f7ff ff79 	bl	8000410 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800051e:	20f2      	movs	r0, #242	; 0xf2
 8000520:	f7ff ff68 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff73 	bl	8000410 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800052a:	2026      	movs	r0, #38	; 0x26
 800052c:	f7ff ff62 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ff6d 	bl	8000410 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000536:	20e0      	movs	r0, #224	; 0xe0
 8000538:	f7ff ff5c 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800053c:	200f      	movs	r0, #15
 800053e:	f7ff ff67 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000542:	2026      	movs	r0, #38	; 0x26
 8000544:	f7ff ff64 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000548:	2024      	movs	r0, #36	; 0x24
 800054a:	f7ff ff61 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800054e:	200b      	movs	r0, #11
 8000550:	f7ff ff5e 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000554:	200e      	movs	r0, #14
 8000556:	f7ff ff5b 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800055a:	2009      	movs	r0, #9
 800055c:	f7ff ff58 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000560:	2054      	movs	r0, #84	; 0x54
 8000562:	f7ff ff55 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000566:	20a8      	movs	r0, #168	; 0xa8
 8000568:	f7ff ff52 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 800056c:	2046      	movs	r0, #70	; 0x46
 800056e:	f7ff ff4f 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000572:	200c      	movs	r0, #12
 8000574:	f7ff ff4c 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000578:	2017      	movs	r0, #23
 800057a:	f7ff ff49 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800057e:	2009      	movs	r0, #9
 8000580:	f7ff ff46 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000584:	200f      	movs	r0, #15
 8000586:	f7ff ff43 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800058a:	2007      	movs	r0, #7
 800058c:	f7ff ff40 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ff3d 	bl	8000410 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000596:	20e1      	movs	r0, #225	; 0xe1
 8000598:	f7ff ff2c 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff ff37 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80005a2:	2019      	movs	r0, #25
 80005a4:	f7ff ff34 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80005a8:	201b      	movs	r0, #27
 80005aa:	f7ff ff31 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80005ae:	2004      	movs	r0, #4
 80005b0:	f7ff ff2e 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80005b4:	2010      	movs	r0, #16
 80005b6:	f7ff ff2b 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80005ba:	2007      	movs	r0, #7
 80005bc:	f7ff ff28 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80005c0:	202a      	movs	r0, #42	; 0x2a
 80005c2:	f7ff ff25 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80005c6:	2047      	movs	r0, #71	; 0x47
 80005c8:	f7ff ff22 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80005cc:	2039      	movs	r0, #57	; 0x39
 80005ce:	f7ff ff1f 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80005d2:	2003      	movs	r0, #3
 80005d4:	f7ff ff1c 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005d8:	2006      	movs	r0, #6
 80005da:	f7ff ff19 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80005de:	2006      	movs	r0, #6
 80005e0:	f7ff ff16 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80005e4:	2030      	movs	r0, #48	; 0x30
 80005e6:	f7ff ff13 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80005ea:	2038      	movs	r0, #56	; 0x38
 80005ec:	f7ff ff10 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80005f0:	200f      	movs	r0, #15
 80005f2:	f7ff ff0d 	bl	8000410 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80005f6:	2036      	movs	r0, #54	; 0x36
 80005f8:	f7ff fefc 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f7ff ff07 	bl	8000410 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000602:	202a      	movs	r0, #42	; 0x2a
 8000604:	f7ff fef6 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff01 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff fefe 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fefb 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800061a:	20ef      	movs	r0, #239	; 0xef
 800061c:	f7ff fef8 	bl	8000410 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000620:	202b      	movs	r0, #43	; 0x2b
 8000622:	f7ff fee7 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fef2 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff feef 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff feec 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000638:	203f      	movs	r0, #63	; 0x3f
 800063a:	f7ff fee9 	bl	8000410 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800063e:	203a      	movs	r0, #58	; 0x3a
 8000640:	f7ff fed8 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000644:	2055      	movs	r0, #85	; 0x55
 8000646:	f7ff fee3 	bl	8000410 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800064a:	2011      	movs	r0, #17
 800064c:	f7ff fed2 	bl	80003f4 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <LCD_REG_Config+0x230>)
 8000652:	f7ff fe73 	bl	800033c <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000656:	2029      	movs	r0, #41	; 0x29
 8000658:	f7ff fecc 	bl	80003f4 <LCD_Write_Cmd>
	
	
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0002bffc 	.word	0x0002bffc

08000664 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4604      	mov	r4, r0
 800066c:	4608      	mov	r0, r1
 800066e:	4611      	mov	r1, r2
 8000670:	461a      	mov	r2, r3
 8000672:	4623      	mov	r3, r4
 8000674:	80fb      	strh	r3, [r7, #6]
 8000676:	4603      	mov	r3, r0
 8000678:	80bb      	strh	r3, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	807b      	strh	r3, [r7, #2]
 800067e:	4613      	mov	r3, r2
 8000680:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000682:	202a      	movs	r0, #42	; 0x2a
 8000684:	f7ff feb6 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff febe 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	b29b      	uxth	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff feb8 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	4413      	add	r3, r2
 80006a6:	3b01      	subs	r3, #1
 80006a8:	121b      	asrs	r3, r3, #8
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff feaf 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80006b2:	88fa      	ldrh	r2, [r7, #6]
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	4413      	add	r3, r2
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fea4 	bl	8000410 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80006c8:	202b      	movs	r0, #43	; 0x2b
 80006ca:	f7ff fe93 	bl	80003f4 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fe9b 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe95 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80006e6:	88ba      	ldrh	r2, [r7, #4]
 80006e8:	883b      	ldrh	r3, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	3b01      	subs	r3, #1
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe8c 	bl	8000410 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80006f8:	88ba      	ldrh	r2, [r7, #4]
 80006fa:	883b      	ldrh	r3, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b29b      	uxth	r3, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	b29b      	uxth	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe81 	bl	8000410 <LCD_Write_Data>
	
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}

08000716 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000726:	202c      	movs	r0, #44	; 0x2c
 8000728:	f7ff fe64 	bl	80003f4 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e006      	b.n	8000740 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe6b 	bl	8000410 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3f4      	bcc.n	8000732 <LCD_FillColor+0x1c>
		
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000752:	b590      	push	{r4, r7, lr}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	4604      	mov	r4, r0
 800075a:	4608      	mov	r0, r1
 800075c:	4611      	mov	r1, r2
 800075e:	461a      	mov	r2, r3
 8000760:	4623      	mov	r3, r4
 8000762:	80fb      	strh	r3, [r7, #6]
 8000764:	4603      	mov	r3, r0
 8000766:	80bb      	strh	r3, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	887a      	ldrh	r2, [r7, #2]
 8000774:	88b9      	ldrh	r1, [r7, #4]
 8000776:	88f8      	ldrh	r0, [r7, #6]
 8000778:	f7ff ff74 	bl	8000664 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	883a      	ldrh	r2, [r7, #0]
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	461a      	mov	r2, r3
 8000786:	8b3b      	ldrh	r3, [r7, #24]
 8000788:	4619      	mov	r1, r3
 800078a:	4610      	mov	r0, r2
 800078c:	f7ff ffc3 	bl	8000716 <LCD_FillColor>
	
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
 80007a2:	460b      	mov	r3, r1
 80007a4:	80bb      	strh	r3, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	3b20      	subs	r3, #32
 80007ae:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80007b0:	88b9      	ldrh	r1, [r7, #4]
 80007b2:	88f8      	ldrh	r0, [r7, #6]
 80007b4:	2310      	movs	r3, #16
 80007b6:	2208      	movs	r2, #8
 80007b8:	f7ff ff54 	bl	8000664 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80007bc:	202c      	movs	r0, #44	; 0x2c
 80007be:	f7ff fe19 	bl	80003f4 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80007c2:	2300      	movs	r3, #0
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	e023      	b.n	8000810 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80007c8:	7b3a      	ldrb	r2, [r7, #12]
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	4914      	ldr	r1, [pc, #80]	; (8000820 <LCD_DrawChar+0x88>)
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	440a      	add	r2, r1
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80007d8:	2300      	movs	r3, #0
 80007da:	737b      	strb	r3, [r7, #13]
 80007dc:	e012      	b.n	8000804 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80007e8:	201f      	movs	r0, #31
 80007ea:	f7ff fe11 	bl	8000410 <LCD_Write_Data>
 80007ee:	e003      	b.n	80007f8 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80007f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007f4:	f7ff fe0c 	bl	8000410 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	085b      	lsrs	r3, r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	3301      	adds	r3, #1
 8000802:	737b      	strb	r3, [r7, #13]
 8000804:	7b7b      	ldrb	r3, [r7, #13]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d9e9      	bls.n	80007de <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	d9d8      	bls.n	80007c8 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800691c 	.word	0x0800691c

08000824 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	603a      	str	r2, [r7, #0]
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	460b      	mov	r3, r1
 8000832:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000834:	e01c      	b.n	8000870 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2be8      	cmp	r3, #232	; 0xe8
 800083a:	d904      	bls.n	8000846 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800083c:	2300      	movs	r3, #0
 800083e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	3310      	adds	r3, #16
 8000844:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800084c:	d903      	bls.n	8000856 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800084e:	2300      	movs	r3, #0
 8000850:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000852:	2300      	movs	r3, #0
 8000854:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	88b9      	ldrh	r1, [r7, #4]
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff9a 	bl	8000798 <LCD_DrawChar>
		
		pStr ++;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	3308      	adds	r3, #8
 800086e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1de      	bne.n	8000836 <LCD_DrawString+0x12>
		
	}
	
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b096      	sub	sp, #88	; 0x58
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f000 fc71 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f853 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 f937 	bl	8000b04 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000896:	f000 f9d1 	bl	8000c3c <MX_FSMC_Init>
  MX_DAC_Init();
 800089a:	f000 f893 	bl	80009c4 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 800089e:	f000 f8c5 	bl	8000a2c <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 80008a2:	f000 f8e3 	bl	8000a6c <MX_TIM2_Init>
  MX_FATFS_Init();
 80008a6:	f003 ff0b 	bl	80046c0 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AudioTask */
  osThreadDef(AudioTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <main+0x9c>)
 80008ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80008b0:	461d      	mov	r5, r3
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AudioTaskHandle = osThreadCreate(osThread(AudioTask), NULL);
 80008be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 f8ff 	bl	8004ac8 <osThreadCreate>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <main+0xa0>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDTask */
  osThreadDef(SDTask, StartTask02, osPriorityNormal, 0, 256);
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <main+0xa4>)
 80008d2:	f107 0420 	add.w	r4, r7, #32
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDTaskHandle = osThreadCreate(osThread(SDTask), NULL);
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 f8ec 	bl	8004ac8 <osThreadCreate>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <main+0xa8>)
 80008f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TFTTask */
  osThreadDef(TFTTask, StartTask03, osPriorityNormal, 0, 128);
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main+0xac>)
 80008f8:	1d3c      	adds	r4, r7, #4
 80008fa:	461d      	mov	r5, r3
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TFTTaskHandle = osThreadCreate(osThread(TFTTask), NULL);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f004 f8db 	bl	8004ac8 <osThreadCreate>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <main+0xb0>)
 8000916:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000918:	f004 f8cf 	bl	8004aba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091c:	e7fe      	b.n	800091c <main+0x98>
 800091e:	bf00      	nop
 8000920:	080068a0 	.word	0x080068a0
 8000924:	20000474 	.word	0x20000474
 8000928:	080068bc 	.word	0x080068bc
 800092c:	20000478 	.word	0x20000478
 8000930:	080068d8 	.word	0x080068d8
 8000934:	2000047c 	.word	0x2000047c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b090      	sub	sp, #64	; 0x40
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	2228      	movs	r2, #40	; 0x28
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fab4 	bl	8005eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000976:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4618      	mov	r0, r3
 8000982:	f000 ffb9 	bl	80018f8 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800098c:	f000 f9d6 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fa26 	bl	8001dfc <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009b6:	f000 f9c1 	bl	8000d3c <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3740      	adds	r7, #64	; 0x40
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_DAC_Init+0x60>)
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <MX_DAC_Init+0x64>)
 80009d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_DAC_Init+0x60>)
 80009da:	f000 fd32 	bl	8001442 <HAL_DAC_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009e4:	f000 f9aa 	bl	8000d3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_DAC_Init+0x60>)
 80009f8:	f000 fd69 	bl	80014ce <HAL_DAC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a02:	f000 f99b 	bl	8000d3c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	2210      	movs	r2, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_DAC_Init+0x60>)
 8000a0e:	f000 fd5e 	bl	80014ce <HAL_DAC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 f990 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000034c 	.word	0x2000034c
 8000a28:	40007400 	.word	0x40007400

08000a2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <MX_SDIO_SD_Init+0x3c>)
 8000a34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <MX_SDIO_SD_Init+0x38>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000360 	.word	0x20000360
 8000a68:	40018000 	.word	0x40018000

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000ab2:	f002 fcdf 	bl	8003474 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000abc:	f000 f93e 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000ace:	f002 fd79 	bl	80035c4 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f000 f930 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aea:	f002 ff3f 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 f922 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200003e4 	.word	0x200003e4

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0318 	add.w	r3, r7, #24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a42      	ldr	r2, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a3c      	ldr	r2, [pc, #240]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0x124>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2103      	movs	r1, #3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_GPIO_Init+0x128>)
 8000b96:	f000 fe7d 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba0:	4823      	ldr	r0, [pc, #140]	; (8000c30 <MX_GPIO_Init+0x12c>)
 8000ba2:	f000 fe77 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_GPIO_Init+0x130>)
 8000bac:	f000 fe72 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_GPIO_Init+0x134>)
 8000bc6:	f000 fcd1 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_GPIO_Init+0x128>)
 8000be2:	f000 fcc3 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x12c>)
 8000c00:	f000 fcb4 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x130>)
 8000c1c:	f000 fca6 	bl	800156c <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	40011400 	.word	0x40011400
 8000c34:	40011800 	.word	0x40011800
 8000c38:	40011000 	.word	0x40011000

08000c3c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c56:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c5a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <MX_FSMC_Init+0xc0>)
 8000c60:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c76:	2210      	movs	r2, #16
 8000c78:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000cba:	23ff      	movs	r3, #255	; 0xff
 8000cbc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cc6:	2311      	movs	r3, #17
 8000cc8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_FSMC_Init+0xbc>)
 8000cd6:	f002 fb80 	bl	80033da <HAL_SRAM_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000ce0:	f000 f82c 	bl	8000d3c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_FSMC_Init+0xc4>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <MX_FSMC_Init+0xc4>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000042c 	.word	0x2000042c
 8000cfc:	a0000104 	.word	0xa0000104
 8000d00:	40010000 	.word	0x40010000

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	audio_task();
 8000d0c:	f7ff fa90 	bl	8000230 <audio_task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f003 ff25 	bl	8004b60 <osDelay>
 8000d16:	e7fb      	b.n	8000d10 <StartDefaultTask+0xc>

08000d18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  //

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f003 ff1d 	bl	8004b60 <osDelay>
 8000d26:	e7fb      	b.n	8000d20 <StartTask02+0x8>

08000d28 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	tft_task();
 8000d30:	f000 f9a0 	bl	8001074 <tft_task>
  for(;;)
  {
    osDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f003 ff13 	bl	8004b60 <osDelay>
 8000d3a:	e7fb      	b.n	8000d34 <StartTask03+0xc>

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_MspInit+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_MspInit+0x68>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x68>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x68>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_MspInit+0x68>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x68>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	f06f 0001 	mvn.w	r0, #1
 8000d86:	f000 fb34 	bl	80013f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x6c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x6c>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_DAC_MspInit+0x6c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d121      	bne.n	8000e1c <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de2:	61d3      	str	r3, [r2, #28]
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_DAC_MspInit+0x70>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e08:	2330      	movs	r3, #48	; 0x30
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_DAC_MspInit+0x74>)
 8000e18:	f000 fba8 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40007400 	.word	0x40007400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <HAL_SD_MspInit+0xa4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13c      	bne.n	8000eca <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6153      	str	r3, [r2, #20]
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e86:	f043 0320 	orr.w	r3, r3, #32
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_SD_MspInit+0xa8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e9c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_SD_MspInit+0xac>)
 8000eae:	f000 fb5d 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_SD_MspInit+0xb0>)
 8000ec6:	f000 fb51 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40018000 	.word	0x40018000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40011400 	.word	0x40011400

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d10b      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_TIM_Base_MspInit+0x34>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_TIM_Base_MspInit+0x34>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_TIM_Base_MspInit+0x34>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_FSMC_MspInit+0x78>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d129      	bne.n	8000f8c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_FSMC_MspInit+0x78>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_FSMC_MspInit+0x7c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <HAL_FSMC_MspInit+0x7c>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_FSMC_MspInit+0x7c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f56:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f5a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_FSMC_MspInit+0x80>)
 8000f6c:	f000 fafe 	bl	800156c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f70:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000f74:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_FSMC_MspInit+0x84>)
 8000f86:	f000 faf1 	bl	800156c <HAL_GPIO_Init>
 8000f8a:	e000      	b.n	8000f8e <HAL_FSMC_MspInit+0x72>
    return;
 8000f8c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000480 	.word	0x20000480
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40011800 	.word	0x40011800
 8000fa0:	40011400 	.word	0x40011400

08000fa4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fac:	f7ff ffb6 	bl	8000f1c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 f909 	bl	80011fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fea:	f004 fb1d 	bl	8005628 <xTaskGetSchedulerState>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d001      	beq.n	8000ff8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ff4:	f004 fd08 	bl	8005a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f004 ff08 	bl	8005e40 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20010000 	.word	0x20010000
 800105c:	00000400 	.word	0x00000400
 8001060:	20000484 	.word	0x20000484
 8001064:	20001200 	.word	0x20001200

08001068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <tft_task>:
		*pt = *err;
	} *pt = 0; // ending the string
	HAL_Delay(1000);
}

void tft_task() { // help other threads print their stuff
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b09c      	sub	sp, #112	; 0x70
 8001078:	af02      	add	r7, sp, #8
	LCD_INIT();
 800107a:	f7ff f970 	bl	800035e <LCD_INIT>
	int last_tick = HAL_GetTick();
 800107e:	f000 f8cf 	bl	8001220 <HAL_GetTick>
 8001082:	4603      	mov	r3, r0
 8001084:	667b      	str	r3, [r7, #100]	; 0x64
	char buff[100];

	while (1) {

		if (HAL_GetTick() - last_tick > 100) {
 8001086:	f000 f8cb 	bl	8001220 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	; 0x64
 8001092:	d938      	bls.n	8001106 <tft_task+0x92>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001094:	2102      	movs	r1, #2
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <tft_task+0x9c>)
 8001098:	f000 fc14 	bl	80018c4 <HAL_GPIO_TogglePin>
			last_tick = HAL_GetTick();
 800109c:	f000 f8c0 	bl	8001220 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	667b      	str	r3, [r7, #100]	; 0x64
			sprintf(buff, "%02d:%02d.%03d",
					HAL_GetTick() / (1000 * 60),
 80010a4:	f000 f8bc 	bl	8001220 <HAL_GetTick>
 80010a8:	4603      	mov	r3, r0
			sprintf(buff, "%02d:%02d.%03d",
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <tft_task+0xa0>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0b9d      	lsrs	r5, r3, #14
					(HAL_GetTick() / 1000) % (60),
 80010b2:	f000 f8b5 	bl	8001220 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <tft_task+0xa4>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	099a      	lsrs	r2, r3, #6
			sprintf(buff, "%02d:%02d.%03d",
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <tft_task+0xa8>)
 80010c2:	fba3 1302 	umull	r1, r3, r3, r2
 80010c6:	095c      	lsrs	r4, r3, #5
 80010c8:	4623      	mov	r3, r4
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	1b1b      	subs	r3, r3, r4
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	1ad4      	subs	r4, r2, r3
					HAL_GetTick() % 1000);
 80010d2:	f000 f8a5 	bl	8001220 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
			sprintf(buff, "%02d:%02d.%03d",
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <tft_task+0xa4>)
 80010da:	fba3 1302 	umull	r1, r3, r3, r2
 80010de:	099b      	lsrs	r3, r3, #6
 80010e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010e4:	fb01 f303 	mul.w	r3, r1, r3
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4638      	mov	r0, r7
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4623      	mov	r3, r4
 80010f0:	462a      	mov	r2, r5
 80010f2:	490b      	ldr	r1, [pc, #44]	; (8001120 <tft_task+0xac>)
 80010f4:	f004 fff4 	bl	80060e0 <siprintf>
			LCD_DrawString(0, 0, buff);
 80010f8:	463b      	mov	r3, r7
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fb90 	bl	8000824 <LCD_DrawString>
 8001104:	e7bf      	b.n	8001086 <tft_task+0x12>
//					HAL_GetTick() / (1000 * 60),
//					(HAL_GetTick() / 1000) % (60),
//					HAL_GetTick() % 1000);
//			audio_tft();
		} else {
			vTaskDelay(20);
 8001106:	2014      	movs	r0, #20
 8001108:	f003 ff80 	bl	800500c <vTaskDelay>
		if (HAL_GetTick() - last_tick > 100) {
 800110c:	e7bb      	b.n	8001086 <tft_task+0x12>
 800110e:	bf00      	nop
 8001110:	40010c00 	.word	0x40010c00
 8001114:	45e7b273 	.word	0x45e7b273
 8001118:	10624dd3 	.word	0x10624dd3
 800111c:	88888889 	.word	0x88888889
 8001120:	080068f4 	.word	0x080068f4

08001124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114a:	f7ff ff8d 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f004 fe7d 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff fb97 	bl	8000884 <main>
  bx lr
 8001156:	4770      	bx	lr
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001160:	08006fcc 	.word	0x08006fcc
  ldr r2, =_sbss
 8001164:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001168:	200011fc 	.word	0x200011fc

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f92b 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fddc 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f935 	bl	800142a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f90b 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000008 	.word	0x20000008
 800121c:	20000488 	.word	0x20000488

08001220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000488 	.word	0x20000488

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fff0 	bl	8001220 <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffe0 	bl	8001220 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff90 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff49 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e014      	b.n	800147e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fca7 	bl	8000db8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2202      	movs	r2, #2
 800146e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	3308      	adds	r3, #8
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e004      	b.n	80014ba <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	3314      	adds	r3, #20
 80014b8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	461a      	mov	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b087      	sub	sp, #28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_DAC_ConfigChannel+0x18>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e03c      	b.n	8001560 <HAL_DAC_ConfigChannel+0x92>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2201      	movs	r2, #1
 80014ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2202      	movs	r2, #2
 80014f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	22c0      	movs	r2, #192	; 0xc0
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e179      	b.n	8001874 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8168 	bne.w	800186e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a96      	ldr	r2, [pc, #600]	; (80017fc <HAL_GPIO_Init+0x290>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015a8:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x290>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d875      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ae:	4a94      	ldr	r2, [pc, #592]	; (8001800 <HAL_GPIO_Init+0x294>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d058      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015b4:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x294>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d86f      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ba:	4a92      	ldr	r2, [pc, #584]	; (8001804 <HAL_GPIO_Init+0x298>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015c0:	4a90      	ldr	r2, [pc, #576]	; (8001804 <HAL_GPIO_Init+0x298>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d869      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015c6:	4a90      	ldr	r2, [pc, #576]	; (8001808 <HAL_GPIO_Init+0x29c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04c      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015cc:	4a8e      	ldr	r2, [pc, #568]	; (8001808 <HAL_GPIO_Init+0x29c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d863      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015d2:	4a8e      	ldr	r2, [pc, #568]	; (800180c <HAL_GPIO_Init+0x2a0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d046      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015d8:	4a8c      	ldr	r2, [pc, #560]	; (800180c <HAL_GPIO_Init+0x2a0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d85d      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d82a      	bhi.n	8001638 <HAL_GPIO_Init+0xcc>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d859      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_GPIO_Init+0x80>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001695 	.word	0x08001695
 80015fc:	0800169b 	.word	0x0800169b
 8001600:	0800169b 	.word	0x0800169b
 8001604:	0800169b 	.word	0x0800169b
 8001608:	0800169b 	.word	0x0800169b
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800169b 	.word	0x0800169b
 8001614:	0800169b 	.word	0x0800169b
 8001618:	0800169b 	.word	0x0800169b
 800161c:	0800169b 	.word	0x0800169b
 8001620:	0800169b 	.word	0x0800169b
 8001624:	0800169b 	.word	0x0800169b
 8001628:	0800169b 	.word	0x0800169b
 800162c:	0800169b 	.word	0x0800169b
 8001630:	08001649 	.word	0x08001649
 8001634:	0800165d 	.word	0x0800165d
 8001638:	4a75      	ldr	r2, [pc, #468]	; (8001810 <HAL_GPIO_Init+0x2a4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e02c      	b.n	800169a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e029      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e024      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3308      	adds	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e01f      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	330c      	adds	r3, #12
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e01a      	b.n	800169c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166e:	2304      	movs	r3, #4
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e013      	b.n	800169c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	611a      	str	r2, [r3, #16]
          break;
 8001686:	e009      	b.n	800169c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	615a      	str	r2, [r3, #20]
          break;
 8001692:	e003      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x130>
          break;
 800169a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	; 0xff
 80016a0:	d801      	bhi.n	80016a6 <HAL_GPIO_Init+0x13a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x13e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d802      	bhi.n	80016b8 <HAL_GPIO_Init+0x14c>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x152>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	3b08      	subs	r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	210f      	movs	r1, #15
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80c1 	beq.w	800186e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ec:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2a8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a48      	ldr	r2, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x2a8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_GPIO_Init+0x2a8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_GPIO_Init+0x2ac>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <HAL_GPIO_Init+0x2b0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01f      	beq.n	8001770 <HAL_GPIO_Init+0x204>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x2b4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d019      	beq.n	800176c <HAL_GPIO_Init+0x200>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_GPIO_Init+0x2b8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x1fc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_GPIO_Init+0x2bc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1f8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a38      	ldr	r2, [pc, #224]	; (800182c <HAL_GPIO_Init+0x2c0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1f4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a37      	ldr	r2, [pc, #220]	; (8001830 <HAL_GPIO_Init+0x2c4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1f0>
 8001758:	2305      	movs	r3, #5
 800175a:	e00a      	b.n	8001772 <HAL_GPIO_Init+0x206>
 800175c:	2306      	movs	r3, #6
 800175e:	e008      	b.n	8001772 <HAL_GPIO_Init+0x206>
 8001760:	2304      	movs	r3, #4
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x206>
 8001764:	2303      	movs	r3, #3
 8001766:	e004      	b.n	8001772 <HAL_GPIO_Init+0x206>
 8001768:	2302      	movs	r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x206>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_Init+0x206>
 8001770:	2300      	movs	r3, #0
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001782:	4925      	ldr	r1, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x2ac>)
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4924      	ldr	r1, [pc, #144]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4920      	ldr	r1, [pc, #128]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	491a      	ldr	r1, [pc, #104]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017dc:	4013      	ands	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d025      	beq.n	8001838 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4910      	ldr	r1, [pc, #64]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
 80017f8:	e025      	b.n	8001846 <HAL_GPIO_Init+0x2da>
 80017fa:	bf00      	nop
 80017fc:	10320000 	.word	0x10320000
 8001800:	10310000 	.word	0x10310000
 8001804:	10220000 	.word	0x10220000
 8001808:	10210000 	.word	0x10210000
 800180c:	10120000 	.word	0x10120000
 8001810:	10110000 	.word	0x10110000
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000
 8001828:	40011400 	.word	0x40011400
 800182c:	40011800 	.word	0x40011800
 8001830:	40011c00 	.word	0x40011c00
 8001834:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_GPIO_Init+0x324>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	4913      	ldr	r1, [pc, #76]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001842:	4013      	ands	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4909      	ldr	r1, [pc, #36]	; (8001890 <HAL_GPIO_Init+0x324>)
 800186a:	4013      	ands	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	f47f ae7e 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	372c      	adds	r7, #44	; 0x2c
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43d9      	mvns	r1, r3
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	400b      	ands	r3, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	611a      	str	r2, [r3, #16]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e272      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8087 	beq.w	8001a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b04      	cmp	r3, #4
 8001922:	d00c      	beq.n	800193e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d112      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d10b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x12c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d168      	bne.n	8001a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e24c      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x76>
 8001960:	4b80      	ldr	r3, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a7f      	ldr	r2, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e02e      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xbc>
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc24 	bl	8001220 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fc20 	bl	8001220 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e200      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xe4>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc10 	bl	8001220 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fc0c 	bl	8001220 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1ec      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x10c>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1c0      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4939      	ldr	r1, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fbc5 	bl	8001220 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fbc1 	bl	8001220 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1a1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fba4 	bl	8001220 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fba0 	bl	8001220 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e180      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03a      	beq.n	8001b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d019      	beq.n	8001b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fb84 	bl	8001220 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fb80 	bl	8001220 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e160      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 faa6 	bl	800208c <RCC_Delay>
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fb6a 	bl	8001220 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fb66 	bl	8001220 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e146      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	42420000 	.word	0x42420000
 8001b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a6 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb27 	bl	8001220 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff fb23 	bl	8001220 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	; 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e103      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x312>
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e02d      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c12:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a66      	ldr	r2, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	e01c      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x356>
 8001c34:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a5a      	ldr	r2, [pc, #360]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fad7 	bl	8001220 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fad3 	bl	8001220 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0b1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCC_OscConfig+0x37e>
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fac1 	bl	8001220 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fabd 	bl	8001220 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e09b      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d061      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d146      	bne.n	8001d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa91 	bl	8001220 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fa8d 	bl	8001220 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e06d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4921      	ldr	r1, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a19      	ldr	r1, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fa61 	bl	8001220 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fa5d 	bl	8001220 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46a>
 8001d80:	e035      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa4a 	bl	8001220 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff fa46 	bl	8001220 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e026      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x498>
 8001dae:	e01e      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e019      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x500>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d0      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4965      	ldr	r1, [pc, #404]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d040      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d115      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e073      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06b      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4936      	ldr	r1, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eec:	f7ff f998 	bl	8001220 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7ff f994 	bl	8001220 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e053      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d210      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4922      	ldr	r1, [pc, #136]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1d0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8f6 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08006f0c 	.word	0x08006f0c
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b490      	push	{r4, r7}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_RCC_GetSysClockFreq+0xac>)
 8001fd8:	1d3c      	adds	r4, r7, #4
 8001fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe0:	f240 2301 	movw	r3, #513	; 0x201
 8001fe4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b04      	cmp	r3, #4
 8002008:	d002      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x40>
 800200a:	2b08      	cmp	r3, #8
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x46>
 800200e:	e02b      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002012:	623b      	str	r3, [r7, #32]
      break;
 8002014:	e02b      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	0c9b      	lsrs	r3, r3, #18
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3328      	adds	r3, #40	; 0x28
 8002020:	443b      	add	r3, r7
 8002022:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002026:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c5b      	lsrs	r3, r3, #17
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	3328      	adds	r3, #40	; 0x28
 800203e:	443b      	add	r3, r7
 8002040:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002044:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204a:	fb03 f202 	mul.w	r2, r3, r2
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	e004      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	623b      	str	r3, [r7, #32]
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206a:	623b      	str	r3, [r7, #32]
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6a3b      	ldr	r3, [r7, #32]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bc90      	pop	{r4, r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	08006904 	.word	0x08006904
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	003d0900 	.word	0x003d0900

0800208c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <RCC_Delay+0x34>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <RCC_Delay+0x38>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0a5b      	lsrs	r3, r3, #9
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a8:	bf00      	nop
  }
  while (Delay --);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	60fa      	str	r2, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <RCC_Delay+0x1c>
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000000 	.word	0x20000000
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fe9f 	bl	8000e30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f814 	bl	8002128 <HAL_SD_InitCard>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00a      	b.n	8002120 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b08e      	sub	sp, #56	; 0x38
 800212c:	af04      	add	r7, sp, #16
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002144:	2376      	movs	r3, #118	; 0x76
 8002146:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681d      	ldr	r5, [r3, #0]
 800214c:	466c      	mov	r4, sp
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	4628      	mov	r0, r5
 8002162:	f001 fd45 	bl	8003bf0 <SDIO_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800216c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04c      	b.n	8002212 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_SD_InitCard+0xf4>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fd7a 	bl	8003c7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_SD_InitCard+0xf4>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 ff04 	bl	8002f9c <SD_PowerON>
 8002194:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e02e      	b.n	8002212 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fe23 	bl	8002e00 <SD_InitCard>
 80021ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01b      	b.n	8002212 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 fdd8 	bl	8003d98 <SDMMC_CmdBlockLength>
 80021e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_SD_InitCard+0xf8>)
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	bf00      	nop
 800221c:	423000a0 	.word	0x423000a0
 8002220:	004005ff 	.word	0x004005ff

08002224 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b092      	sub	sp, #72	; 0x48
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002232:	f7fe fff5 	bl	8001220 <HAL_GetTick>
 8002236:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1bd      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 81b0 	bne.w	80025c4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800226a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	441a      	add	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	429a      	cmp	r2, r3
 8002276:	d907      	bls.n	8002288 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e1a4      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	025b      	lsls	r3, r3, #9
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80022b2:	2390      	movs	r3, #144	; 0x90
 80022b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80022b6:	2302      	movs	r3, #2
 80022b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f107 0214 	add.w	r2, r7, #20
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fd38 	bl	8003d42 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d90a      	bls.n	80022ee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2202      	movs	r2, #2
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fd9b 	bl	8003e20 <SDMMC_CmdReadMultiBlock>
 80022ea:	6478      	str	r0, [r7, #68]	; 0x44
 80022ec:	e009      	b.n	8002302 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fd6e 	bl	8003ddc <SDMMC_CmdReadSingleBlock>
 8002300:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	431a      	orrs	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e151      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002332:	e061      	b.n	80023f8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03c      	beq.n	80023bc <HAL_SD_ReadBlocks+0x198>
 8002342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d039      	beq.n	80023bc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002348:	2300      	movs	r3, #0
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
 800234c:	e033      	b.n	80023b6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f001 fc76 	bl	8003c44 <SDIO_ReadFIFO>
 8002358:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	b2da      	uxtb	r2, r3
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	3301      	adds	r3, #1
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236a:	3b01      	subs	r3, #1
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b2da      	uxtb	r2, r3
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	3301      	adds	r3, #1
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800237e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002380:	3b01      	subs	r3, #1
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2da      	uxtb	r2, r3
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	3301      	adds	r3, #1
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002396:	3b01      	subs	r3, #1
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	0e1b      	lsrs	r3, r3, #24
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	3301      	adds	r3, #1
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	3b01      	subs	r3, #1
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80023b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b2:	3301      	adds	r3, #1
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d9c8      	bls.n	800234e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80023bc:	f7fe ff30 	bl	8001220 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d902      	bls.n	80023d2 <HAL_SD_ReadBlocks+0x1ae>
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d112      	bne.n	80023f8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a48      	ldr	r2, [pc, #288]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0ec      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fe:	f240 332a 	movw	r3, #810	; 0x32a
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d095      	beq.n	8002334 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d022      	beq.n	800245c <HAL_SD_ReadBlocks+0x238>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d91f      	bls.n	800245c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	2b03      	cmp	r3, #3
 8002422:	d01b      	beq.n	800245c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f001 fd5f 	bl	8003eec <SDMMC_CmdStopTransfer>
 800242e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0ba      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 8002470:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	f043 0208 	orr.w	r2, r3, #8
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0a0      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e086      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d063      	beq.n	800259a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_SD_ReadBlocks+0x2d4>)
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e06c      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
 80024f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f001 fb9f 	bl	8003c44 <SDIO_ReadFIFO>
 8002506:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	b2da      	uxtb	r2, r3
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	3301      	adds	r3, #1
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002518:	3b01      	subs	r3, #1
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b2da      	uxtb	r2, r3
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	3301      	adds	r3, #1
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	3b01      	subs	r3, #1
 8002530:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2da      	uxtb	r2, r3
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253e:	3301      	adds	r3, #1
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002544:	3b01      	subs	r3, #1
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	0e1b      	lsrs	r3, r3, #24
 800254c:	b2da      	uxtb	r2, r3
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	3301      	adds	r3, #1
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255a:	3b01      	subs	r3, #1
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800255e:	f7fe fe5f 	bl	8001220 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800256a:	429a      	cmp	r2, r3
 800256c:	d902      	bls.n	8002574 <HAL_SD_ReadBlocks+0x350>
 800256e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d112      	bne.n	800259a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_SD_ReadBlocks+0x3b8>)
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e01b      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SD_ReadBlocks+0x38a>
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1a6      	bne.n	80024fc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e006      	b.n	80025d2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3748      	adds	r7, #72	; 0x48
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	004005ff 	.word	0x004005ff

080025e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b092      	sub	sp, #72	; 0x48
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025ee:	f7fe fe17 	bl	8001220 <HAL_GetTick>
 80025f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e166      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 8159 	bne.w	80028d2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	441a      	add	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	429a      	cmp	r2, r3
 8002632:	d907      	bls.n	8002644 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e14d      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2203      	movs	r2, #3
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	2b01      	cmp	r3, #1
 800265a:	d002      	beq.n	8002662 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800266e:	2390      	movs	r3, #144	; 0x90
 8002670:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800267a:	2301      	movs	r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f107 0218 	add.w	r2, r7, #24
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fb5a 	bl	8003d42 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d90a      	bls.n	80026aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 fc01 	bl	8003ea8 <SDMMC_CmdWriteMultiBlock>
 80026a6:	6478      	str	r0, [r7, #68]	; 0x44
 80026a8:	e009      	b.n	80026be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2210      	movs	r2, #16
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fbd4 	bl	8003e64 <SDMMC_CmdWriteSingleBlock>
 80026bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80026be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a87      	ldr	r2, [pc, #540]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0fa      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026ee:	e065      	b.n	80027bc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d040      	beq.n	8002780 <HAL_SD_WriteBlocks+0x1a0>
 80026fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d03d      	beq.n	8002780 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002704:	2300      	movs	r3, #0
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
 8002708:	e037      	b.n	800277a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	3301      	adds	r3, #1
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	3b01      	subs	r3, #1
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	3301      	adds	r3, #1
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002730:	3b01      	subs	r3, #1
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	3301      	adds	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3b01      	subs	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	061a      	lsls	r2, r3, #24
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	3301      	adds	r3, #1
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	3b01      	subs	r3, #1
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f107 0214 	add.w	r2, r7, #20
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fa74 	bl	8003c5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002776:	3301      	adds	r3, #1
 8002778:	643b      	str	r3, [r7, #64]	; 0x40
 800277a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277c:	2b07      	cmp	r3, #7
 800277e:	d9c4      	bls.n	800270a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002780:	f7fe fd4e 	bl	8001220 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800278c:	429a      	cmp	r2, r3
 800278e:	d902      	bls.n	8002796 <HAL_SD_WriteBlocks+0x1b6>
 8002790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002792:	2b00      	cmp	r3, #0
 8002794:	d112      	bne.n	80027bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e091      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c2:	f240 331a 	movw	r3, #794	; 0x31a
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d091      	beq.n	80026f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d022      	beq.n	8002820 <HAL_SD_WriteBlocks+0x240>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d91f      	bls.n	8002820 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d01b      	beq.n	8002820 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fb7d 	bl	8003eec <SDMMC_CmdStopTransfer>
 80027f2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e05f      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	f043 0208 	orr.w	r2, r3, #8
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e045      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e02b      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_SD_WriteBlocks+0x308>)
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	f043 0210 	orr.w	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e011      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e006      	b.n	80028e0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3748      	adds	r7, #72	; 0x48
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	004005ff 	.word	0x004005ff

080028ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fa:	0f9b      	lsrs	r3, r3, #30
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	b2da      	uxtb	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002918:	0e1b      	lsrs	r3, r3, #24
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	b2da      	uxtb	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	b2da      	uxtb	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b2da      	uxtb	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002942:	b2da      	uxtb	r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294c:	0d1b      	lsrs	r3, r3, #20
 800294e:	b29a      	uxth	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296a:	0bdb      	lsrs	r3, r3, #15
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297c:	0b9b      	lsrs	r3, r3, #14
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298e:	0b5b      	lsrs	r3, r3, #13
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	0b1b      	lsrs	r3, r3, #12
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d163      	bne.n	8002a84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80029cc:	0f92      	lsrs	r2, r2, #30
 80029ce:	431a      	orrs	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d8:	0edb      	lsrs	r3, r3, #27
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ea:	0e1b      	lsrs	r3, r3, #24
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a20:	0bdb      	lsrs	r3, r3, #15
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	3302      	adds	r3, #2
 8002a44:	2201      	movs	r2, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a4e:	fb03 f202 	mul.w	r2, r3, r2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7a1b      	ldrb	r3, [r3, #8]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a70:	0a52      	lsrs	r2, r2, #9
 8002a72:	fb03 f202 	mul.w	r2, r3, r2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60
 8002a82:	e031      	b.n	8002ae8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d11d      	bne.n	8002ac8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	029a      	lsls	r2, r3, #10
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ac6:	e00f      	b.n	8002ae8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_SD_GetCardCSD+0x344>)
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e09d      	b.n	8002c24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aec:	0b9b      	lsrs	r3, r3, #14
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	09db      	lsrs	r3, r3, #7
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	0fdb      	lsrs	r3, r3, #31
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	0f5b      	lsrs	r3, r3, #29
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	0d9b      	lsrs	r3, r3, #22
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	0d5b      	lsrs	r3, r3, #21
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	0bdb      	lsrs	r3, r3, #15
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	0b9b      	lsrs	r3, r3, #14
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	0b5b      	lsrs	r3, r3, #13
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	0b1b      	lsrs	r3, r3, #12
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	0a9b      	lsrs	r3, r3, #10
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	004005ff 	.word	0x004005ff

08002c34 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d02e      	beq.n	8002d0a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc0:	e029      	b.n	8002d16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa1c 	bl	8003108 <SD_WideBus_Enable>
 8002cd0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cde:	e01a      	b.n	8002d16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa59 	bl	800319e <SD_WideBus_Disable>
 8002cec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cfa:	e00c      	b.n	8002d16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
 8002d08:	e005      	b.n	8002d16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <HAL_SD_ConfigWideBusOperation+0x130>)
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d34:	e01f      	b.n	8002d76 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681d      	ldr	r5, [r3, #0]
 8002d5c:	466c      	mov	r4, sp
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d70:	4628      	mov	r0, r5
 8002d72:	f000 ff3d 	bl	8003bf0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 f80a 	bl	8003d98 <SDMMC_CmdBlockLength>
 8002d84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_SD_ConfigWideBusOperation+0x130>)
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	004005ff 	.word	0x004005ff

08002dc0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f970 	bl	80030b8 <SD_SendStatus>
 8002dd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	0a5b      	lsrs	r3, r3, #9
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002df6:	693b      	ldr	r3, [r7, #16]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b094      	sub	sp, #80	; 0x50
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 ff42 	bl	8003c9a <SDIO_GetPowerState>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e20:	e0b8      	b.n	8002f94 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d02f      	beq.n	8002e8a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f966 	bl	8004100 <SDMMC_CmdSendCID>
 8002e34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <SD_InitCard+0x40>
    {
      return errorstate;
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	e0a9      	b.n	8002f94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 ff69 	bl	8003d1e <SDIO_GetResponse>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 ff60 	bl	8003d1e <SDIO_GetResponse>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2108      	movs	r1, #8
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ff57 	bl	8003d1e <SDIO_GetResponse>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	210c      	movs	r1, #12
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff4e 	bl	8003d1e <SDIO_GetResponse>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d00d      	beq.n	8002eae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f107 020e 	add.w	r2, r7, #14
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f96c 	bl	800417a <SDMMC_CmdSetRelAdd>
 8002ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <SD_InitCard+0xae>
    {
      return errorstate;
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eac:	e072      	b.n	8002f94 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d036      	beq.n	8002f24 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f001 f936 	bl	800413c <SDMMC_CmdSendCSD>
 8002ed0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <SD_InitCard+0xdc>
    {
      return errorstate;
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eda:	e05b      	b.n	8002f94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ff1b 	bl	8003d1e <SDIO_GetResponse>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff12 	bl	8003d1e <SDIO_GetResponse>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2108      	movs	r1, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ff09 	bl	8003d1e <SDIO_GetResponse>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	210c      	movs	r1, #12
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 ff00 	bl	8003d1e <SDIO_GetResponse>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2104      	movs	r1, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fef7 	bl	8003d1e <SDIO_GetResponse>
 8002f30:	4603      	mov	r3, r0
 8002f32:	0d1a      	lsrs	r2, r3, #20
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fcd4 	bl	80028ec <HAL_SD_GetCardCSD>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f4e:	e021      	b.n	8002f94 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	4615      	mov	r5, r2
 8002f60:	4622      	mov	r2, r4
 8002f62:	462b      	mov	r3, r5
 8002f64:	4608      	mov	r0, r1
 8002f66:	f000 ffe3 	bl	8003f30 <SDMMC_CmdSelDesel>
 8002f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SD_InitCard+0x176>
  {
    return errorstate;
 8002f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f74:	e00e      	b.n	8002f94 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681d      	ldr	r5, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	466c      	mov	r4, sp
 8002f7e:	f103 0210 	add.w	r2, r3, #16
 8002f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f88:	3304      	adds	r3, #4
 8002f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f000 fe2f 	bl	8003bf0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3740      	adds	r7, #64	; 0x40
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdb0      	pop	{r4, r5, r7, pc}

08002f9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 ffde 	bl	8003f76 <SDMMC_CmdGoIdleState>
 8002fba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	e072      	b.n	80030ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fff1 	bl	8003fb2 <SDMMC_CmdOperCond>
 8002fd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ffc7 	bl	8003f76 <SDMMC_CmdGoIdleState>
 8002fe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <SD_PowerON+0x5e>
    {
      return errorstate;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	e05b      	b.n	80030ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d137      	bne.n	8003072 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fff1 	bl	8003ff0 <SDMMC_CmdAppCommand>
 800300e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02d      	beq.n	8003072 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800301a:	e047      	b.n	80030ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffe4 	bl	8003ff0 <SDMMC_CmdAppCommand>
 8003028:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SD_PowerON+0x98>
    {
      return errorstate;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	e03b      	b.n	80030ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	491e      	ldr	r1, [pc, #120]	; (80030b4 <SD_PowerON+0x118>)
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fffa 	bl	8004034 <SDMMC_CmdAppOperCommand>
 8003040:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800304c:	e02e      	b.n	80030ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe62 	bl	8003d1e <SDIO_GetResponse>
 800305a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	0fdb      	lsrs	r3, r3, #31
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <SD_PowerON+0xcc>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <SD_PowerON+0xce>
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]

    count++;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003078:	4293      	cmp	r3, r2
 800307a:	d802      	bhi.n	8003082 <SD_PowerON+0xe6>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0cc      	beq.n	800301c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800308c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003090:	e00c      	b.n	80030ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
 80030a2:	e002      	b.n	80030aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	c1100000 	.word	0xc1100000

080030b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80030c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030cc:	e018      	b.n	8003100 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f001 f86e 	bl	80041bc <SDMMC_CmdSendStatus>
 80030e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	e009      	b.n	8003100 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fe13 	bl	8003d1e <SDIO_GetResponse>
 80030f8:	4602      	mov	r2, r0
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fdfd 	bl	8003d1e <SDIO_GetResponse>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312e:	d102      	bne.n	8003136 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003134:	e02f      	b.n	8003196 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f879 	bl	8003234 <SD_FindSCR>
 8003142:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e023      	b.n	8003196 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01c      	beq.n	8003192 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 ff43 	bl	8003ff0 <SDMMC_CmdAppCommand>
 800316a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	e00f      	b.n	8003196 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ff7c 	bl	800407a <SDMMC_CmdBusWidth>
 8003182:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	e003      	b.n	8003196 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800318e:	2300      	movs	r3, #0
 8003190:	e001      	b.n	8003196 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fdb2 	bl	8003d1e <SDIO_GetResponse>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c4:	d102      	bne.n	80031cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80031c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ca:	e02f      	b.n	800322c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f82e 	bl	8003234 <SD_FindSCR>
 80031d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	e023      	b.n	800322c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01c      	beq.n	8003228 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 fef8 	bl	8003ff0 <SDMMC_CmdAppCommand>
 8003200:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	e00f      	b.n	800322c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ff31 	bl	800407a <SDMMC_CmdBusWidth>
 8003218:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	e003      	b.n	800322c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003224:	2300      	movs	r3, #0
 8003226:	e001      	b.n	800322c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b08f      	sub	sp, #60	; 0x3c
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fd ffef 	bl	8001220 <HAL_GetTick>
 8003242:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2108      	movs	r1, #8
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fd9c 	bl	8003d98 <SDMMC_CmdBlockLength>
 8003260:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	e0b2      	b.n	80033d2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 feb9 	bl	8003ff0 <SDMMC_CmdAppCommand>
 800327e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	e0a3      	b.n	80033d2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003290:	2308      	movs	r3, #8
 8003292:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003294:	2330      	movs	r3, #48	; 0x30
 8003296:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003298:	2302      	movs	r3, #2
 800329a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f107 0210 	add.w	r2, r7, #16
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fd47 	bl	8003d42 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ff00 	bl	80040be <SDMMC_CmdSendSCR>
 80032be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02a      	beq.n	800331c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	e083      	b.n	80033d2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f107 0208 	add.w	r2, r7, #8
 80032e4:	18d4      	adds	r4, r2, r3
 80032e6:	4608      	mov	r0, r1
 80032e8:	f000 fcac 	bl	8003c44 <SDIO_ReadFIFO>
 80032ec:	4603      	mov	r3, r0
 80032ee:	6023      	str	r3, [r4, #0]
      index++;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	3301      	adds	r3, #1
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
 80032f6:	e006      	b.n	8003306 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003306:	f7fd ff8b 	bl	8001220 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d102      	bne.n	800331c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800331a:	e05a      	b.n	80033d2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0cf      	beq.n	80032ca <SD_FindSCR+0x96>
 800332a:	e000      	b.n	800332e <SD_FindSCR+0xfa>
      break;
 800332c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003344:	2308      	movs	r3, #8
 8003346:	e044      	b.n	80033d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800335e:	2302      	movs	r3, #2
 8003360:	e037      	b.n	80033d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003378:	2320      	movs	r3, #32
 800337a:	e02a      	b.n	80033d2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f240 523a 	movw	r2, #1338	; 0x53a
 8003384:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	061a      	lsls	r2, r3, #24
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003392:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800339c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0e1b      	lsrs	r3, r3, #24
 80033a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	601a      	str	r2, [r3, #0]
    scr++;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	3304      	adds	r3, #4
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	061a      	lsls	r2, r3, #24
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80033c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0e1b      	lsrs	r3, r3, #24
 80033ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	373c      	adds	r7, #60	; 0x3c
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd90      	pop	{r4, r7, pc}

080033da <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_SRAM_Init+0x1c>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d101      	bne.n	80033fa <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e038      	b.n	800346c <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7fd fdc8 	bl	8000fa4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3308      	adds	r3, #8
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fb10 	bl	8003a44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	f000 fb72 	bl	8003b18 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6858      	ldr	r0, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	f000 fb9d 	bl	8003b80 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6892      	ldr	r2, [r2, #8]
 800344e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	f041 0101 	orr.w	r1, r1, #1
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fd22 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 f94a 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e03c      	b.n	80035a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_TIM_Base_Start+0x9c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_TIM_Base_Start+0xa0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d00e      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_TIM_Base_Start+0xa4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a16      	ldr	r2, [pc, #88]	; (80035bc <HAL_TIM_Base_Start+0xa8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_TIM_Base_Start+0xac>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d010      	beq.n	80035a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	e007      	b.n	80035a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40013400 	.word	0x40013400
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00

080035c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_ConfigClockSource+0x18>
 80035d8:	2302      	movs	r3, #2
 80035da:	e0b3      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x180>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d03e      	beq.n	8003694 <HAL_TIM_ConfigClockSource+0xd0>
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	f200 8087 	bhi.w	800372c <HAL_TIM_ConfigClockSource+0x168>
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	f000 8085 	beq.w	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	d87f      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 800362c:	2b70      	cmp	r3, #112	; 0x70
 800362e:	d01a      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xa2>
 8003630:	2b70      	cmp	r3, #112	; 0x70
 8003632:	d87b      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b60      	cmp	r3, #96	; 0x60
 8003636:	d050      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x116>
 8003638:	2b60      	cmp	r3, #96	; 0x60
 800363a:	d877      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b50      	cmp	r3, #80	; 0x50
 800363e:	d03c      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0xf6>
 8003640:	2b50      	cmp	r3, #80	; 0x50
 8003642:	d873      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d058      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x136>
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d86f      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d064      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x156>
 8003650:	2b30      	cmp	r3, #48	; 0x30
 8003652:	d86b      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d060      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x156>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d867      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x168>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d05c      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x156>
 8003660:	2b10      	cmp	r3, #16
 8003662:	d05a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003664:	e062      	b.n	800372c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f000 f95a 	bl	800392e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003688:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	609a      	str	r2, [r3, #8]
      break;
 8003692:	e04e      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f000 f943 	bl	800392e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b6:	609a      	str	r2, [r3, #8]
      break;
 80036b8:	e03b      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 f8ba 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2150      	movs	r1, #80	; 0x50
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f911 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036d8:	e02b      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 f8d8 	bl	800389c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2160      	movs	r1, #96	; 0x60
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f901 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036f8:	e01b      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 f89a 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f8f1 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 8003718:	e00b      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f000 f8e8 	bl	80038fa <TIM_ITRx_SetConfig>
        break;
 800372a:	e002      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a33      	ldr	r2, [pc, #204]	; (800382c <TIM_Base_SetConfig+0xe0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a32      	ldr	r2, [pc, #200]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <TIM_Base_SetConfig+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <TIM_Base_SetConfig+0xec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <TIM_Base_SetConfig+0xf0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <TIM_Base_SetConfig+0xe0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <TIM_Base_SetConfig+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a21      	ldr	r2, [pc, #132]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00f      	beq.n	80037ce <TIM_Base_SetConfig+0x82>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0x82>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <TIM_Base_SetConfig+0xe8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0x82>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <TIM_Base_SetConfig+0xec>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0x82>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM_Base_SetConfig+0xf0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <TIM_Base_SetConfig+0xe0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40013400 	.word	0x40013400
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 0210 	bic.w	r2, r3, #16
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	031b      	lsls	r3, r3, #12
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 0307 	orr.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e050      	b.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d018      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d00e      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10c      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40013400 	.word	0x40013400
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00

08003a44 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	f023 0101 	bic.w	r1, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d102      	bne.n	8003a74 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e001      	b.n	8003a78 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003a84:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003a8a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003a90:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003a96:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003a9c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003aa2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003aa8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003aae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003ab4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <FSMC_NORSRAM_Init+0xd0>)
 8003ad4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003adc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003ae4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	ea02 0103 	and.w	r1, r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4319      	orrs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	0008fb7f 	.word	0x0008fb7f

08003b18 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	3b02      	subs	r3, #2
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	4319      	orrs	r1, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b94:	d11d      	bne.n	8003bd2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	6811      	ldr	r1, [r2, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	6852      	ldr	r2, [r2, #4]
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	4311      	orrs	r1, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	0212      	lsls	r2, r2, #8
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	6992      	ldr	r2, [r2, #24]
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	68d2      	ldr	r2, [r2, #12]
 8003bc0:	0412      	lsls	r2, r2, #16
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	ea43 0102 	orr.w	r1, r3, r2
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bd0:	e005      	b.n	8003bde <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	cff00000 	.word	0xcff00000

08003bf0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	f107 001c 	add.w	r0, r7, #28
 8003bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003c06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003c08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003c0a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003c0e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003c12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003c16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003c1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	b004      	add	sp, #16
 8003c42:	4770      	bx	lr

08003c44 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2203      	movs	r2, #3
 8003c88:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	f7fd fad2 	bl	8001234 <HAL_Delay>
  
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003cd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003cde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	b2db      	uxtb	r3, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
}  
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d68:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d6e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0

}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003da6:	2310      	movs	r3, #16
 8003da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003daa:	2340      	movs	r3, #64	; 0x40
 8003dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003db8:	f107 0308 	add.w	r3, r7, #8
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff78 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	2110      	movs	r1, #16
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa42 	bl	8004254 <SDMMC_GetCmdResp1>
 8003dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003dea:	2311      	movs	r3, #17
 8003dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dee:	2340      	movs	r3, #64	; 0x40
 8003df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff56 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	2111      	movs	r1, #17
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa20 	bl	8004254 <SDMMC_GetCmdResp1>
 8003e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e16:	69fb      	ldr	r3, [r7, #28]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e2e:	2312      	movs	r3, #18
 8003e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff34 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	2112      	movs	r1, #18
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9fe 	bl	8004254 <SDMMC_GetCmdResp1>
 8003e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e72:	2318      	movs	r3, #24
 8003e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff12 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	2118      	movs	r1, #24
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9dc 	bl	8004254 <SDMMC_GetCmdResp1>
 8003e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fef0 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	2119      	movs	r1, #25
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9ba 	bl	8004254 <SDMMC_GetCmdResp1>
 8003ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ef8:	230c      	movs	r3, #12
 8003efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fecf 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <SDMMC_CmdStopTransfer+0x40>)
 8003f18:	210c      	movs	r1, #12
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f99a 	bl	8004254 <SDMMC_GetCmdResp1>
 8003f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f22:	69fb      	ldr	r3, [r7, #28]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	05f5e100 	.word	0x05f5e100

08003f30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f40:	2307      	movs	r3, #7
 8003f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f44:	2340      	movs	r3, #64	; 0x40
 8003f46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	4619      	mov	r1, r3
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff feab 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	2107      	movs	r1, #7
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f975 	bl	8004254 <SDMMC_GetCmdResp1>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fe8a 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f92d 	bl	8004200 <SDMMC_GetCmdError>
 8003fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003fba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fc4:	2340      	movs	r3, #64	; 0x40
 8003fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fe6b 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fb20 	bl	8004624 <SDMMC_GetCmdResp7>
 8003fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003ffe:	2337      	movs	r3, #55	; 0x37
 8004000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800400a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe4c 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	2137      	movs	r1, #55	; 0x37
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f916 	bl	8004254 <SDMMC_GetCmdResp1>
 8004028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800402a:	69fb      	ldr	r3, [r7, #28]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800404a:	2329      	movs	r3, #41	; 0x29
 800404c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe26 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa29 	bl	80044c0 <SDMMC_GetCmdResp3>
 800406e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004070:	69fb      	ldr	r3, [r7, #28]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004088:	2306      	movs	r3, #6
 800408a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800409a:	f107 0308 	add.w	r3, r7, #8
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fe07 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	2106      	movs	r1, #6
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f8d1 	bl	8004254 <SDMMC_GetCmdResp1>
 80040b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040b4:	69fb      	ldr	r3, [r7, #28]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80040ca:	2333      	movs	r3, #51	; 0x33
 80040cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040dc:	f107 0308 	add.w	r3, r7, #8
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fde6 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	2133      	movs	r1, #51	; 0x33
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8b0 	bl	8004254 <SDMMC_GetCmdResp1>
 80040f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040f6:	69fb      	ldr	r3, [r7, #28]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800410c:	2302      	movs	r3, #2
 800410e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004110:	23c0      	movs	r3, #192	; 0xc0
 8004112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800411e:	f107 0308 	add.w	r3, r7, #8
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fdc5 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f980 	bl	8004430 <SDMMC_GetCmdResp2>
 8004130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004132:	69fb      	ldr	r3, [r7, #28]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800414a:	2309      	movs	r3, #9
 800414c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800414e:	23c0      	movs	r3, #192	; 0xc0
 8004150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fda6 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f961 	bl	8004430 <SDMMC_GetCmdResp2>
 800416e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004170:	69fb      	ldr	r3, [r7, #28]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b088      	sub	sp, #32
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004188:	2303      	movs	r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fd87 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	2103      	movs	r1, #3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f9c4 	bl	8004538 <SDMMC_GetCmdResp6>
 80041b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b2:	69fb      	ldr	r3, [r7, #28]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80041ca:	230d      	movs	r3, #13
 80041cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ce:	2340      	movs	r3, #64	; 0x40
 80041d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041dc:	f107 0308 	add.w	r3, r7, #8
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fd66 	bl	8003cb4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	210d      	movs	r1, #13
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f830 	bl	8004254 <SDMMC_GetCmdResp1>
 80041f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041f6:	69fb      	ldr	r3, [r7, #28]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <SDMMC_GetCmdError+0x4c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a10      	ldr	r2, [pc, #64]	; (8004250 <SDMMC_GetCmdError+0x50>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0a5b      	lsrs	r3, r3, #9
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	60fa      	str	r2, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800422c:	e009      	b.n	8004242 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f1      	beq.n	800421e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	22c5      	movs	r2, #197	; 0xc5
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000000 	.word	0x20000000
 8004250:	10624dd3 	.word	0x10624dd3

08004254 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004262:	4b70      	ldr	r3, [pc, #448]	; (8004424 <SDMMC_GetCmdResp1+0x1d0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a70      	ldr	r2, [pc, #448]	; (8004428 <SDMMC_GetCmdResp1+0x1d4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0a5a      	lsrs	r2, r3, #9
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	61fa      	str	r2, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004284:	e0c9      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ef      	beq.n	8004276 <SDMMC_GetCmdResp1+0x22>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ea      	bne.n	8004276 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2204      	movs	r2, #4
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042b2:	2304      	movs	r3, #4
 80042b4:	e0b1      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0a6      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	22c5      	movs	r2, #197	; 0xc5
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fd17 	bl	8003d06 <SDIO_GetCommandResponse>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	4293      	cmp	r3, r2
 80042e0:	d001      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e099      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042e6:	2100      	movs	r1, #0
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff fd18 	bl	8003d1e <SDIO_GetResponse>
 80042ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <SDMMC_GetCmdResp1+0x1d8>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e08d      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	da02      	bge.n	800430a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004308:	e087      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	e080      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	e079      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004334:	e071      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004344:	e069      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004354:	e061      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004364:	e059      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004374:	e051      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004384:	e049      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004394:	e041      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80043a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a4:	e039      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80043b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b4:	e031      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80043c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043c4:	e029      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80043d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043d4:	e021      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80043e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043e4:	e019      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80043f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043f4:	e011      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004404:	e009      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004410:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004414:	e001      	b.n	800441a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000000 	.word	0x20000000
 8004428:	10624dd3 	.word	0x10624dd3
 800442c:	fdffe008 	.word	0xfdffe008

08004430 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004438:	4b1f      	ldr	r3, [pc, #124]	; (80044b8 <SDMMC_GetCmdResp2+0x88>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <SDMMC_GetCmdResp2+0x8c>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0a5b      	lsrs	r3, r3, #9
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	60fa      	str	r2, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800445c:	e026      	b.n	80044ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ef      	beq.n	800444e <SDMMC_GetCmdResp2+0x1e>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ea      	bne.n	800444e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800448a:	2304      	movs	r3, #4
 800448c:	e00e      	b.n	80044ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e003      	b.n	80044ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	22c5      	movs	r2, #197	; 0xc5
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3

080044c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <SDMMC_GetCmdResp3+0x70>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <SDMMC_GetCmdResp3+0x74>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0a5b      	lsrs	r3, r3, #9
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	60fa      	str	r2, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044ec:	e01b      	b.n	8004526 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <SDMMC_GetCmdResp3+0x1e>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ea      	bne.n	80044de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2204      	movs	r2, #4
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800451a:	2304      	movs	r3, #4
 800451c:	e003      	b.n	8004526 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	22c5      	movs	r2, #197	; 0xc5
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20000000 	.word	0x20000000
 8004534:	10624dd3 	.word	0x10624dd3

08004538 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	460b      	mov	r3, r1
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004546:	4b35      	ldr	r3, [pc, #212]	; (800461c <SDMMC_GetCmdResp6+0xe4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a35      	ldr	r2, [pc, #212]	; (8004620 <SDMMC_GetCmdResp6+0xe8>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	61fa      	str	r2, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800456a:	e052      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <SDMMC_GetCmdResp6+0x24>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ea      	bne.n	800455c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2204      	movs	r2, #4
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004598:	2304      	movs	r3, #4
 800459a:	e03a      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e02f      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fba7 	bl	8003d06 <SDIO_GetCommandResponse>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	7afb      	ldrb	r3, [r7, #11]
 80045be:	4293      	cmp	r3, r2
 80045c0:	d001      	beq.n	80045c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e025      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	22c5      	movs	r2, #197	; 0xc5
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045cc:	2100      	movs	r1, #0
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff fba5 	bl	8003d1e <SDIO_GetResponse>
 80045d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e011      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80045f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045fc:	e009      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460c:	e001      	b.n	8004612 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800460e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <SDMMC_GetCmdResp7+0x94>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a22      	ldr	r2, [pc, #136]	; (80046bc <SDMMC_GetCmdResp7+0x98>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0a5b      	lsrs	r3, r3, #9
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e5a      	subs	r2, r3, #1
 8004646:	60fa      	str	r2, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800464c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004650:	e02c      	b.n	80046ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0ef      	beq.n	8004642 <SDMMC_GetCmdResp7+0x1e>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ea      	bne.n	8004642 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2204      	movs	r2, #4
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800467e:	2304      	movs	r3, #4
 8004680:	e014      	b.n	80046ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004694:	2301      	movs	r3, #1
 8004696:	e009      	b.n	80046ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80046aa:	2300      	movs	r3, #0
  
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000000 	.word	0x20000000
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80046c4:	4904      	ldr	r1, [pc, #16]	; (80046d8 <MX_FATFS_Init+0x18>)
 80046c6:	4805      	ldr	r0, [pc, #20]	; (80046dc <MX_FATFS_Init+0x1c>)
 80046c8:	f000 f8e2 	bl	8004890 <FATFS_LinkDriver>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <MX_FATFS_Init+0x20>)
 80046d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000490 	.word	0x20000490
 80046dc:	08006f1c 	.word	0x08006f1c
 80046e0:	2000048c 	.word	0x2000048c

080046e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80046ee:	f000 f879 	bl	80047e4 <BSP_SD_IsDetected>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e012      	b.n	8004722 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <BSP_SD_Init+0x48>)
 80046fe:	f7fd fce3 	bl	80020c8 <HAL_SD_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800470c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004710:	4806      	ldr	r0, [pc, #24]	; (800472c <BSP_SD_Init+0x48>)
 8004712:	f7fe fabb 	bl	8002c8c <HAL_SD_ConfigWideBusOperation>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004720:	79fb      	ldrb	r3, [r7, #7]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000360 	.word	0x20000360

08004730 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	4806      	ldr	r0, [pc, #24]	; (8004768 <BSP_SD_ReadBlocks+0x38>)
 800474e:	f7fd fd69 	bl	8002224 <HAL_SD_ReadBlocks>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000360 	.word	0x20000360

0800476c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	4806      	ldr	r0, [pc, #24]	; (80047a4 <BSP_SD_WriteBlocks+0x38>)
 800478a:	f7fd ff29 	bl	80025e0 <HAL_SD_WriteBlocks>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000360 	.word	0x20000360

080047a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80047ac:	4805      	ldr	r0, [pc, #20]	; (80047c4 <BSP_SD_GetCardState+0x1c>)
 80047ae:	f7fe fb07 	bl	8002dc0 <HAL_SD_GetCardState>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
}
 80047be:	4618      	mov	r0, r3
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000360 	.word	0x20000360

080047c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <BSP_SD_GetCardInfo+0x18>)
 80047d4:	f7fe fa2e 	bl	8002c34 <HAL_SD_GetCardInfo>
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000360 	.word	0x20000360

080047e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80047ea:	2301      	movs	r3, #1
 80047ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	b2db      	uxtb	r3, r3
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <FATFS_LinkDriverEx+0x90>)
 8004814:	7a5b      	ldrb	r3, [r3, #9]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d831      	bhi.n	8004880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <FATFS_LinkDriverEx+0x90>)
 800481e:	7a5b      	ldrb	r3, [r3, #9]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <FATFS_LinkDriverEx+0x90>)
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <FATFS_LinkDriverEx+0x90>)
 800482c:	7a5b      	ldrb	r3, [r3, #9]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <FATFS_LinkDriverEx+0x90>)
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <FATFS_LinkDriverEx+0x90>)
 800483c:	7a5b      	ldrb	r3, [r3, #9]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <FATFS_LinkDriverEx+0x90>)
 8004844:	4413      	add	r3, r2
 8004846:	79fa      	ldrb	r2, [r7, #7]
 8004848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <FATFS_LinkDriverEx+0x90>)
 800484c:	7a5b      	ldrb	r3, [r3, #9]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	b2d1      	uxtb	r1, r2
 8004854:	4a0d      	ldr	r2, [pc, #52]	; (800488c <FATFS_LinkDriverEx+0x90>)
 8004856:	7251      	strb	r1, [r2, #9]
 8004858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800485a:	7dbb      	ldrb	r3, [r7, #22]
 800485c:	3330      	adds	r3, #48	; 0x30
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	3301      	adds	r3, #1
 8004868:	223a      	movs	r2, #58	; 0x3a
 800486a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3302      	adds	r3, #2
 8004870:	222f      	movs	r2, #47	; 0x2f
 8004872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3303      	adds	r3, #3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	20000494 	.word	0x20000494

08004890 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ffac 	bl	80047fc <FATFS_LinkDriverEx>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <SD_initialize+0x38>)
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80048c0:	f7ff ff10 	bl	80046e4 <BSP_SD_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <SD_initialize+0x38>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <SD_initialize+0x38>)
 80048d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <SD_initialize+0x38>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000009 	.word	0x20000009

080048ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <SD_status+0x38>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80048fc:	f7ff ff54 	bl	80047a8 <BSP_SD_GetCardState>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <SD_status+0x38>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <SD_status+0x38>)
 8004914:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8004916:	4b03      	ldr	r3, [pc, #12]	; (8004924 <SD_status+0x38>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000009 	.word	0x20000009

08004928 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <SD_read+0x54>)
 800493e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <SD_read+0x58>)
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	68b8      	ldr	r0, [r7, #8]
 8004948:	f7ff fef2 	bl	8004730 <BSP_SD_ReadBlocks>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10e      	bne.n	8004970 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004952:	e006      	b.n	8004962 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	613a      	str	r2, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <SD_read+0x3a>
      {
        return RES_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e007      	b.n	8004972 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004962:	f7ff ff21 	bl	80047a8 <BSP_SD_GetCardState>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f3      	bne.n	8004954 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	000186a0 	.word	0x000186a0
 8004980:	05f5e100 	.word	0x05f5e100

08004984 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <SD_write+0x54>)
 800499a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <SD_write+0x58>)
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f7ff fee2 	bl	800476c <BSP_SD_WriteBlocks>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80049ae:	e006      	b.n	80049be <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	613a      	str	r2, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <SD_write+0x3a>
      {
        return RES_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e007      	b.n	80049ce <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80049be:	f7ff fef3 	bl	80047a8 <BSP_SD_GetCardState>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f3      	bne.n	80049b0 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	000186a0 	.word	0x000186a0
 80049dc:	05f5e100 	.word	0x05f5e100

080049e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	; 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	603a      	str	r2, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
 80049ec:	460b      	mov	r3, r1
 80049ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <SD_ioctl+0xa8>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <SD_ioctl+0x28>
 8004a04:	2303      	movs	r3, #3
 8004a06:	e03b      	b.n	8004a80 <SD_ioctl+0xa0>
  
  switch (cmd)
 8004a08:	79bb      	ldrb	r3, [r7, #6]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d833      	bhi.n	8004a76 <SD_ioctl+0x96>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <SD_ioctl+0x34>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a2d 	.word	0x08004a2d
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a5f 	.word	0x08004a5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a2a:	e027      	b.n	8004a7c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fec9 	bl	80047c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a42:	e01b      	b.n	8004a7c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff febd 	bl	80047c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a5c:	e00e      	b.n	8004a7c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff feb0 	bl	80047c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8004a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a74:	e002      	b.n	8004a7c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8004a76:	2304      	movs	r3, #4
 8004a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8004a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	; 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000009 	.word	0x20000009

08004a8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9e:	2b84      	cmp	r3, #132	; 0x84
 8004aa0:	d005      	beq.n	8004aae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004aa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3303      	adds	r3, #3
 8004aac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004abe:	f000 fad9 	bl	8005074 <vTaskStartScheduler>
  
  return osOK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af04      	add	r7, sp, #16
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <osThreadCreate+0x54>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01c      	beq.n	8004b1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685c      	ldr	r4, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691e      	ldr	r6, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ffc9 	bl	8004a8c <makeFreeRtosPriority>
 8004afa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b04:	9202      	str	r2, [sp, #8]
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	9100      	str	r1, [sp, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4629      	mov	r1, r5
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 f8e8 	bl	8004ce6 <xTaskCreateStatic>
 8004b16:	4603      	mov	r3, r0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e01c      	b.n	8004b56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685c      	ldr	r4, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b28:	b29e      	uxth	r6, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ffab 	bl	8004a8c <makeFreeRtosPriority>
 8004b36:	4602      	mov	r2, r0
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	9200      	str	r2, [sp, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4632      	mov	r2, r6
 8004b44:	4629      	mov	r1, r5
 8004b46:	4620      	mov	r0, r4
 8004b48:	f000 f929 	bl	8004d9e <xTaskCreate>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <osDelay+0x16>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	e000      	b.n	8004b78 <osDelay+0x18>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fa47 	bl	800500c <vTaskDelay>
  
  return osOK;
 8004b7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f103 0208 	add.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f103 0208 	add.w	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f103 0208 	add.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d103      	bne.n	8004c44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e00c      	b.n	8004c5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3308      	adds	r3, #8
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e002      	b.n	8004c52 <vListInsert+0x2e>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d2f6      	bcs.n	8004c4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d103      	bne.n	8004cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1e5a      	subs	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08e      	sub	sp, #56	; 0x38
 8004cea:	af04      	add	r7, sp, #16
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xTaskCreateStatic+0x46>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61fb      	str	r3, [r7, #28]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d2c:	23b4      	movs	r3, #180	; 0xb4
 8004d2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2bb4      	cmp	r3, #180	; 0xb4
 8004d34:	d00a      	beq.n	8004d4c <xTaskCreateStatic+0x66>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61bb      	str	r3, [r7, #24]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01e      	beq.n	8004d90 <xTaskCreateStatic+0xaa>
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f850 	bl	8004e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8a:	f000 f8e3 	bl	8004f54 <prvAddNewTaskToReadyList>
 8004d8e:	e001      	b.n	8004d94 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d94:	697b      	ldr	r3, [r7, #20]
	}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	; 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b08c      	sub	sp, #48	; 0x30
 8004da2:	af04      	add	r7, sp, #16
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fe6c 	bl	8005a90 <pvPortMalloc>
 8004db8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00e      	beq.n	8004dde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004dc0:	20b4      	movs	r0, #180	; 0xb4
 8004dc2:	f000 fe65 	bl	8005a90 <pvPortMalloc>
 8004dc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004dd4:	e005      	b.n	8004de2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f000 ff1e 	bl	8005c18 <vPortFree>
 8004ddc:	e001      	b.n	8004de2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d017      	beq.n	8004e18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f80e 	bl	8004e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e0c:	69f8      	ldr	r0, [r7, #28]
 8004e0e:	f000 f8a1 	bl	8004f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e002      	b.n	8004e1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e40:	3b01      	subs	r3, #1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	617b      	str	r3, [r7, #20]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e012      	b.n	8004e9c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	7819      	ldrb	r1, [r3, #0]
 8004e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	3334      	adds	r3, #52	; 0x34
 8004e86:	460a      	mov	r2, r1
 8004e88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b0f      	cmp	r3, #15
 8004ea0:	d9e9      	bls.n	8004e76 <prvInitialiseNewTask+0x4e>
 8004ea2:	e000      	b.n	8004ea6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004ea4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d901      	bls.n	8004eb8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004eb4:	2306      	movs	r3, #6
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fe79 	bl	8004bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fe74 	bl	8004bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	f1c3 0207 	rsb	r2, r3, #7
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	334c      	adds	r3, #76	; 0x4c
 8004f08:	2260      	movs	r2, #96	; 0x60
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 ffd1 	bl	8005eb4 <memset>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <prvInitialiseNewTask+0x120>)
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <prvInitialiseNewTask+0x124>)
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <prvInitialiseNewTask+0x128>)
 8004f22:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	69b8      	ldr	r0, [r7, #24]
 8004f2a:	f000 fc01 	bl	8005730 <pxPortInitialiseStack>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08006f50 	.word	0x08006f50
 8004f4c:	08006f70 	.word	0x08006f70
 8004f50:	08006f30 	.word	0x08006f30

08004f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f5c:	f000 fcd6 	bl	800590c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <prvAddNewTaskToReadyList+0xa0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4a23      	ldr	r2, [pc, #140]	; (8004ff4 <prvAddNewTaskToReadyList+0xa0>)
 8004f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <prvAddNewTaskToReadyList+0xa4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <prvAddNewTaskToReadyList+0xa4>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <prvAddNewTaskToReadyList+0xa0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d110      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f80:	f000 fa8c 	bl	800549c <prvInitialiseTaskLists>
 8004f84:	e00d      	b.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <prvAddNewTaskToReadyList+0xa8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <prvAddNewTaskToReadyList+0xa4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d802      	bhi.n	8004fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <prvAddNewTaskToReadyList+0xa4>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <prvAddNewTaskToReadyList+0xac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <prvAddNewTaskToReadyList+0xac>)
 8004faa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <prvAddNewTaskToReadyList+0xb0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <prvAddNewTaskToReadyList+0xb0>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <prvAddNewTaskToReadyList+0xb4>)
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff fe02 	bl	8004bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fda:	f000 fcc7 	bl	800596c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <prvAddNewTaskToReadyList+0xa8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <prvAddNewTaskToReadyList+0xa4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200005a0 	.word	0x200005a0
 8004ff8:	200004a0 	.word	0x200004a0
 8004ffc:	200005ac 	.word	0x200005ac
 8005000:	200005bc 	.word	0x200005bc
 8005004:	200005a8 	.word	0x200005a8
 8005008:	200004a4 	.word	0x200004a4

0800500c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <vTaskDelay+0x60>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <vTaskDelay+0x30>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60bb      	str	r3, [r7, #8]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800503c:	f000 f884 	bl	8005148 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fb0e 	bl	8005664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005048:	f000 f88c 	bl	8005164 <xTaskResumeAll>
 800504c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <vTaskDelay+0x64>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200005c8 	.word	0x200005c8
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005082:	463a      	mov	r2, r7
 8005084:	1d39      	adds	r1, r7, #4
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb f93e 	bl	800030c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	9202      	str	r2, [sp, #8]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	460a      	mov	r2, r1
 80050a2:	4921      	ldr	r1, [pc, #132]	; (8005128 <vTaskStartScheduler+0xb4>)
 80050a4:	4821      	ldr	r0, [pc, #132]	; (800512c <vTaskStartScheduler+0xb8>)
 80050a6:	f7ff fe1e 	bl	8004ce6 <xTaskCreateStatic>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a20      	ldr	r2, [pc, #128]	; (8005130 <vTaskStartScheduler+0xbc>)
 80050ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050b0:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <vTaskStartScheduler+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d11b      	bne.n	8005100 <vTaskStartScheduler+0x8c>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	613b      	str	r3, [r7, #16]
}
 80050da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <vTaskStartScheduler+0xc0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	334c      	adds	r3, #76	; 0x4c
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <vTaskStartScheduler+0xc4>)
 80050e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <vTaskStartScheduler+0xc8>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <vTaskStartScheduler+0xcc>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <vTaskStartScheduler+0xd0>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050fa:	f000 fb95 	bl	8005828 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050fe:	e00e      	b.n	800511e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d10a      	bne.n	800511e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <vTaskStartScheduler+0xa8>
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	08006914 	.word	0x08006914
 800512c:	08005479 	.word	0x08005479
 8005130:	200005c4 	.word	0x200005c4
 8005134:	200004a0 	.word	0x200004a0
 8005138:	20000010 	.word	0x20000010
 800513c:	200005c0 	.word	0x200005c0
 8005140:	200005ac 	.word	0x200005ac
 8005144:	200005a4 	.word	0x200005a4

08005148 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <vTaskSuspendAll+0x18>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	4a03      	ldr	r2, [pc, #12]	; (8005160 <vTaskSuspendAll+0x18>)
 8005154:	6013      	str	r3, [r2, #0]
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	200005c8 	.word	0x200005c8

08005164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005172:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <xTaskResumeAll+0xfc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xTaskResumeAll+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005190:	f000 fbbc 	bl	800590c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005194:	4b32      	ldr	r3, [pc, #200]	; (8005260 <xTaskResumeAll+0xfc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3b01      	subs	r3, #1
 800519a:	4a31      	ldr	r2, [pc, #196]	; (8005260 <xTaskResumeAll+0xfc>)
 800519c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <xTaskResumeAll+0xfc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d155      	bne.n	8005252 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <xTaskResumeAll+0x100>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d051      	beq.n	8005252 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ae:	e02e      	b.n	800520e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051b0:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <xTaskResumeAll+0x104>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fd69 	bl	8004c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fd64 	bl	8004c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	2201      	movs	r2, #1
 80051d2:	409a      	lsls	r2, r3
 80051d4:	4b25      	ldr	r3, [pc, #148]	; (800526c <xTaskResumeAll+0x108>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <xTaskResumeAll+0x108>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <xTaskResumeAll+0x10c>)
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7ff fcf2 	bl	8004bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <xTaskResumeAll+0x110>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005208:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <xTaskResumeAll+0x114>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <xTaskResumeAll+0x104>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1cc      	bne.n	80051b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800521c:	f000 f9e0 	bl	80055e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005220:	4b16      	ldr	r3, [pc, #88]	; (800527c <xTaskResumeAll+0x118>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800522c:	f000 f828 	bl	8005280 <xTaskIncrementTick>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <xTaskResumeAll+0x114>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3b01      	subs	r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f1      	bne.n	800522c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <xTaskResumeAll+0x118>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <xTaskResumeAll+0x114>)
 8005250:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005252:	f000 fb8b 	bl	800596c <vPortExitCritical>

	return xAlreadyYielded;
 8005256:	687b      	ldr	r3, [r7, #4]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200005c8 	.word	0x200005c8
 8005264:	200005a0 	.word	0x200005a0
 8005268:	20000560 	.word	0x20000560
 800526c:	200005a8 	.word	0x200005a8
 8005270:	200004a4 	.word	0x200004a4
 8005274:	200004a0 	.word	0x200004a0
 8005278:	200005b4 	.word	0x200005b4
 800527c:	200005b0 	.word	0x200005b0

08005280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800528a:	4b41      	ldr	r3, [pc, #260]	; (8005390 <xTaskIncrementTick+0x110>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d174      	bne.n	800537c <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005292:	4b40      	ldr	r3, [pc, #256]	; (8005394 <xTaskIncrementTick+0x114>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800529a:	4a3e      	ldr	r2, [pc, #248]	; (8005394 <xTaskIncrementTick+0x114>)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d120      	bne.n	80052e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052a6:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <xTaskIncrementTick+0x118>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <xTaskIncrementTick+0x46>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	603b      	str	r3, [r7, #0]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xTaskIncrementTick+0x44>
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <xTaskIncrementTick+0x118>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	4b33      	ldr	r3, [pc, #204]	; (800539c <xTaskIncrementTick+0x11c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a31      	ldr	r2, [pc, #196]	; (8005398 <xTaskIncrementTick+0x118>)
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4a31      	ldr	r2, [pc, #196]	; (800539c <xTaskIncrementTick+0x11c>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <xTaskIncrementTick+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <xTaskIncrementTick+0x120>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	f000 f97c 	bl	80055e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <xTaskIncrementTick+0x124>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d349      	bcc.n	8005386 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <xTaskIncrementTick+0x118>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <xTaskIncrementTick+0x80>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <xTaskIncrementTick+0x82>
 8005300:	2300      	movs	r3, #0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <xTaskIncrementTick+0x124>)
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	601a      	str	r2, [r3, #0]
					break;
 800530e:	e03a      	b.n	8005386 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <xTaskIncrementTick+0x118>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d203      	bcs.n	8005330 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005328:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <xTaskIncrementTick+0x124>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6013      	str	r3, [r2, #0]
						break;
 800532e:	e02a      	b.n	8005386 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fcad 	bl	8004c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	3318      	adds	r3, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fca4 	bl	8004c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <xTaskIncrementTick+0x128>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4313      	orrs	r3, r2
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <xTaskIncrementTick+0x128>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <xTaskIncrementTick+0x12c>)
 800536c:	441a      	add	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3304      	adds	r3, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f7ff fc32 	bl	8004bde <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800537a:	e7ba      	b.n	80052f2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <xTaskIncrementTick+0x130>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <xTaskIncrementTick+0x130>)
 8005384:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005386:	697b      	ldr	r3, [r7, #20]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	200005c8 	.word	0x200005c8
 8005394:	200005a4 	.word	0x200005a4
 8005398:	20000558 	.word	0x20000558
 800539c:	2000055c 	.word	0x2000055c
 80053a0:	200005b8 	.word	0x200005b8
 80053a4:	200005c0 	.word	0x200005c0
 80053a8:	200005a8 	.word	0x200005a8
 80053ac:	200004a4 	.word	0x200004a4
 80053b0:	200005b0 	.word	0x200005b0

080053b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ba:	4b29      	ldr	r3, [pc, #164]	; (8005460 <vTaskSwitchContext+0xac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c2:	4b28      	ldr	r3, [pc, #160]	; (8005464 <vTaskSwitchContext+0xb0>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053c8:	e044      	b.n	8005454 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80053ca:	4b26      	ldr	r3, [pc, #152]	; (8005464 <vTaskSwitchContext+0xb0>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80053d0:	4b25      	ldr	r3, [pc, #148]	; (8005468 <vTaskSwitchContext+0xb4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f1c3 031f 	rsb	r3, r3, #31
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	4921      	ldr	r1, [pc, #132]	; (800546c <vTaskSwitchContext+0xb8>)
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <vTaskSwitchContext+0x5c>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	607b      	str	r3, [r7, #4]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <vTaskSwitchContext+0x5a>
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <vTaskSwitchContext+0xb8>)
 800541c:	4413      	add	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	3308      	adds	r3, #8
 8005432:	429a      	cmp	r2, r3
 8005434:	d104      	bne.n	8005440 <vTaskSwitchContext+0x8c>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <vTaskSwitchContext+0xbc>)
 8005448:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <vTaskSwitchContext+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	334c      	adds	r3, #76	; 0x4c
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <vTaskSwitchContext+0xc0>)
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	200005c8 	.word	0x200005c8
 8005464:	200005b4 	.word	0x200005b4
 8005468:	200005a8 	.word	0x200005a8
 800546c:	200004a4 	.word	0x200004a4
 8005470:	200004a0 	.word	0x200004a0
 8005474:	20000010 	.word	0x20000010

08005478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005480:	f000 f84c 	bl	800551c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <prvIdleTask+0x20>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005494:	e7f4      	b.n	8005480 <prvIdleTask+0x8>
 8005496:	bf00      	nop
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e00c      	b.n	80054c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <prvInitialiseTaskLists+0x60>)
 80054b4:	4413      	add	r3, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fb66 	bl	8004b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3301      	adds	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d9ef      	bls.n	80054a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054c8:	480d      	ldr	r0, [pc, #52]	; (8005500 <prvInitialiseTaskLists+0x64>)
 80054ca:	f7ff fb5d 	bl	8004b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ce:	480d      	ldr	r0, [pc, #52]	; (8005504 <prvInitialiseTaskLists+0x68>)
 80054d0:	f7ff fb5a 	bl	8004b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054d4:	480c      	ldr	r0, [pc, #48]	; (8005508 <prvInitialiseTaskLists+0x6c>)
 80054d6:	f7ff fb57 	bl	8004b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054da:	480c      	ldr	r0, [pc, #48]	; (800550c <prvInitialiseTaskLists+0x70>)
 80054dc:	f7ff fb54 	bl	8004b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054e0:	480b      	ldr	r0, [pc, #44]	; (8005510 <prvInitialiseTaskLists+0x74>)
 80054e2:	f7ff fb51 	bl	8004b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <prvInitialiseTaskLists+0x78>)
 80054e8:	4a05      	ldr	r2, [pc, #20]	; (8005500 <prvInitialiseTaskLists+0x64>)
 80054ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <prvInitialiseTaskLists+0x7c>)
 80054ee:	4a05      	ldr	r2, [pc, #20]	; (8005504 <prvInitialiseTaskLists+0x68>)
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	200004a4 	.word	0x200004a4
 8005500:	20000530 	.word	0x20000530
 8005504:	20000544 	.word	0x20000544
 8005508:	20000560 	.word	0x20000560
 800550c:	20000574 	.word	0x20000574
 8005510:	2000058c 	.word	0x2000058c
 8005514:	20000558 	.word	0x20000558
 8005518:	2000055c 	.word	0x2000055c

0800551c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005522:	e019      	b.n	8005558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005524:	f000 f9f2 	bl	800590c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <prvCheckTasksWaitingTermination+0x50>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fbad 	bl	8004c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <prvCheckTasksWaitingTermination+0x54>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a0b      	ldr	r2, [pc, #44]	; (8005570 <prvCheckTasksWaitingTermination+0x54>)
 8005542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <prvCheckTasksWaitingTermination+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3b01      	subs	r3, #1
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800554c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800554e:	f000 fa0d 	bl	800596c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f810 	bl	8005578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e1      	bne.n	8005524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000574 	.word	0x20000574
 8005570:	200005a0 	.word	0x200005a0
 8005574:	20000588 	.word	0x20000588

08005578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	334c      	adds	r3, #76	; 0x4c
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fd3f 	bl	8006008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fb3d 	bl	8005c18 <vPortFree>
				vPortFree( pxTCB );
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fb3a 	bl	8005c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055a4:	e018      	b.n	80055d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d103      	bne.n	80055b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb31 	bl	8005c18 <vPortFree>
	}
 80055b6:	e00f      	b.n	80055d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d00a      	beq.n	80055d8 <prvDeleteTCB+0x60>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <prvDeleteTCB+0x5e>
	}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <prvResetNextTaskUnblockTime+0x40>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <prvResetNextTaskUnblockTime+0x14>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <prvResetNextTaskUnblockTime+0x16>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <prvResetNextTaskUnblockTime+0x44>)
 80055fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005600:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005602:	e008      	b.n	8005616 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <prvResetNextTaskUnblockTime+0x40>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4a04      	ldr	r2, [pc, #16]	; (8005624 <prvResetNextTaskUnblockTime+0x44>)
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	20000558 	.word	0x20000558
 8005624:	200005c0 	.word	0x200005c0

08005628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <xTaskGetSchedulerState+0x34>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005636:	2301      	movs	r3, #1
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	e008      	b.n	800564e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <xTaskGetSchedulerState+0x38>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005644:	2302      	movs	r3, #2
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	e001      	b.n	800564e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800564e:	687b      	ldr	r3, [r7, #4]
	}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	200005ac 	.word	0x200005ac
 8005660:	200005c8 	.word	0x200005c8

08005664 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800566e:	4b29      	ldr	r3, [pc, #164]	; (8005714 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005674:	4b28      	ldr	r3, [pc, #160]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3304      	adds	r3, #4
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fb0a 	bl	8004c94 <uxListRemove>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005686:	4b24      	ldr	r3, [pc, #144]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2201      	movs	r2, #1
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43da      	mvns	r2, r3
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4013      	ands	r3, r2
 800569a:	4a20      	ldr	r2, [pc, #128]	; (800571c <prvAddCurrentTaskToDelayedList+0xb8>)
 800569c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d10a      	bne.n	80056bc <prvAddCurrentTaskToDelayedList+0x58>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	481a      	ldr	r0, [pc, #104]	; (8005720 <prvAddCurrentTaskToDelayedList+0xbc>)
 80056b6:	f7ff fa92 	bl	8004bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056ba:	e026      	b.n	800570a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d209      	bcs.n	80056e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3304      	adds	r3, #4
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f7ff fa9f 	bl	8004c24 <vListInsert>
}
 80056e6:	e010      	b.n	800570a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <prvAddCurrentTaskToDelayedList+0xc4>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7ff fa95 	bl	8004c24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056fa:	4b0c      	ldr	r3, [pc, #48]	; (800572c <prvAddCurrentTaskToDelayedList+0xc8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d202      	bcs.n	800570a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005704:	4a09      	ldr	r2, [pc, #36]	; (800572c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6013      	str	r3, [r2, #0]
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200005a4 	.word	0x200005a4
 8005718:	200004a0 	.word	0x200004a0
 800571c:	200005a8 	.word	0x200005a8
 8005720:	2000058c 	.word	0x2000058c
 8005724:	2000055c 	.word	0x2000055c
 8005728:	20000558 	.word	0x20000558
 800572c:	200005c0 	.word	0x200005c0

08005730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b04      	subs	r3, #4
 8005740:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b04      	subs	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3b04      	subs	r3, #4
 800575e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <pxPortInitialiseStack+0x54>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b14      	subs	r3, #20
 800576a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3b20      	subs	r3, #32
 8005776:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005778:	68fb      	ldr	r3, [r7, #12]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	08005789 	.word	0x08005789

08005788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <prvTaskExitError+0x54>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d00a      	beq.n	80057b2 <prvTaskExitError+0x2a>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <prvTaskExitError+0x28>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60bb      	str	r3, [r7, #8]
}
 80057c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057c6:	bf00      	nop
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0fc      	beq.n	80057c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000000c 	.word	0x2000000c

080057e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <pxCurrentTCBConst2>)
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057ea:	f380 8809 	msr	PSP, r0
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8811 	msr	BASEPRI, r0
 80057fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80057fe:	4770      	bx	lr

08005800 <pxCurrentTCBConst2>:
 8005800:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005808:	4806      	ldr	r0, [pc, #24]	; (8005824 <prvPortStartFirstTask+0x1c>)
 800580a:	6800      	ldr	r0, [r0, #0]
 800580c:	6800      	ldr	r0, [r0, #0]
 800580e:	f380 8808 	msr	MSP, r0
 8005812:	b662      	cpsie	i
 8005814:	b661      	cpsie	f
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	df00      	svc	0
 8005820:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005822:	bf00      	nop
 8005824:	e000ed08 	.word	0xe000ed08

08005828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800582e:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <xPortStartScheduler+0xd0>)
 8005830:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	22ff      	movs	r2, #255	; 0xff
 800583e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <xPortStartScheduler+0xd4>)
 8005854:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005856:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <xPortStartScheduler+0xd8>)
 8005858:	2207      	movs	r2, #7
 800585a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800585c:	e009      	b.n	8005872 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800585e:	4b28      	ldr	r3, [pc, #160]	; (8005900 <xPortStartScheduler+0xd8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <xPortStartScheduler+0xd8>)
 8005866:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b80      	cmp	r3, #128	; 0x80
 800587c:	d0ef      	beq.n	800585e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <xPortStartScheduler+0xd8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1c3 0307 	rsb	r3, r3, #7
 8005886:	2b04      	cmp	r3, #4
 8005888:	d00a      	beq.n	80058a0 <xPortStartScheduler+0x78>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	60bb      	str	r3, [r7, #8]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058a0:	4b17      	ldr	r3, [pc, #92]	; (8005900 <xPortStartScheduler+0xd8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	4a16      	ldr	r2, [pc, #88]	; (8005900 <xPortStartScheduler+0xd8>)
 80058a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <xPortStartScheduler+0xd8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058b2:	4a13      	ldr	r2, [pc, #76]	; (8005900 <xPortStartScheduler+0xd8>)
 80058b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <xPortStartScheduler+0xdc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a10      	ldr	r2, [pc, #64]	; (8005904 <xPortStartScheduler+0xdc>)
 80058c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <xPortStartScheduler+0xdc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <xPortStartScheduler+0xdc>)
 80058d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058d6:	f000 f8b9 	bl	8005a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <xPortStartScheduler+0xe0>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058e0:	f7ff ff92 	bl	8005808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058e4:	f7ff fd66 	bl	80053b4 <vTaskSwitchContext>
	prvTaskExitError();
 80058e8:	f7ff ff4e 	bl	8005788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	e000e400 	.word	0xe000e400
 80058fc:	200005cc 	.word	0x200005cc
 8005900:	200005d0 	.word	0x200005d0
 8005904:	e000ed20 	.word	0xe000ed20
 8005908:	2000000c 	.word	0x2000000c

0800590c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	607b      	str	r3, [r7, #4]
}
 8005924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <vPortEnterCritical+0x58>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <vPortEnterCritical+0x58>)
 800592e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <vPortEnterCritical+0x58>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10f      	bne.n	8005958 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <vPortEnterCritical+0x5c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <vPortEnterCritical+0x4c>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	603b      	str	r3, [r7, #0]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortEnterCritical+0x4a>
	}
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <vPortExitCritical+0x4c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <vPortExitCritical+0x24>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	607b      	str	r3, [r7, #4]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <vPortExitCritical+0x4c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <vPortExitCritical+0x4c>)
 8005998:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <vPortExitCritical+0x4c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <vPortExitCritical+0x42>
 80059a2:	2300      	movs	r3, #0
 80059a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	2000000c 	.word	0x2000000c
 80059bc:	00000000 	.word	0x00000000

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059d0:	6010      	str	r0, [r2, #0]
 80059d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80059d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059da:	f380 8811 	msr	BASEPRI, r0
 80059de:	f7ff fce9 	bl	80053b4 <vTaskSwitchContext>
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8811 	msr	BASEPRI, r0
 80059ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	6808      	ldr	r0, [r1, #0]
 80059f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059f6:	f380 8809 	msr	PSP, r0
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	4770      	bx	lr

08005a00 <pxCurrentTCBConst>:
 8005a00:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a22:	f7ff fc2d 	bl	8005280 <xTaskIncrementTick>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <xPortSysTickHandler+0x40>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <vPortSetupTimerInterrupt+0x30>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <vPortSetupTimerInterrupt+0x38>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <vPortSetupTimerInterrupt+0x3c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <vPortSetupTimerInterrupt+0x40>)
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6e:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <vPortSetupTimerInterrupt+0x30>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	e000e010 	.word	0xe000e010
 8005a80:	e000e018 	.word	0xe000e018
 8005a84:	20000000 	.word	0x20000000
 8005a88:	10624dd3 	.word	0x10624dd3
 8005a8c:	e000e014 	.word	0xe000e014

08005a90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a9c:	f7ff fb54 	bl	8005148 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa0:	4b58      	ldr	r3, [pc, #352]	; (8005c04 <pvPortMalloc+0x174>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aa8:	f000 f910 	bl	8005ccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005aac:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <pvPortMalloc+0x178>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 808e 	bne.w	8005bd6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01d      	beq.n	8005afc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d014      	beq.n	8005afc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f023 0307 	bic.w	r3, r3, #7
 8005ad8:	3308      	adds	r3, #8
 8005ada:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <pvPortMalloc+0x6c>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	617b      	str	r3, [r7, #20]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d069      	beq.n	8005bd6 <pvPortMalloc+0x146>
 8005b02:	4b42      	ldr	r3, [pc, #264]	; (8005c0c <pvPortMalloc+0x17c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d864      	bhi.n	8005bd6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b0c:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <pvPortMalloc+0x180>)
 8005b0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b10:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <pvPortMalloc+0x180>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b16:	e004      	b.n	8005b22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d903      	bls.n	8005b34 <pvPortMalloc+0xa4>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f1      	bne.n	8005b18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b34:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <pvPortMalloc+0x174>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d04b      	beq.n	8005bd6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2208      	movs	r2, #8
 8005b44:	4413      	add	r3, r2
 8005b46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	2308      	movs	r3, #8
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d91f      	bls.n	8005ba0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <pvPortMalloc+0xf8>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	613b      	str	r3, [r7, #16]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f000 f8f8 	bl	8005d90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <pvPortMalloc+0x17c>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <pvPortMalloc+0x17c>)
 8005bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <pvPortMalloc+0x17c>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <pvPortMalloc+0x184>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <pvPortMalloc+0x17c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <pvPortMalloc+0x184>)
 8005bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <pvPortMalloc+0x178>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd6:	f7ff fac5 	bl	8005164 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <pvPortMalloc+0x16a>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <pvPortMalloc+0x168>
	return pvReturn;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3728      	adds	r7, #40	; 0x28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200011dc 	.word	0x200011dc
 8005c08:	200011e8 	.word	0x200011e8
 8005c0c:	200011e0 	.word	0x200011e0
 8005c10:	200011d4 	.word	0x200011d4
 8005c14:	200011e4 	.word	0x200011e4

08005c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d048      	beq.n	8005cbc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <vPortFree+0xac>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <vPortFree+0x44>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <vPortFree+0x62>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60bb      	str	r3, [r7, #8]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <vPortFree+0xac>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d019      	beq.n	8005cbc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d115      	bne.n	8005cbc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortFree+0xac>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ca0:	f7ff fa52 	bl	8005148 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <vPortFree+0xb0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	4a06      	ldr	r2, [pc, #24]	; (8005cc8 <vPortFree+0xb0>)
 8005cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cb2:	6938      	ldr	r0, [r7, #16]
 8005cb4:	f000 f86c 	bl	8005d90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cb8:	f7ff fa54 	bl	8005164 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200011e8 	.word	0x200011e8
 8005cc8:	200011e0 	.word	0x200011e0

08005ccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <prvHeapInit+0xac>)
 8005cda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3307      	adds	r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <prvHeapInit+0xac>)
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <prvHeapInit+0xb0>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <prvHeapInit+0xb0>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <prvHeapInit+0xb4>)
 8005d2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <prvHeapInit+0xb4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <prvHeapInit+0xb4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <prvHeapInit+0xb4>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <prvHeapInit+0xb8>)
 8005d5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <prvHeapInit+0xbc>)
 8005d62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <prvHeapInit+0xc0>)
 8005d66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	200005d4 	.word	0x200005d4
 8005d7c:	200011d4 	.word	0x200011d4
 8005d80:	200011dc 	.word	0x200011dc
 8005d84:	200011e4 	.word	0x200011e4
 8005d88:	200011e0 	.word	0x200011e0
 8005d8c:	200011e8 	.word	0x200011e8

08005d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <prvInsertBlockIntoFreeList+0xa8>)
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e002      	b.n	8005da4 <prvInsertBlockIntoFreeList+0x14>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d8f7      	bhi.n	8005d9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4413      	add	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d108      	bne.n	8005dd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	441a      	add	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	441a      	add	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d118      	bne.n	8005e18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <prvInsertBlockIntoFreeList+0xac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d00d      	beq.n	8005e0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e008      	b.n	8005e20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvInsertBlockIntoFreeList+0xac>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e003      	b.n	8005e20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d002      	beq.n	8005e2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	200011d4 	.word	0x200011d4
 8005e3c:	200011dc 	.word	0x200011dc

08005e40 <__errno>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <__errno+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000010 	.word	0x20000010

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	2600      	movs	r6, #0
 8005e50:	4d0c      	ldr	r5, [pc, #48]	; (8005e84 <__libc_init_array+0x38>)
 8005e52:	4c0d      	ldr	r4, [pc, #52]	; (8005e88 <__libc_init_array+0x3c>)
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	f000 fd06 	bl	800686c <_init>
 8005e60:	2600      	movs	r6, #0
 8005e62:	4d0a      	ldr	r5, [pc, #40]	; (8005e8c <__libc_init_array+0x40>)
 8005e64:	4c0a      	ldr	r4, [pc, #40]	; (8005e90 <__libc_init_array+0x44>)
 8005e66:	1b64      	subs	r4, r4, r5
 8005e68:	10a4      	asrs	r4, r4, #2
 8005e6a:	42a6      	cmp	r6, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e74:	4798      	blx	r3
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7e:	4798      	blx	r3
 8005e80:	3601      	adds	r6, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08006fc4 	.word	0x08006fc4
 8005e88:	08006fc4 	.word	0x08006fc4
 8005e8c:	08006fc4 	.word	0x08006fc4
 8005e90:	08006fc8 	.word	0x08006fc8

08005e94 <__retarget_lock_acquire_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <__retarget_lock_release_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <memcpy>:
 8005e98:	440a      	add	r2, r1
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ea0:	d100      	bne.n	8005ea4 <memcpy+0xc>
 8005ea2:	4770      	bx	lr
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb0:	d1f9      	bne.n	8005ea6 <memcpy+0xe>
 8005eb2:	bd10      	pop	{r4, pc}

08005eb4 <memset>:
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	4402      	add	r2, r0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d100      	bne.n	8005ebe <memset+0xa>
 8005ebc:	4770      	bx	lr
 8005ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec2:	e7f9      	b.n	8005eb8 <memset+0x4>

08005ec4 <sbrk_aligned>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	4e0e      	ldr	r6, [pc, #56]	; (8005f00 <sbrk_aligned+0x3c>)
 8005ec8:	460c      	mov	r4, r1
 8005eca:	6831      	ldr	r1, [r6, #0]
 8005ecc:	4605      	mov	r5, r0
 8005ece:	b911      	cbnz	r1, 8005ed6 <sbrk_aligned+0x12>
 8005ed0:	f000 f8f6 	bl	80060c0 <_sbrk_r>
 8005ed4:	6030      	str	r0, [r6, #0]
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 f8f1 	bl	80060c0 <_sbrk_r>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d00a      	beq.n	8005ef8 <sbrk_aligned+0x34>
 8005ee2:	1cc4      	adds	r4, r0, #3
 8005ee4:	f024 0403 	bic.w	r4, r4, #3
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d007      	beq.n	8005efc <sbrk_aligned+0x38>
 8005eec:	1a21      	subs	r1, r4, r0
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 f8e6 	bl	80060c0 <_sbrk_r>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d101      	bne.n	8005efc <sbrk_aligned+0x38>
 8005ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8005efc:	4620      	mov	r0, r4
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	200011f4 	.word	0x200011f4

08005f04 <_malloc_r>:
 8005f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f08:	1ccd      	adds	r5, r1, #3
 8005f0a:	f025 0503 	bic.w	r5, r5, #3
 8005f0e:	3508      	adds	r5, #8
 8005f10:	2d0c      	cmp	r5, #12
 8005f12:	bf38      	it	cc
 8005f14:	250c      	movcc	r5, #12
 8005f16:	2d00      	cmp	r5, #0
 8005f18:	4607      	mov	r7, r0
 8005f1a:	db01      	blt.n	8005f20 <_malloc_r+0x1c>
 8005f1c:	42a9      	cmp	r1, r5
 8005f1e:	d905      	bls.n	8005f2c <_malloc_r+0x28>
 8005f20:	230c      	movs	r3, #12
 8005f22:	2600      	movs	r6, #0
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4630      	mov	r0, r6
 8005f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f2c:	4e2e      	ldr	r6, [pc, #184]	; (8005fe8 <_malloc_r+0xe4>)
 8005f2e:	f000 f8f7 	bl	8006120 <__malloc_lock>
 8005f32:	6833      	ldr	r3, [r6, #0]
 8005f34:	461c      	mov	r4, r3
 8005f36:	bb34      	cbnz	r4, 8005f86 <_malloc_r+0x82>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	f7ff ffc2 	bl	8005ec4 <sbrk_aligned>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	4604      	mov	r4, r0
 8005f44:	d14d      	bne.n	8005fe2 <_malloc_r+0xde>
 8005f46:	6834      	ldr	r4, [r6, #0]
 8005f48:	4626      	mov	r6, r4
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d140      	bne.n	8005fd0 <_malloc_r+0xcc>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	4631      	mov	r1, r6
 8005f52:	4638      	mov	r0, r7
 8005f54:	eb04 0803 	add.w	r8, r4, r3
 8005f58:	f000 f8b2 	bl	80060c0 <_sbrk_r>
 8005f5c:	4580      	cmp	r8, r0
 8005f5e:	d13a      	bne.n	8005fd6 <_malloc_r+0xd2>
 8005f60:	6821      	ldr	r1, [r4, #0]
 8005f62:	3503      	adds	r5, #3
 8005f64:	1a6d      	subs	r5, r5, r1
 8005f66:	f025 0503 	bic.w	r5, r5, #3
 8005f6a:	3508      	adds	r5, #8
 8005f6c:	2d0c      	cmp	r5, #12
 8005f6e:	bf38      	it	cc
 8005f70:	250c      	movcc	r5, #12
 8005f72:	4638      	mov	r0, r7
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7ff ffa5 	bl	8005ec4 <sbrk_aligned>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d02b      	beq.n	8005fd6 <_malloc_r+0xd2>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	442b      	add	r3, r5
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	e00e      	b.n	8005fa4 <_malloc_r+0xa0>
 8005f86:	6822      	ldr	r2, [r4, #0]
 8005f88:	1b52      	subs	r2, r2, r5
 8005f8a:	d41e      	bmi.n	8005fca <_malloc_r+0xc6>
 8005f8c:	2a0b      	cmp	r2, #11
 8005f8e:	d916      	bls.n	8005fbe <_malloc_r+0xba>
 8005f90:	1961      	adds	r1, r4, r5
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	6025      	str	r5, [r4, #0]
 8005f96:	bf18      	it	ne
 8005f98:	6059      	strne	r1, [r3, #4]
 8005f9a:	6863      	ldr	r3, [r4, #4]
 8005f9c:	bf08      	it	eq
 8005f9e:	6031      	streq	r1, [r6, #0]
 8005fa0:	5162      	str	r2, [r4, r5]
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f104 060b 	add.w	r6, r4, #11
 8005faa:	f000 f8bf 	bl	800612c <__malloc_unlock>
 8005fae:	f026 0607 	bic.w	r6, r6, #7
 8005fb2:	1d23      	adds	r3, r4, #4
 8005fb4:	1af2      	subs	r2, r6, r3
 8005fb6:	d0b6      	beq.n	8005f26 <_malloc_r+0x22>
 8005fb8:	1b9b      	subs	r3, r3, r6
 8005fba:	50a3      	str	r3, [r4, r2]
 8005fbc:	e7b3      	b.n	8005f26 <_malloc_r+0x22>
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	bf0c      	ite	eq
 8005fc4:	6032      	streq	r2, [r6, #0]
 8005fc6:	605a      	strne	r2, [r3, #4]
 8005fc8:	e7ec      	b.n	8005fa4 <_malloc_r+0xa0>
 8005fca:	4623      	mov	r3, r4
 8005fcc:	6864      	ldr	r4, [r4, #4]
 8005fce:	e7b2      	b.n	8005f36 <_malloc_r+0x32>
 8005fd0:	4634      	mov	r4, r6
 8005fd2:	6876      	ldr	r6, [r6, #4]
 8005fd4:	e7b9      	b.n	8005f4a <_malloc_r+0x46>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	4638      	mov	r0, r7
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	f000 f8a6 	bl	800612c <__malloc_unlock>
 8005fe0:	e7a1      	b.n	8005f26 <_malloc_r+0x22>
 8005fe2:	6025      	str	r5, [r4, #0]
 8005fe4:	e7de      	b.n	8005fa4 <_malloc_r+0xa0>
 8005fe6:	bf00      	nop
 8005fe8:	200011f0 	.word	0x200011f0

08005fec <cleanup_glue>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	460c      	mov	r4, r1
 8005ff0:	6809      	ldr	r1, [r1, #0]
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b109      	cbz	r1, 8005ffa <cleanup_glue+0xe>
 8005ff6:	f7ff fff9 	bl	8005fec <cleanup_glue>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006002:	f000 b899 	b.w	8006138 <_free_r>
	...

08006008 <_reclaim_reent>:
 8006008:	4b2c      	ldr	r3, [pc, #176]	; (80060bc <_reclaim_reent+0xb4>)
 800600a:	b570      	push	{r4, r5, r6, lr}
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4604      	mov	r4, r0
 8006010:	4283      	cmp	r3, r0
 8006012:	d051      	beq.n	80060b8 <_reclaim_reent+0xb0>
 8006014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006016:	b143      	cbz	r3, 800602a <_reclaim_reent+0x22>
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d14a      	bne.n	80060b4 <_reclaim_reent+0xac>
 800601e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	b111      	cbz	r1, 800602a <_reclaim_reent+0x22>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f887 	bl	8006138 <_free_r>
 800602a:	6961      	ldr	r1, [r4, #20]
 800602c:	b111      	cbz	r1, 8006034 <_reclaim_reent+0x2c>
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f882 	bl	8006138 <_free_r>
 8006034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006036:	b111      	cbz	r1, 800603e <_reclaim_reent+0x36>
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f87d 	bl	8006138 <_free_r>
 800603e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006040:	b111      	cbz	r1, 8006048 <_reclaim_reent+0x40>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f878 	bl	8006138 <_free_r>
 8006048:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800604a:	b111      	cbz	r1, 8006052 <_reclaim_reent+0x4a>
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f873 	bl	8006138 <_free_r>
 8006052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006054:	b111      	cbz	r1, 800605c <_reclaim_reent+0x54>
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f86e 	bl	8006138 <_free_r>
 800605c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800605e:	b111      	cbz	r1, 8006066 <_reclaim_reent+0x5e>
 8006060:	4620      	mov	r0, r4
 8006062:	f000 f869 	bl	8006138 <_free_r>
 8006066:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006068:	b111      	cbz	r1, 8006070 <_reclaim_reent+0x68>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f864 	bl	8006138 <_free_r>
 8006070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006072:	b111      	cbz	r1, 800607a <_reclaim_reent+0x72>
 8006074:	4620      	mov	r0, r4
 8006076:	f000 f85f 	bl	8006138 <_free_r>
 800607a:	69a3      	ldr	r3, [r4, #24]
 800607c:	b1e3      	cbz	r3, 80060b8 <_reclaim_reent+0xb0>
 800607e:	4620      	mov	r0, r4
 8006080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006082:	4798      	blx	r3
 8006084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006086:	b1b9      	cbz	r1, 80060b8 <_reclaim_reent+0xb0>
 8006088:	4620      	mov	r0, r4
 800608a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800608e:	f7ff bfad 	b.w	8005fec <cleanup_glue>
 8006092:	5949      	ldr	r1, [r1, r5]
 8006094:	b941      	cbnz	r1, 80060a8 <_reclaim_reent+0xa0>
 8006096:	3504      	adds	r5, #4
 8006098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800609a:	2d80      	cmp	r5, #128	; 0x80
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	d1f8      	bne.n	8006092 <_reclaim_reent+0x8a>
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f849 	bl	8006138 <_free_r>
 80060a6:	e7ba      	b.n	800601e <_reclaim_reent+0x16>
 80060a8:	680e      	ldr	r6, [r1, #0]
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f844 	bl	8006138 <_free_r>
 80060b0:	4631      	mov	r1, r6
 80060b2:	e7ef      	b.n	8006094 <_reclaim_reent+0x8c>
 80060b4:	2500      	movs	r5, #0
 80060b6:	e7ef      	b.n	8006098 <_reclaim_reent+0x90>
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	bf00      	nop
 80060bc:	20000010 	.word	0x20000010

080060c0 <_sbrk_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	2300      	movs	r3, #0
 80060c4:	4d05      	ldr	r5, [pc, #20]	; (80060dc <_sbrk_r+0x1c>)
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	f7fa ff96 	bl	8000ffc <_sbrk>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_sbrk_r+0x1a>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_sbrk_r+0x1a>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	200011f8 	.word	0x200011f8

080060e0 <siprintf>:
 80060e0:	b40e      	push	{r1, r2, r3}
 80060e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060e6:	b500      	push	{lr}
 80060e8:	b09c      	sub	sp, #112	; 0x70
 80060ea:	ab1d      	add	r3, sp, #116	; 0x74
 80060ec:	9002      	str	r0, [sp, #8]
 80060ee:	9006      	str	r0, [sp, #24]
 80060f0:	9107      	str	r1, [sp, #28]
 80060f2:	9104      	str	r1, [sp, #16]
 80060f4:	4808      	ldr	r0, [pc, #32]	; (8006118 <siprintf+0x38>)
 80060f6:	4909      	ldr	r1, [pc, #36]	; (800611c <siprintf+0x3c>)
 80060f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fc:	9105      	str	r1, [sp, #20]
 80060fe:	6800      	ldr	r0, [r0, #0]
 8006100:	a902      	add	r1, sp, #8
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	f000 f8bc 	bl	8006280 <_svfiprintf_r>
 8006108:	2200      	movs	r2, #0
 800610a:	9b02      	ldr	r3, [sp, #8]
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	b01c      	add	sp, #112	; 0x70
 8006110:	f85d eb04 	ldr.w	lr, [sp], #4
 8006114:	b003      	add	sp, #12
 8006116:	4770      	bx	lr
 8006118:	20000010 	.word	0x20000010
 800611c:	ffff0208 	.word	0xffff0208

08006120 <__malloc_lock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_lock+0x8>)
 8006122:	f7ff beb7 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	200011ec 	.word	0x200011ec

0800612c <__malloc_unlock>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__malloc_unlock+0x8>)
 800612e:	f7ff beb2 	b.w	8005e96 <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	200011ec 	.word	0x200011ec

08006138 <_free_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4605      	mov	r5, r0
 800613c:	2900      	cmp	r1, #0
 800613e:	d040      	beq.n	80061c2 <_free_r+0x8a>
 8006140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006144:	1f0c      	subs	r4, r1, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfb8      	it	lt
 800614a:	18e4      	addlt	r4, r4, r3
 800614c:	f7ff ffe8 	bl	8006120 <__malloc_lock>
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <_free_r+0x8c>)
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	b933      	cbnz	r3, 8006164 <_free_r+0x2c>
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	6014      	str	r4, [r2, #0]
 800615a:	4628      	mov	r0, r5
 800615c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006160:	f7ff bfe4 	b.w	800612c <__malloc_unlock>
 8006164:	42a3      	cmp	r3, r4
 8006166:	d908      	bls.n	800617a <_free_r+0x42>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	1821      	adds	r1, r4, r0
 800616c:	428b      	cmp	r3, r1
 800616e:	bf01      	itttt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	1809      	addeq	r1, r1, r0
 8006176:	6021      	streq	r1, [r4, #0]
 8006178:	e7ed      	b.n	8006156 <_free_r+0x1e>
 800617a:	461a      	mov	r2, r3
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	b10b      	cbz	r3, 8006184 <_free_r+0x4c>
 8006180:	42a3      	cmp	r3, r4
 8006182:	d9fa      	bls.n	800617a <_free_r+0x42>
 8006184:	6811      	ldr	r1, [r2, #0]
 8006186:	1850      	adds	r0, r2, r1
 8006188:	42a0      	cmp	r0, r4
 800618a:	d10b      	bne.n	80061a4 <_free_r+0x6c>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	4401      	add	r1, r0
 8006190:	1850      	adds	r0, r2, r1
 8006192:	4283      	cmp	r3, r0
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	d1e0      	bne.n	800615a <_free_r+0x22>
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4401      	add	r1, r0
 800619e:	6011      	str	r1, [r2, #0]
 80061a0:	6053      	str	r3, [r2, #4]
 80061a2:	e7da      	b.n	800615a <_free_r+0x22>
 80061a4:	d902      	bls.n	80061ac <_free_r+0x74>
 80061a6:	230c      	movs	r3, #12
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	e7d6      	b.n	800615a <_free_r+0x22>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	1821      	adds	r1, r4, r0
 80061b0:	428b      	cmp	r3, r1
 80061b2:	bf01      	itttt	eq
 80061b4:	6819      	ldreq	r1, [r3, #0]
 80061b6:	685b      	ldreq	r3, [r3, #4]
 80061b8:	1809      	addeq	r1, r1, r0
 80061ba:	6021      	streq	r1, [r4, #0]
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	6054      	str	r4, [r2, #4]
 80061c0:	e7cb      	b.n	800615a <_free_r+0x22>
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	200011f0 	.word	0x200011f0

080061c8 <__ssputs_r>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	688e      	ldr	r6, [r1, #8]
 80061ce:	4682      	mov	sl, r0
 80061d0:	429e      	cmp	r6, r3
 80061d2:	460c      	mov	r4, r1
 80061d4:	4690      	mov	r8, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	d838      	bhi.n	800624c <__ssputs_r+0x84>
 80061da:	898a      	ldrh	r2, [r1, #12]
 80061dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061e0:	d032      	beq.n	8006248 <__ssputs_r+0x80>
 80061e2:	6825      	ldr	r5, [r4, #0]
 80061e4:	6909      	ldr	r1, [r1, #16]
 80061e6:	3301      	adds	r3, #1
 80061e8:	eba5 0901 	sub.w	r9, r5, r1
 80061ec:	6965      	ldr	r5, [r4, #20]
 80061ee:	444b      	add	r3, r9
 80061f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f8:	106d      	asrs	r5, r5, #1
 80061fa:	429d      	cmp	r5, r3
 80061fc:	bf38      	it	cc
 80061fe:	461d      	movcc	r5, r3
 8006200:	0553      	lsls	r3, r2, #21
 8006202:	d531      	bpl.n	8006268 <__ssputs_r+0xa0>
 8006204:	4629      	mov	r1, r5
 8006206:	f7ff fe7d 	bl	8005f04 <_malloc_r>
 800620a:	4606      	mov	r6, r0
 800620c:	b950      	cbnz	r0, 8006224 <__ssputs_r+0x5c>
 800620e:	230c      	movs	r3, #12
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	f8ca 3000 	str.w	r3, [sl]
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006224:	464a      	mov	r2, r9
 8006226:	6921      	ldr	r1, [r4, #16]
 8006228:	f7ff fe36 	bl	8005e98 <memcpy>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	6126      	str	r6, [r4, #16]
 800623a:	444e      	add	r6, r9
 800623c:	6026      	str	r6, [r4, #0]
 800623e:	463e      	mov	r6, r7
 8006240:	6165      	str	r5, [r4, #20]
 8006242:	eba5 0509 	sub.w	r5, r5, r9
 8006246:	60a5      	str	r5, [r4, #8]
 8006248:	42be      	cmp	r6, r7
 800624a:	d900      	bls.n	800624e <__ssputs_r+0x86>
 800624c:	463e      	mov	r6, r7
 800624e:	4632      	mov	r2, r6
 8006250:	4641      	mov	r1, r8
 8006252:	6820      	ldr	r0, [r4, #0]
 8006254:	f000 fab8 	bl	80067c8 <memmove>
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	2000      	movs	r0, #0
 800625c:	1b9b      	subs	r3, r3, r6
 800625e:	60a3      	str	r3, [r4, #8]
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	4433      	add	r3, r6
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	e7db      	b.n	8006220 <__ssputs_r+0x58>
 8006268:	462a      	mov	r2, r5
 800626a:	f000 fac7 	bl	80067fc <_realloc_r>
 800626e:	4606      	mov	r6, r0
 8006270:	2800      	cmp	r0, #0
 8006272:	d1e1      	bne.n	8006238 <__ssputs_r+0x70>
 8006274:	4650      	mov	r0, sl
 8006276:	6921      	ldr	r1, [r4, #16]
 8006278:	f7ff ff5e 	bl	8006138 <_free_r>
 800627c:	e7c7      	b.n	800620e <__ssputs_r+0x46>
	...

08006280 <_svfiprintf_r>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4698      	mov	r8, r3
 8006286:	898b      	ldrh	r3, [r1, #12]
 8006288:	4607      	mov	r7, r0
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	460d      	mov	r5, r1
 800628e:	4614      	mov	r4, r2
 8006290:	b09d      	sub	sp, #116	; 0x74
 8006292:	d50e      	bpl.n	80062b2 <_svfiprintf_r+0x32>
 8006294:	690b      	ldr	r3, [r1, #16]
 8006296:	b963      	cbnz	r3, 80062b2 <_svfiprintf_r+0x32>
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	f7ff fe33 	bl	8005f04 <_malloc_r>
 800629e:	6028      	str	r0, [r5, #0]
 80062a0:	6128      	str	r0, [r5, #16]
 80062a2:	b920      	cbnz	r0, 80062ae <_svfiprintf_r+0x2e>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e0d1      	b.n	8006452 <_svfiprintf_r+0x1d2>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	616b      	str	r3, [r5, #20]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9309      	str	r3, [sp, #36]	; 0x24
 80062b6:	2320      	movs	r3, #32
 80062b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	f04f 0901 	mov.w	r9, #1
 80062c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800646c <_svfiprintf_r+0x1ec>
 80062ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ce:	4623      	mov	r3, r4
 80062d0:	469a      	mov	sl, r3
 80062d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d6:	b10a      	cbz	r2, 80062dc <_svfiprintf_r+0x5c>
 80062d8:	2a25      	cmp	r2, #37	; 0x25
 80062da:	d1f9      	bne.n	80062d0 <_svfiprintf_r+0x50>
 80062dc:	ebba 0b04 	subs.w	fp, sl, r4
 80062e0:	d00b      	beq.n	80062fa <_svfiprintf_r+0x7a>
 80062e2:	465b      	mov	r3, fp
 80062e4:	4622      	mov	r2, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ff6d 	bl	80061c8 <__ssputs_r>
 80062ee:	3001      	adds	r0, #1
 80062f0:	f000 80aa 	beq.w	8006448 <_svfiprintf_r+0x1c8>
 80062f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f6:	445a      	add	r2, fp
 80062f8:	9209      	str	r2, [sp, #36]	; 0x24
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80a2 	beq.w	8006448 <_svfiprintf_r+0x1c8>
 8006304:	2300      	movs	r3, #0
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630e:	f10a 0a01 	add.w	sl, sl, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631a:	931a      	str	r3, [sp, #104]	; 0x68
 800631c:	4654      	mov	r4, sl
 800631e:	2205      	movs	r2, #5
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	4851      	ldr	r0, [pc, #324]	; (800646c <_svfiprintf_r+0x1ec>)
 8006326:	f000 fa41 	bl	80067ac <memchr>
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	b9d8      	cbnz	r0, 8006366 <_svfiprintf_r+0xe6>
 800632e:	06d0      	lsls	r0, r2, #27
 8006330:	bf44      	itt	mi
 8006332:	2320      	movmi	r3, #32
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006338:	0711      	lsls	r1, r2, #28
 800633a:	bf44      	itt	mi
 800633c:	232b      	movmi	r3, #43	; 0x2b
 800633e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b2a      	cmp	r3, #42	; 0x2a
 8006348:	d015      	beq.n	8006376 <_svfiprintf_r+0xf6>
 800634a:	4654      	mov	r4, sl
 800634c:	2000      	movs	r0, #0
 800634e:	f04f 0c0a 	mov.w	ip, #10
 8006352:	9a07      	ldr	r2, [sp, #28]
 8006354:	4621      	mov	r1, r4
 8006356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635a:	3b30      	subs	r3, #48	; 0x30
 800635c:	2b09      	cmp	r3, #9
 800635e:	d94e      	bls.n	80063fe <_svfiprintf_r+0x17e>
 8006360:	b1b0      	cbz	r0, 8006390 <_svfiprintf_r+0x110>
 8006362:	9207      	str	r2, [sp, #28]
 8006364:	e014      	b.n	8006390 <_svfiprintf_r+0x110>
 8006366:	eba0 0308 	sub.w	r3, r0, r8
 800636a:	fa09 f303 	lsl.w	r3, r9, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	46a2      	mov	sl, r4
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	e7d2      	b.n	800631c <_svfiprintf_r+0x9c>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfbb      	ittet	lt
 8006382:	425b      	neglt	r3, r3
 8006384:	f042 0202 	orrlt.w	r2, r2, #2
 8006388:	9307      	strge	r3, [sp, #28]
 800638a:	9307      	strlt	r3, [sp, #28]
 800638c:	bfb8      	it	lt
 800638e:	9204      	strlt	r2, [sp, #16]
 8006390:	7823      	ldrb	r3, [r4, #0]
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d10c      	bne.n	80063b0 <_svfiprintf_r+0x130>
 8006396:	7863      	ldrb	r3, [r4, #1]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d135      	bne.n	8006408 <_svfiprintf_r+0x188>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	3402      	adds	r4, #2
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006470 <_svfiprintf_r+0x1f0>
 80063b4:	2203      	movs	r2, #3
 80063b6:	4650      	mov	r0, sl
 80063b8:	7821      	ldrb	r1, [r4, #0]
 80063ba:	f000 f9f7 	bl	80067ac <memchr>
 80063be:	b140      	cbz	r0, 80063d2 <_svfiprintf_r+0x152>
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	eba0 000a 	sub.w	r0, r0, sl
 80063c6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ca:	9b04      	ldr	r3, [sp, #16]
 80063cc:	3401      	adds	r4, #1
 80063ce:	4303      	orrs	r3, r0
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d6:	2206      	movs	r2, #6
 80063d8:	4826      	ldr	r0, [pc, #152]	; (8006474 <_svfiprintf_r+0x1f4>)
 80063da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063de:	f000 f9e5 	bl	80067ac <memchr>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d038      	beq.n	8006458 <_svfiprintf_r+0x1d8>
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <_svfiprintf_r+0x1f8>)
 80063e8:	bb1b      	cbnz	r3, 8006432 <_svfiprintf_r+0x1b2>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	3308      	adds	r3, #8
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	4433      	add	r3, r6
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	e767      	b.n	80062ce <_svfiprintf_r+0x4e>
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	fb0c 3202 	mla	r2, ip, r2, r3
 8006406:	e7a5      	b.n	8006354 <_svfiprintf_r+0xd4>
 8006408:	2300      	movs	r3, #0
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4619      	mov	r1, r3
 8006410:	3401      	adds	r4, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	4620      	mov	r0, r4
 8006416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641a:	3a30      	subs	r2, #48	; 0x30
 800641c:	2a09      	cmp	r2, #9
 800641e:	d903      	bls.n	8006428 <_svfiprintf_r+0x1a8>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0c5      	beq.n	80063b0 <_svfiprintf_r+0x130>
 8006424:	9105      	str	r1, [sp, #20]
 8006426:	e7c3      	b.n	80063b0 <_svfiprintf_r+0x130>
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006430:	e7f0      	b.n	8006414 <_svfiprintf_r+0x194>
 8006432:	ab03      	add	r3, sp, #12
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	462a      	mov	r2, r5
 8006438:	4638      	mov	r0, r7
 800643a:	4b10      	ldr	r3, [pc, #64]	; (800647c <_svfiprintf_r+0x1fc>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	f3af 8000 	nop.w
 8006442:	1c42      	adds	r2, r0, #1
 8006444:	4606      	mov	r6, r0
 8006446:	d1d6      	bne.n	80063f6 <_svfiprintf_r+0x176>
 8006448:	89ab      	ldrh	r3, [r5, #12]
 800644a:	065b      	lsls	r3, r3, #25
 800644c:	f53f af2c 	bmi.w	80062a8 <_svfiprintf_r+0x28>
 8006450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006452:	b01d      	add	sp, #116	; 0x74
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	ab03      	add	r3, sp, #12
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	462a      	mov	r2, r5
 800645e:	4638      	mov	r0, r7
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <_svfiprintf_r+0x1fc>)
 8006462:	a904      	add	r1, sp, #16
 8006464:	f000 f87c 	bl	8006560 <_printf_i>
 8006468:	e7eb      	b.n	8006442 <_svfiprintf_r+0x1c2>
 800646a:	bf00      	nop
 800646c:	08006f90 	.word	0x08006f90
 8006470:	08006f96 	.word	0x08006f96
 8006474:	08006f9a 	.word	0x08006f9a
 8006478:	00000000 	.word	0x00000000
 800647c:	080061c9 	.word	0x080061c9

08006480 <_printf_common>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	4616      	mov	r6, r2
 8006486:	4699      	mov	r9, r3
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	690b      	ldr	r3, [r1, #16]
 800648c:	4607      	mov	r7, r0
 800648e:	4293      	cmp	r3, r2
 8006490:	bfb8      	it	lt
 8006492:	4613      	movlt	r3, r2
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800649a:	460c      	mov	r4, r1
 800649c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a0:	b10a      	cbz	r2, 80064a6 <_printf_common+0x26>
 80064a2:	3301      	adds	r3, #1
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	0699      	lsls	r1, r3, #26
 80064aa:	bf42      	ittt	mi
 80064ac:	6833      	ldrmi	r3, [r6, #0]
 80064ae:	3302      	addmi	r3, #2
 80064b0:	6033      	strmi	r3, [r6, #0]
 80064b2:	6825      	ldr	r5, [r4, #0]
 80064b4:	f015 0506 	ands.w	r5, r5, #6
 80064b8:	d106      	bne.n	80064c8 <_printf_common+0x48>
 80064ba:	f104 0a19 	add.w	sl, r4, #25
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	6832      	ldr	r2, [r6, #0]
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	dc28      	bgt.n	800651a <_printf_common+0x9a>
 80064c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064cc:	1e13      	subs	r3, r2, #0
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	bf18      	it	ne
 80064d2:	2301      	movne	r3, #1
 80064d4:	0692      	lsls	r2, r2, #26
 80064d6:	d42d      	bmi.n	8006534 <_printf_common+0xb4>
 80064d8:	4649      	mov	r1, r9
 80064da:	4638      	mov	r0, r7
 80064dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d020      	beq.n	8006528 <_printf_common+0xa8>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	68e5      	ldr	r5, [r4, #12]
 80064ea:	f003 0306 	and.w	r3, r3, #6
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	bf18      	it	ne
 80064f2:	2500      	movne	r5, #0
 80064f4:	6832      	ldr	r2, [r6, #0]
 80064f6:	f04f 0600 	mov.w	r6, #0
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	bf08      	it	eq
 80064fe:	1aad      	subeq	r5, r5, r2
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	bf08      	it	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	4293      	cmp	r3, r2
 800650a:	bfc4      	itt	gt
 800650c:	1a9b      	subgt	r3, r3, r2
 800650e:	18ed      	addgt	r5, r5, r3
 8006510:	341a      	adds	r4, #26
 8006512:	42b5      	cmp	r5, r6
 8006514:	d11a      	bne.n	800654c <_printf_common+0xcc>
 8006516:	2000      	movs	r0, #0
 8006518:	e008      	b.n	800652c <_printf_common+0xac>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4649      	mov	r1, r9
 8006520:	4638      	mov	r0, r7
 8006522:	47c0      	blx	r8
 8006524:	3001      	adds	r0, #1
 8006526:	d103      	bne.n	8006530 <_printf_common+0xb0>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	3501      	adds	r5, #1
 8006532:	e7c4      	b.n	80064be <_printf_common+0x3e>
 8006534:	2030      	movs	r0, #48	; 0x30
 8006536:	18e1      	adds	r1, r4, r3
 8006538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006542:	4422      	add	r2, r4
 8006544:	3302      	adds	r3, #2
 8006546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800654a:	e7c5      	b.n	80064d8 <_printf_common+0x58>
 800654c:	2301      	movs	r3, #1
 800654e:	4622      	mov	r2, r4
 8006550:	4649      	mov	r1, r9
 8006552:	4638      	mov	r0, r7
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d0e6      	beq.n	8006528 <_printf_common+0xa8>
 800655a:	3601      	adds	r6, #1
 800655c:	e7d9      	b.n	8006512 <_printf_common+0x92>
	...

08006560 <_printf_i>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	7e0f      	ldrb	r7, [r1, #24]
 8006566:	4691      	mov	r9, r2
 8006568:	2f78      	cmp	r7, #120	; 0x78
 800656a:	4680      	mov	r8, r0
 800656c:	460c      	mov	r4, r1
 800656e:	469a      	mov	sl, r3
 8006570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006576:	d807      	bhi.n	8006588 <_printf_i+0x28>
 8006578:	2f62      	cmp	r7, #98	; 0x62
 800657a:	d80a      	bhi.n	8006592 <_printf_i+0x32>
 800657c:	2f00      	cmp	r7, #0
 800657e:	f000 80d9 	beq.w	8006734 <_printf_i+0x1d4>
 8006582:	2f58      	cmp	r7, #88	; 0x58
 8006584:	f000 80a4 	beq.w	80066d0 <_printf_i+0x170>
 8006588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006590:	e03a      	b.n	8006608 <_printf_i+0xa8>
 8006592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006596:	2b15      	cmp	r3, #21
 8006598:	d8f6      	bhi.n	8006588 <_printf_i+0x28>
 800659a:	a101      	add	r1, pc, #4	; (adr r1, 80065a0 <_printf_i+0x40>)
 800659c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a0:	080065f9 	.word	0x080065f9
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	08006589 	.word	0x08006589
 80065ac:	08006589 	.word	0x08006589
 80065b0:	08006589 	.word	0x08006589
 80065b4:	08006589 	.word	0x08006589
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006589 	.word	0x08006589
 80065c0:	08006589 	.word	0x08006589
 80065c4:	08006589 	.word	0x08006589
 80065c8:	08006589 	.word	0x08006589
 80065cc:	0800671b 	.word	0x0800671b
 80065d0:	0800663d 	.word	0x0800663d
 80065d4:	080066fd 	.word	0x080066fd
 80065d8:	08006589 	.word	0x08006589
 80065dc:	08006589 	.word	0x08006589
 80065e0:	0800673d 	.word	0x0800673d
 80065e4:	08006589 	.word	0x08006589
 80065e8:	0800663d 	.word	0x0800663d
 80065ec:	08006589 	.word	0x08006589
 80065f0:	08006589 	.word	0x08006589
 80065f4:	08006705 	.word	0x08006705
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006608:	2301      	movs	r3, #1
 800660a:	e0a4      	b.n	8006756 <_printf_i+0x1f6>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	6829      	ldr	r1, [r5, #0]
 8006610:	0606      	lsls	r6, r0, #24
 8006612:	f101 0304 	add.w	r3, r1, #4
 8006616:	d50a      	bpl.n	800662e <_printf_i+0xce>
 8006618:	680e      	ldr	r6, [r1, #0]
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	2e00      	cmp	r6, #0
 800661e:	da03      	bge.n	8006628 <_printf_i+0xc8>
 8006620:	232d      	movs	r3, #45	; 0x2d
 8006622:	4276      	negs	r6, r6
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006628:	230a      	movs	r3, #10
 800662a:	485e      	ldr	r0, [pc, #376]	; (80067a4 <_printf_i+0x244>)
 800662c:	e019      	b.n	8006662 <_printf_i+0x102>
 800662e:	680e      	ldr	r6, [r1, #0]
 8006630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	bf18      	it	ne
 8006638:	b236      	sxthne	r6, r6
 800663a:	e7ef      	b.n	800661c <_printf_i+0xbc>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	1d19      	adds	r1, r3, #4
 8006642:	6029      	str	r1, [r5, #0]
 8006644:	0601      	lsls	r1, r0, #24
 8006646:	d501      	bpl.n	800664c <_printf_i+0xec>
 8006648:	681e      	ldr	r6, [r3, #0]
 800664a:	e002      	b.n	8006652 <_printf_i+0xf2>
 800664c:	0646      	lsls	r6, r0, #25
 800664e:	d5fb      	bpl.n	8006648 <_printf_i+0xe8>
 8006650:	881e      	ldrh	r6, [r3, #0]
 8006652:	2f6f      	cmp	r7, #111	; 0x6f
 8006654:	bf0c      	ite	eq
 8006656:	2308      	moveq	r3, #8
 8006658:	230a      	movne	r3, #10
 800665a:	4852      	ldr	r0, [pc, #328]	; (80067a4 <_printf_i+0x244>)
 800665c:	2100      	movs	r1, #0
 800665e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006662:	6865      	ldr	r5, [r4, #4]
 8006664:	2d00      	cmp	r5, #0
 8006666:	bfa8      	it	ge
 8006668:	6821      	ldrge	r1, [r4, #0]
 800666a:	60a5      	str	r5, [r4, #8]
 800666c:	bfa4      	itt	ge
 800666e:	f021 0104 	bicge.w	r1, r1, #4
 8006672:	6021      	strge	r1, [r4, #0]
 8006674:	b90e      	cbnz	r6, 800667a <_printf_i+0x11a>
 8006676:	2d00      	cmp	r5, #0
 8006678:	d04d      	beq.n	8006716 <_printf_i+0x1b6>
 800667a:	4615      	mov	r5, r2
 800667c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006680:	fb03 6711 	mls	r7, r3, r1, r6
 8006684:	5dc7      	ldrb	r7, [r0, r7]
 8006686:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800668a:	4637      	mov	r7, r6
 800668c:	42bb      	cmp	r3, r7
 800668e:	460e      	mov	r6, r1
 8006690:	d9f4      	bls.n	800667c <_printf_i+0x11c>
 8006692:	2b08      	cmp	r3, #8
 8006694:	d10b      	bne.n	80066ae <_printf_i+0x14e>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	07de      	lsls	r6, r3, #31
 800669a:	d508      	bpl.n	80066ae <_printf_i+0x14e>
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	6861      	ldr	r1, [r4, #4]
 80066a0:	4299      	cmp	r1, r3
 80066a2:	bfde      	ittt	le
 80066a4:	2330      	movle	r3, #48	; 0x30
 80066a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ae:	1b52      	subs	r2, r2, r5
 80066b0:	6122      	str	r2, [r4, #16]
 80066b2:	464b      	mov	r3, r9
 80066b4:	4621      	mov	r1, r4
 80066b6:	4640      	mov	r0, r8
 80066b8:	f8cd a000 	str.w	sl, [sp]
 80066bc:	aa03      	add	r2, sp, #12
 80066be:	f7ff fedf 	bl	8006480 <_printf_common>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d14c      	bne.n	8006760 <_printf_i+0x200>
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ca:	b004      	add	sp, #16
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	4834      	ldr	r0, [pc, #208]	; (80067a4 <_printf_i+0x244>)
 80066d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066d6:	6829      	ldr	r1, [r5, #0]
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	f851 6b04 	ldr.w	r6, [r1], #4
 80066de:	6029      	str	r1, [r5, #0]
 80066e0:	061d      	lsls	r5, r3, #24
 80066e2:	d514      	bpl.n	800670e <_printf_i+0x1ae>
 80066e4:	07df      	lsls	r7, r3, #31
 80066e6:	bf44      	itt	mi
 80066e8:	f043 0320 	orrmi.w	r3, r3, #32
 80066ec:	6023      	strmi	r3, [r4, #0]
 80066ee:	b91e      	cbnz	r6, 80066f8 <_printf_i+0x198>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	f023 0320 	bic.w	r3, r3, #32
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	2310      	movs	r3, #16
 80066fa:	e7af      	b.n	800665c <_printf_i+0xfc>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	2378      	movs	r3, #120	; 0x78
 8006706:	4828      	ldr	r0, [pc, #160]	; (80067a8 <_printf_i+0x248>)
 8006708:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800670c:	e7e3      	b.n	80066d6 <_printf_i+0x176>
 800670e:	0659      	lsls	r1, r3, #25
 8006710:	bf48      	it	mi
 8006712:	b2b6      	uxthmi	r6, r6
 8006714:	e7e6      	b.n	80066e4 <_printf_i+0x184>
 8006716:	4615      	mov	r5, r2
 8006718:	e7bb      	b.n	8006692 <_printf_i+0x132>
 800671a:	682b      	ldr	r3, [r5, #0]
 800671c:	6826      	ldr	r6, [r4, #0]
 800671e:	1d18      	adds	r0, r3, #4
 8006720:	6961      	ldr	r1, [r4, #20]
 8006722:	6028      	str	r0, [r5, #0]
 8006724:	0635      	lsls	r5, r6, #24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	d501      	bpl.n	800672e <_printf_i+0x1ce>
 800672a:	6019      	str	r1, [r3, #0]
 800672c:	e002      	b.n	8006734 <_printf_i+0x1d4>
 800672e:	0670      	lsls	r0, r6, #25
 8006730:	d5fb      	bpl.n	800672a <_printf_i+0x1ca>
 8006732:	8019      	strh	r1, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	4615      	mov	r5, r2
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	e7ba      	b.n	80066b2 <_printf_i+0x152>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	2100      	movs	r1, #0
 8006740:	1d1a      	adds	r2, r3, #4
 8006742:	602a      	str	r2, [r5, #0]
 8006744:	681d      	ldr	r5, [r3, #0]
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f82f 	bl	80067ac <memchr>
 800674e:	b108      	cbz	r0, 8006754 <_printf_i+0x1f4>
 8006750:	1b40      	subs	r0, r0, r5
 8006752:	6060      	str	r0, [r4, #4]
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	2300      	movs	r3, #0
 800675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675e:	e7a8      	b.n	80066b2 <_printf_i+0x152>
 8006760:	462a      	mov	r2, r5
 8006762:	4649      	mov	r1, r9
 8006764:	4640      	mov	r0, r8
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	47d0      	blx	sl
 800676a:	3001      	adds	r0, #1
 800676c:	d0ab      	beq.n	80066c6 <_printf_i+0x166>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	079b      	lsls	r3, r3, #30
 8006772:	d413      	bmi.n	800679c <_printf_i+0x23c>
 8006774:	68e0      	ldr	r0, [r4, #12]
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	4298      	cmp	r0, r3
 800677a:	bfb8      	it	lt
 800677c:	4618      	movlt	r0, r3
 800677e:	e7a4      	b.n	80066ca <_printf_i+0x16a>
 8006780:	2301      	movs	r3, #1
 8006782:	4632      	mov	r2, r6
 8006784:	4649      	mov	r1, r9
 8006786:	4640      	mov	r0, r8
 8006788:	47d0      	blx	sl
 800678a:	3001      	adds	r0, #1
 800678c:	d09b      	beq.n	80066c6 <_printf_i+0x166>
 800678e:	3501      	adds	r5, #1
 8006790:	68e3      	ldr	r3, [r4, #12]
 8006792:	9903      	ldr	r1, [sp, #12]
 8006794:	1a5b      	subs	r3, r3, r1
 8006796:	42ab      	cmp	r3, r5
 8006798:	dcf2      	bgt.n	8006780 <_printf_i+0x220>
 800679a:	e7eb      	b.n	8006774 <_printf_i+0x214>
 800679c:	2500      	movs	r5, #0
 800679e:	f104 0619 	add.w	r6, r4, #25
 80067a2:	e7f5      	b.n	8006790 <_printf_i+0x230>
 80067a4:	08006fa1 	.word	0x08006fa1
 80067a8:	08006fb2 	.word	0x08006fb2

080067ac <memchr>:
 80067ac:	4603      	mov	r3, r0
 80067ae:	b510      	push	{r4, lr}
 80067b0:	b2c9      	uxtb	r1, r1
 80067b2:	4402      	add	r2, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	d101      	bne.n	80067be <memchr+0x12>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e003      	b.n	80067c6 <memchr+0x1a>
 80067be:	7804      	ldrb	r4, [r0, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	428c      	cmp	r4, r1
 80067c4:	d1f6      	bne.n	80067b4 <memchr+0x8>
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <memmove>:
 80067c8:	4288      	cmp	r0, r1
 80067ca:	b510      	push	{r4, lr}
 80067cc:	eb01 0402 	add.w	r4, r1, r2
 80067d0:	d902      	bls.n	80067d8 <memmove+0x10>
 80067d2:	4284      	cmp	r4, r0
 80067d4:	4623      	mov	r3, r4
 80067d6:	d807      	bhi.n	80067e8 <memmove+0x20>
 80067d8:	1e43      	subs	r3, r0, #1
 80067da:	42a1      	cmp	r1, r4
 80067dc:	d008      	beq.n	80067f0 <memmove+0x28>
 80067de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067e6:	e7f8      	b.n	80067da <memmove+0x12>
 80067e8:	4601      	mov	r1, r0
 80067ea:	4402      	add	r2, r0
 80067ec:	428a      	cmp	r2, r1
 80067ee:	d100      	bne.n	80067f2 <memmove+0x2a>
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067fa:	e7f7      	b.n	80067ec <memmove+0x24>

080067fc <_realloc_r>:
 80067fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006800:	4680      	mov	r8, r0
 8006802:	4614      	mov	r4, r2
 8006804:	460e      	mov	r6, r1
 8006806:	b921      	cbnz	r1, 8006812 <_realloc_r+0x16>
 8006808:	4611      	mov	r1, r2
 800680a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	f7ff bb79 	b.w	8005f04 <_malloc_r>
 8006812:	b92a      	cbnz	r2, 8006820 <_realloc_r+0x24>
 8006814:	f7ff fc90 	bl	8006138 <_free_r>
 8006818:	4625      	mov	r5, r4
 800681a:	4628      	mov	r0, r5
 800681c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006820:	f000 f81b 	bl	800685a <_malloc_usable_size_r>
 8006824:	4284      	cmp	r4, r0
 8006826:	4607      	mov	r7, r0
 8006828:	d802      	bhi.n	8006830 <_realloc_r+0x34>
 800682a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800682e:	d812      	bhi.n	8006856 <_realloc_r+0x5a>
 8006830:	4621      	mov	r1, r4
 8006832:	4640      	mov	r0, r8
 8006834:	f7ff fb66 	bl	8005f04 <_malloc_r>
 8006838:	4605      	mov	r5, r0
 800683a:	2800      	cmp	r0, #0
 800683c:	d0ed      	beq.n	800681a <_realloc_r+0x1e>
 800683e:	42bc      	cmp	r4, r7
 8006840:	4622      	mov	r2, r4
 8006842:	4631      	mov	r1, r6
 8006844:	bf28      	it	cs
 8006846:	463a      	movcs	r2, r7
 8006848:	f7ff fb26 	bl	8005e98 <memcpy>
 800684c:	4631      	mov	r1, r6
 800684e:	4640      	mov	r0, r8
 8006850:	f7ff fc72 	bl	8006138 <_free_r>
 8006854:	e7e1      	b.n	800681a <_realloc_r+0x1e>
 8006856:	4635      	mov	r5, r6
 8006858:	e7df      	b.n	800681a <_realloc_r+0x1e>

0800685a <_malloc_usable_size_r>:
 800685a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685e:	1f18      	subs	r0, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	bfbc      	itt	lt
 8006864:	580b      	ldrlt	r3, [r1, r0]
 8006866:	18c0      	addlt	r0, r0, r3
 8006868:	4770      	bx	lr
	...

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
